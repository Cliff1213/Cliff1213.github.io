<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UI 觀念直播班心得</title>
    <url>/2022-01-17-hexschool-UI/</url>
    <content><![CDATA[<p>2021 冬，UI 直播班心得，推！</p>
<span id="more"></span>

<hr>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本身不是設計相關科系，但還是希望能透過這次的＂六角學院－UI設計觀念必修直播班＂來增進一點 UI/UX 的相關知識，雖然很遺憾沒有完美的走到終點，但還是幫自己記錄一下這次參與直播班的心路歷程。</p>
<h2 id="報名這堂課的契機是？"><a href="#報名這堂課的契機是？" class="headerlink" title="報名這堂課的契機是？"></a>報名這堂課的契機是？</h2><p>相信在仿間與 UI/UX 設計相關的課程一定數不勝數，但是為什麼我會選擇”六角學院”的課程？原因很簡單，<del>就是信仰（沒</del>，其實早在先前就有報名六角的切版班了，而六角學院整體給我的氛圍是很團結的；你會有自己的小組以及永遠在前線待命等你發問的助教，當然少不了最敬業的老師。而因為你是跟著大家一起學習，所以當腦海衍生出想偷懶的想法同時，也會有一種被人從後面拍肩膀並對你說「欸我先走一步哩，你就繼續耍廢。」的感覺，讓你在學習上能自律。</p>
<h2 id="每週的學習過程："><a href="#每週的學習過程：" class="headerlink" title="每週的學習過程："></a>每週的學習過程：</h2><p>這一次表訂為期四週的直播課程大綱如下：</p>
<ul>
<li><p><strong>Week 1：掌握頁面所有元件</strong></p>
<p>本次主要使用的設計工具為 Figma，算是目前的主流之一。而這週就是帶你認識軟體的操作介面；雖然我在開課前有先觀看課前釋出的體驗營直播錄影，但是自己在操作上還是有許多不解的地方；不過在聽完第一週的直播後，我私下就利用時間把直播錄影再看一次並且針對操作上比較複雜的地方寫了筆記，<del>對我來說都很複雜所以筆記滿到哭</del>，而這些後續幫助我在練習軟體上幫助很多。</p>
</li>
<li><p><strong>Week 2：帶你從草稿到完稿</strong></p>
<p>這週認識了一些網頁在設計的過程中比較常見會遇到的設計模式，像是C.R.A.P的設計準則，或是在規劃網頁時常用的 AIDA Modal；再來會介紹甚麼是 Wireframe。這週基本上每個人會開始設計第一個 Landing Page，對我這個設計白癡來說算是頗有挑戰性的，<del>（我做的很像釣魚網站</del>。</p>
</li>
<li><p><strong>Week 3：伸縮自如的響應式設計</strong></p>
<p>RWD對我來說雖然早就不陌生，但是這堂課讓我更加的理解網頁在不同寬度的視窗做切換時的一些細節以及過往不懂的知識，像是中斷點、網格切換時的邏輯或是兩個物件之間的間距都是一個學問。</p>
</li>
<li><p><strong>Week 4：讓介面動起來</strong></p>
<p>這週的直播內容算是比較有趣的一次，主要都是在介紹 Prototype 的運作，很多動畫都是在網頁中常見的，但是直播以外的時間幾乎都是拿來做最終作品，從這週開始會覺得時間緊湊起來。</p>
</li>
<li><p><strong>Week 5：加碼內容</strong></p>
<p>標題說是表訂為期四週，但怎麼會還有第五週呢？原因是老師擔心有些同學工作比較忙碌，可能會沒有時間做最終作品，因此開放最終作品有達到一定進度的同學提供額外的一次直播並且延長作品繳交的期限<del>（老師你是神吧</del>，而加碼直播課程的內容是如何把作品上傳到 Behance 以及作品呈現的排版建議；為了拿到這張門票我花了不少時間不反覆改我的作品版型，但一切都值得。</p>
</li>
</ul>
<h2 id="建議："><a href="#建議：" class="headerlink" title="建議："></a>建議：</h2><p>無論你是不是設計背景，或是你有想轉職 UI 設計師的想法但是沒有明確的學習目標，不仿可以考慮看看六角學院的 UI 設計直播課程；好的學習環境跟課程規劃這裡都提供給你了，但能不能有所成長還是決定在自己身上，以我自己為例，很多觀念在直播上課的當下我是充滿疑惑的，但課後我會盡可能的把當天的直播錄影重頭到尾看一次並且隨時暫停錄影做筆記，因為對我來說暫停的當下會先思考一次問題的所在，而作筆記的時候會間接複習剛剛思考的問題，這確實大幅提升了我的學習效率，當然這是我自己的做法，每個人的學習方式不盡相同，但這裡要表達的重點是自己必須要有所規劃，再搭配現有的資源去做結合，才能最有效率的學習。</p>
<h2 id="結語："><a href="#結語：" class="headerlink" title="結語："></a>結語：</h2><p>雖然這次的過程對我來說真的不容易，但還是很榮幸可以跟到這次的直播課程，畢竟這是我有史以來最認真跟 UI/UX 相處的一段時間。很喜歡一個人專注在思考或是做某一件事情時的感覺，而這次直播班讓我深刻體會到了，遺憾的是我沒有在時間內完成最終作品，雖然對特別延長繳交期限的老師很不好意思，但這個作品我還是會利用時間把它完成，至少有始有終也算是對參與這個課程的自己負責吧。</p>
<p>最後我要特別感謝<strong>熾炎鐵甲狼</strong>的組員，特別是組長都會幫忙繳交小組作業以及提醒繳交的時間，也要感謝其他組員都會提出疑問和幫忙解答，雖然各位都很忙，但都盡可能的參與小組任務，這邊讓我私心合影紀念一下。</p>
<p><img src="https://i.imgur.com/kQuBKJ5.png" alt="img"></p>
<p>最後的最後，要感謝聲音自帶磁性的俊儀老師和唯一的 Joanne 助教願意回答我提出的蠢問題<del>（假日問跨年也問，吵到真的不好意思</del>，雖然最後階段的作品屢次被退回，但每次的建議我都有仔細看，讓我這個設計肢障提升了設計觀念之餘，也培養了專注思考的能力，感謝兩位的用力鞭打，也辛苦你們了。</p>
<p><img src="https://i.imgur.com/GIbWClM.png?1"></p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>UI/UX</tag>
        <tag>課程心得</tag>
        <tag>六角學院</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM 簡述</title>
    <url>/2022-02-07-npm-note/</url>
    <content><![CDATA[<p>學習 JavaScript 套件過程讓我懷疑人生，多虧了套件版本這個巨坑，才萌生想要先理解 NPM 的想法，真是謝了。</p>
<span id="more"></span>

<hr>
<h2 id="甚麼是-NPM？"><a href="#甚麼是-NPM？" class="headerlink" title="甚麼是 NPM？"></a>甚麼是 NPM？</h2><p>全名 Node Package Manager，是一種套件管理工具，簡言之就是匯集各種 Node js 套件的線上庫。</p>
<hr>
<h2 id="安裝-Node-JS-amp-NPM"><a href="#安裝-Node-JS-amp-NPM" class="headerlink" title="安裝 Node JS &amp; NPM"></a>安裝 Node JS &amp; NPM</h2><p><img src="https://i.imgur.com/O3WVkU4.png"></p>
<p>上圖是 <a href="https://nodejs.org/en/">Node js 官網</a>所提供的下載點，可以看到分成兩個部分，左邊為 LTS（Long Term Support），屬於長期支援維護的版本，可以理解成較穩定的版本；右邊 Current 的部分則是最近、最新的版本。</p>
<p>Node js 官方在版本的釋出上有自己的邏輯，通常會在每年四月份發布偶數版本，十月份發布奇數版本，可以從下圖看到近期的版本維護狀態：</p>
<p><img src="https://i.imgur.com/zOGuPaZ.png"></p>
<p>新的版本在發布後，版本號如果是奇數，六個月後就不會再維護；但版本號如果是偶數，半年後就會進入長期維護（Active LTS）的狀態，並保證在接下來的三十個月內會更新與修復各種問題，因此新專案通常會選擇安裝 LTS 的版本。</p>
<p>接著進入正題，要如何安裝 NPM？這個問題其實在安裝 Node 後就已經解決了，因為 NPM 是 Node js 開發環境預設的套件管理工具（Packge Manager），因此在安裝 Node 的同時，NPM 會跟著一起安裝。</p>
<blockquote>
<p>因為每個專案所使用的 Node 版本不盡相同，因此為了避免產生版本與套件之間的相容問題，建議使用 NVM（Node Version Manager）來切換 Node 版本。</p>
</blockquote>
<p>安裝完成後，開啟任一終端機即可開始操作。</p>
<hr>
<h2 id="檢視版本"><a href="#檢視版本" class="headerlink" title="檢視版本"></a>檢視版本</h2><p>在終端機輸入以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果顯示 npm 版本號，表示安裝成功，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6.9.0</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="初始化目錄"><a href="#初始化目錄" class="headerlink" title="初始化目錄"></a>初始化目錄</h2><p>指定任一資料夾為目錄，輸入以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>此時會顯示訊息要求輸入專案的一些資訊，如下所示：</p>
<p><img src="https://i.imgur.com/bGQsEeb.png"></p>
<p>上述部分只需要持續按下 Enter 即可。</p>
<p>接著透過編輯器開啟專案資料夾，可以看到一個 package.json 的檔案，這是資料夾在進行 npm 初始化後所產生的 json 格式檔案，內容主要是紀錄專案的資訊，如下所示：</p>
<p><img src="https://i.imgur.com/yjjj8ZV.png"></p>
<hr>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><h3 id="安裝至全域"><a href="#安裝至全域" class="headerlink" title="安裝至全域"></a><strong>安裝至全域</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g 套件名稱</span><br></pre></td></tr></table></figure>

<p>安裝套件時，在指令加入 <code>-g</code>，套件就會被安裝在全域，也就是當前使用的電腦上；這樣做的好處是，當有其他專案需要使用這個套件時，就不用再另外安裝該套件在專案資料夾中。</p>
<h3 id="安裝至指定目錄"><a href="#安裝至指定目錄" class="headerlink" title="安裝至指定目錄"></a><strong>安裝至指定目錄</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save 套件名稱</span><br></pre></td></tr></table></figure>

<p>以指定專案資料夾為目錄並執行上述指令，套件就會被安裝在該資料夾中，在加入 <code>--save</code> 參數後，這個套件就會被記錄在 package.json 檔案裡，下列以安裝 jquery 為範例：</p>
<p><img src="https://i.imgur.com/n1jRC8k.png"></p>
<p>可以看到檔案中新增了一個 dependencies 項目，並且在下方可以看到已安裝的 jquery 套件與對應版本。</p>
<p>因為不同專案所使用的套件與套件版本不同，因此在接手別人開發的專案時，可以先依據 dependencies 中的資訊來安裝對應的套件。</p>
<hr>
<h2 id="安裝指定版本套件"><a href="#安裝指定版本套件" class="headerlink" title="安裝指定版本套件"></a>安裝指定版本套件</h2><p>正常的情況下，安裝下來的套件預設會是最新的版本，但一些較舊的專案可能不支援新版本的套件，此時就可以使用以下指令來安裝指定版本的套件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install 套件名稱@版本號</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="版本數字意義"><a href="#版本數字意義" class="headerlink" title="版本數字意義"></a>版本數字意義</h2><p>通常套件的版本會以 3 個數字的格式來表示，但每個數字所代表的意義其實不同，下列以 jquery 為例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;jquery&quot;： &quot;^3.6.0&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>3</code> - 主要版本，通常會因為重大改版而增加版本號。</li>
<li><code>6</code> - 次要版本，依當前的主要版本為基準，新增功能時增加版本號。</li>
<li><code>0</code> - 修正版本，依當前的主要版本為基準，修正錯誤時增加版本號。</li>
</ul>
<p>開發的過程中通常不會直接更新主要版本，因為這樣有極高的機率毀掉專案，正常的情況下只會更新次要版本或修正版本，依專案的開發情形而定。</p>
<hr>
<h2 id="版本標示符號"><a href="#版本標示符號" class="headerlink" title="版本標示符號"></a>版本標示符號</h2><ul>
<li><code>^x.x.x</code> - 安裝套件時，自動更新次要與修正版本，主要版本不做更動。</li>
<li><code>~x.x.x</code> - 安裝套件時，自動更新修正版本，主要與次要版本不做更動。</li>
<li><code>latest</code> - 安裝套件時，自動安裝最新版本。</li>
<li>未加入任何符號，表示只安裝當前輸入的版本。</li>
</ul>
<p>更新套件版本的方式，只需要將專案資料夾中的 node_modules 刪除，再重新執行以下指令，系統就會根據該專案中的 package.json 檔案設置來安裝所有會使用到的套件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="移除套件"><a href="#移除套件" class="headerlink" title="移除套件"></a>移除套件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall 套件名稱</span><br></pre></td></tr></table></figure>

<p>需要注意的是，上述指令只會將專案資料夾中的套件移除，但是並不會同時更新 package.json 檔案中的設置，如果有這個需求，只需要在指令中加入 <code>--save</code> 參數即可。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E4%BD%BF%E7%94%A8npm%E5%A5%97%E4%BB%B6-317beefdf182"><em>從零開始：使用NPM套件</em></a></li>
<li><em><a href="https://linyencheng.github.io/2020/03/22/tool-npm/">npm 入門到進階</a></em></li>
</ul>
]]></content>
      <categories>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>學習筆記</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Font-Family 規則</title>
    <url>/2022-03-02-font-family/</url>
    <content><![CDATA[<p>紀錄 font-family 字體設定的基本觀念。</p>
<span id="more"></span>

<hr>
<h2 id="Font-Family-設定規則"><a href="#Font-Family-設定規則" class="headerlink" title="Font-Family 設定規則"></a>Font-Family 設定規則</h2><p>基本上只要是網頁設計，都會使用到的屬性，可以自訂頁面上的文字字體，但是初學者在使用這個屬性之前，為了避免結果不如預期，建議需要先理解一些設定上的規則。</p>
<h3 id="字體套用邏輯"><a href="#字體套用邏輯" class="headerlink" title="字體套用邏輯"></a>字體套用邏輯</h3><p>Font-Family 雖然可以設定多個屬性值，但是並不會將所有寫入的字體都一起套用，而是會根據瀏覽器對該字體的支援與否，由左至右依序判斷，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: 字體A, 字體B, 字體C;</span><br></pre></td></tr></table></figure>

<p>假設使用者的電腦系統中僅存在 “字體B”，此時瀏覽器載入網頁時，會根據上述設定先判斷系統內是否有對應的字體A，但因為系統中找不到這個字體，因此會跳過該字體並判斷下一個字體B，此時找到字體B之後，就會套用該字體，並且不再往下進行判斷。</p>
<h3 id="語法注意事項"><a href="#語法注意事項" class="headerlink" title="語法注意事項"></a>語法注意事項</h3><p>在部分字體的選用上，同一個字體可以選擇使用中文名稱或英文名稱的屬性值設定，其結果會相同，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Microsoft JhengHei&quot;</span>;</span><br><span class="line"><span class="attribute">font-family</span>: 微軟正黑體;</span><br></pre></td></tr></table></figure>

<p>從上述語法中可以發現，第一行的字體加上了雙引號，這是因為該字體的名稱之間如果存在空白，在不加上雙引號的情形下，瀏覽器會無法辨識而導致讀取失敗。</p>
<p>另一個值得注意的是，雖然使用中文名稱來設定字體結果與英文名稱相同，但是只單獨設定中文名稱的話，可能會遇到編碼的問題而導致結果不如預期，因此會建議使用英文名稱的屬性值，或是中、英文一起使用，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Microsoft JhengHei&quot;</span>, 微軟正黑體;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Font-Family-字體類型"><a href="#Font-Family-字體類型" class="headerlink" title="Font-Family 字體類型"></a>Font-Family 字體類型</h2><p>在當今這麼大量的字體中，主要可以分為 “指定字體” 與 “通用字體” 兩種類型。</p>
<h3 id="指定字體（family-name）"><a href="#指定字體（family-name）" class="headerlink" title="指定字體（family-name）"></a>指定字體（family-name）</h3><p>不同的字體也會影響網頁的視覺感受，因此在選用字體時，通常會優先使用指定的字體。</p>
<h3 id="通用字體（generic-family）"><a href="#通用字體（generic-family）" class="headerlink" title="通用字體（generic-family）"></a>通用字體（generic-family）</h3><p>通用字體可以理解成多數的電腦系統中，內建就已存在的字體，常見的通用字體有以下五種，其中無襯線體、襯線體使用最為廣泛：</p>
<ul>
<li>sans-serif（無襯線體 / 黑體）</li>
<li>serif（襯線體 / 明體）</li>
<li>cursive（手寫體）</li>
<li>monospace（等寬體）</li>
<li>fantasy（幻想體）</li>
</ul>
<h3 id="設定方式"><a href="#設定方式" class="headerlink" title="設定方式"></a>設定方式</h3><p>雖然可以透過指定字體名稱的方式，來達到自訂網頁上想要呈現的字體，但是並非所有電腦系統都有對應的指定字體，因此在使用指定字體時，通常都會在 font-family 屬性值的<strong>最後方位置</strong>設定預設的通用字體；而前面有提到 font-family 是由左至右判斷屬性值，所以當瀏覽器不支援或無法從系統中找到前方所對應的指定字體時，就會套用最後設定的通用字體，設定格式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: 指定字體, <span class="string">&quot;指定 字體&quot;</span>, 通用字體;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="字體順序觀念"><a href="#字體順序觀念" class="headerlink" title="字體順序觀念"></a>字體順序觀念</h2><p>本篇一開始在設定規則的地方有簡單提到字體是由左邊開始判斷，但是在順序方面還有一些重要觀念需要熟記，這邊先記住以下設定順序，後續會說明原因：</p>
<p>設定順序：<strong>英文字體 &gt; Linux &gt; Mac &gt; Windows &gt; 通用字體</strong></p>
<!-- 這部分一直沒有比較好的解釋 -->



<h3 id="中、英文順序"><a href="#中、英文順序" class="headerlink" title="中、英文順序"></a>中、英文順序</h3><p>一個網頁通常會存在多個語言（以中、英文為例），但是並非所有的字體都同時支援中、英文，因此許多網頁會利用這個由左至右判斷的技巧，分別針對中文與英文各別設定不同的字體，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: Arial, 微軟正黑體;</span><br></pre></td></tr></table></figure>

<p>上述設定中，Arial 只有英文字體，而微軟正黑體則是中、英文字體都有，因此瀏覽器在判斷 Arial 之後，就會因為符合條件而套用英文字體，而中文會因為找不到對應字體則往下判斷微軟正黑體並套用，此時網頁上的中文與英文就會呈現不同字體的效果。</p>
<p>但是如果順序換成微軟正黑體在前面，瀏覽器就會先判斷微軟正黑體，因為該字體中、英文都可以使用，所以網頁上的兩種語言都會套用成微軟正黑體，而後面的 Arial 會因為英文字體已套用成微軟正黑體而不會被讀取。</p>
<p>因此，正確的屬性值順序為<strong>英文字體在前面，中文字體在後面。</strong></p>
<h3 id="字體使用率與順序"><a href="#字體使用率與順序" class="headerlink" title="字體使用率與順序"></a>字體使用率與順序</h3><p>每個作業系統都有自己的系統字體，例如 -apple-system 與 BlinkMacSystemFont 分別是 iOS 以及 macOS 的系統字體，並且前者只能使用在 Safari 瀏覽器上，後者則是用於 Chrome，像這種只能使用在特定系統或瀏覽器的字體，順序就需要放在前面，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, Roboto, <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span><br><span class="line">	     <span class="comment">/* mac系統字體, iOS系統字體,	windows英文系統字體, 微軟正黑體, Android系統字體, iOS系統字體, 通用字體, 通用字體 */</span></span><br></pre></td></tr></table></figure>

<p>假設使用者電腦系統為 windows，瀏覽器因為在系統中找不到 -apple-system 與 BlinkMacSystemFont 而直接跳過這兩個字體，而下一個 Segoe UI 屬於 windows 的英文系統字體，因此英文字體就會套用 Segoe UI，中文字體則是因為 Segoe UI 並沒有對應的中文而判斷下一個值，最終套用 Microsoft JhengHei。</p>
<p>如果電腦系統是 macOS 並且使用 Chrome 瀏覽網頁，當瀏覽器在讀取到 -apple-system 時，就會套用對應的中文及英文字體，並且不再往下判斷。</p>
<p>因此，為了適應各種不同的瀏覽器與作業系統，在設定字體時需要把<strong>較少使用到的字體放前面，較常使用到的字體放後面。</strong></p>
<hr>
<h2 id="實務範例"><a href="#實務範例" class="headerlink" title="實務範例"></a>實務範例</h2><p>附上幾個知名企業的字體設定當作參考，有興趣的也可以自行研究順序邏輯。</p>
<p>Apple（台灣）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;SF Pro TC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang TC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br></pre></td></tr></table></figure>

<p>微軟台灣：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;Segoe UI&#x27;</span>, SegoeUI, <span class="string">&#x27;Microsoft JhengHei&#x27;</span>, 微軟正黑體, <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, sans-serif;</span><br></pre></td></tr></table></figure>

<p>Google：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: arial, sans-serif;  <span class="comment">/* 不愧是 Google，連字體設定都這麼簡約 */</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.oxxostudio.tw/articles/201811/css-font-family.html">CSS font-family 詳細介紹</a></li>
<li><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/180456/#outline__1_2_1">最標準的系統字型規範 font-family</a></li>
<li><a href="https://www.casper.tw/css/2014/01/01/font-family/">font-family要怎麼玩</a></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>font-family</tag>
      </tags>
  </entry>
  <entry>
    <title>RWD 雜談</title>
    <url>/2022-03-14-rwd-note/</url>
    <content><![CDATA[<p>記錄一些 RWD 的小知識，以及設計過程中可以注意的小細節。</p>
<span id="more"></span>

<hr>
<h2 id="RWD-在做什麼？"><a href="#RWD-在做什麼？" class="headerlink" title="RWD 在做什麼？"></a>RWD 在做什麼？</h2><p>響應式網頁設計（Responsive Web Design），是為了因應現今網頁瀏覽裝置的多樣性，而衍生出來的一網頁設計模式；能夠讓一個網頁在多種裝置寬度下，呈現出不同的內容排版。</p>
<hr>
<h2 id="初始設置"><a href="#初始設置" class="headerlink" title="初始設置"></a>初始設置</h2><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><p>要使網頁符合 RWD 條件，就必須在 head 標籤內層加入以下設定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述語法中的 viewport 代表視埠，可以理解成可視區域，在後方可以看到 width=device-width 與 initial-scale=1.0 兩個參數，前者表示強制讓網頁的解析度等於瀏覽裝置的寬度，後者則是設定網頁的縮放比例為 1 倍。</p>
<p>viewport 可設定參數分別有以下幾種：</p>
<ul>
<li>width（設定寬度）</li>
<li>height（設定高度）</li>
<li>initial-scale（設定初始縮放比例）</li>
<li>minimum-scale（設定最小縮放比例）</li>
<li>maximum-scale（設定最大縮放比例）</li>
<li>user-scalable（是否允許畫面縮放）</li>
</ul>
<h3 id="檢視前後差異"><a href="#檢視前後差異" class="headerlink" title="檢視前後差異"></a>檢視前後差異</h3><p>以 Chrome 瀏覽器為例，網頁在加上 viewport 的語法後，可以透過開發人員工具的 toggle device toolbar 功能來檢視是否載入成功，而先前的語法中分別設定了 width 以及 initial-scale，因此將瀏覽裝置變更為手機後，網頁中的文字會保持原本大小，並且內容會被侷限在裝置的寬度範圍裡，<strong>不會產生 x 軸</strong>。</p>
<blockquote>
<p>補充說明：上述提到的 x 軸，是指瀏覽器底部的水平移動軸（scroll bar）。</p>
</blockquote>
<hr>
<h2 id="Media-Queries"><a href="#Media-Queries" class="headerlink" title="Media Queries"></a>Media Queries</h2><p>media 是在設計響應式網頁時，必然會使用到的語法，而 Media Queries（媒體查詢）的作用是偵測使用者目前裝置的屬性（如裝置寬度），並針對這些屬性定義樣式。 </p>
<h3 id="媒體類型"><a href="#媒體類型" class="headerlink" title="媒體類型"></a>媒體類型</h3><p>根據 <a href="https://www.w3schools.com/css/css3_mediaqueries.asp">W3C</a> 文件中所列出的媒體類型，目前主要有以下幾種：</p>
<ul>
<li>all（所有裝置）</li>
<li>print（印刷裝置）</li>
<li>screen（螢幕裝置）</li>
<li>speech（朗讀裝置）</li>
</ul>
<blockquote>
<p>備註：後續內容會著重在網頁上會使用的相關設定。</p>
</blockquote>
<h3 id="設定方式（CSS）"><a href="#設定方式（CSS）" class="headerlink" title="設定方式（CSS）"></a>設定方式（CSS）</h3><p>以下原始碼只有指定 media 類型，因此只要裝置類型為螢幕（screen）時，就會載入樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">    <span class="comment">/* CSS Style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下原始碼除了指定 media 類型之外，還使用了 Queries 的判斷條件 and，此時需要符合裝置為螢幕，以及畫面的最大寬度為 768 像素，才會載入樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="comment">/* CSS Style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判斷條件也可以設定多個，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> ( <span class="attribute">min-width</span>: <span class="number">375px</span> ) <span class="keyword">and</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="comment">/* CSS Style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>除了上述的 and，還可以使用 or、not、only 來設定判斷條件，在此不討論。</p>
</blockquote>
<p>如果不指定 media 類型，判斷的裝置類型就會是 all（所有裝置），此時 and 也可以省略，設定方式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="comment">/* CSS Style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="寬度設定類型"><a href="#寬度設定類型" class="headerlink" title="寬度設定類型"></a>寬度設定類型</h2><p>因為響應式網頁的運作方式是根據裝置的寬度，而相關的設定可使用以下兩種：</p>
<h3 id="max-width"><a href="#max-width" class="headerlink" title="max-width"></a>max-width</h3><p>表示最大寬度在設定的數值（含）以下時，範例原始碼如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點一 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點二 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">375px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假設目前瀏覽器寬度為 1024 像素，此時 h1 的字體顏色為紅色，接著嘗試使用 iPad Mini（768*1024）進行瀏覽，此時就會滿足斷點一的條件並載入樣式，使 h1 的顏色變更為綠色。</p>
<blockquote>
<p>因為 CSS 權重觀念，Media Queries 的樣式載入後，前者相同屬性的樣式就會被後者載入的樣式覆蓋。</p>
</blockquote>
<p>同理，如果將瀏覽裝置切換成 iPhone SE（375*667），就會滿足斷點二的條件，並將 h1 的字體大小設定為 24 像素。</p>
<h3 id="min-width"><a href="#min-width" class="headerlink" title="min-width"></a>min-width</h3><p>表示最小寬度在設定的數值（含）以上時，範例原始碼如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點一 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">min-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點二 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">min-width</span>: <span class="number">992px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>min-width 是依據最小寬度來載入樣式，以此例子來說，在未滿足任何斷點時，文字大小都會是 24 像素，即使斷點一、二的撰寫位置在下方，也會因為沒有滿足媒體查詢條件而使樣式不被套用。</p>
<h3 id="差異與影響"><a href="#差異與影響" class="headerlink" title="差異與影響"></a>差異與影響</h3><p>因為 CSS 的載入邏輯是先判斷權重，再判斷先後順序，因此若是使用 max-width 來設計響應式網頁，在行動裝置上 Media Queries 就會因為符合所有斷點條件使樣式從電腦版一路覆蓋到行動版；但如果是使用 min-width，在行動裝置上就不會有樣式覆蓋的問題，不過使用上並不會有影響，依照習慣擇一使用即可。</p>
<hr>
<h2 id="讓網頁自適應寬度"><a href="#讓網頁自適應寬度" class="headerlink" title="讓網頁自適應寬度"></a>讓網頁自適應寬度</h2><p>一般網頁在沒有設計響應式的情況下，最外層容器都會設定一個固定寬度，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">clss</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在響應式網頁中，如果使用 width 來設定容器寬度，會造成網頁在縮放時，因為寬度固定而無法使內容自適應寬度，導致產生 x 軸，以上方範例來說，手動調整瀏覽器寬度到 1000 像素以下時，網頁的寬度還是 1000 像素，因此部分內容會被隱藏到可視範圍外，需要拖曳瀏覽器底部的 x 軸，才能看到被隱藏的內容。</p>
<p>所以如果要讓上方原始碼具有響應式網頁的功能，就必須將最外層容器原本設定的屬性 width 更改為 max-width（最大寬度），設定方式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此一來，任意調整瀏覽器寬度時，最外層容器的寬度就會是瀏覽器當下的寬度，並且最大不會超過容器本身的寬度。</p>
<hr>
<h2 id="CSS-Reset"><a href="#CSS-Reset" class="headerlink" title="CSS Reset"></a>CSS Reset</h2><p>大部分的網頁在開始設定樣式之前，都會先載入習慣的 CSS Reset 設定，而在響應式網頁中，會建議另外加上幾個 Reset 設定。</p>
<h3 id="設定圖片"><a href="#設定圖片" class="headerlink" title="設定圖片"></a>設定圖片</h3><p>設定方式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假設網頁中的任意一張圖片原始大小為 900 像素，此時如果將瀏覽器寬度調整至小於 900 像素時，圖片預設還是會保持原本的大小，造成網頁產生 x 軸，但如果使用上述設定，圖片就會根據父層元素的寬度，以原始比例自動調整大小，並且最大不會超過圖片原始大小。</p>
<blockquote>
<p>屬性 max-width 若改為 width，可能會因為圖片解析度較小而失真。</p>
</blockquote>
<h3 id="設定容器寬度"><a href="#設定容器寬度" class="headerlink" title="設定容器寬度"></a>設定容器寬度</h3><p>一般情況下，網頁容器設定 Padding、Margin 或 Border 後，容器本身實際寬度都會改變，以下方原始碼為例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述 box 區塊在載入樣式後，寬度不是 width 所設定的 100 像素，而是 100 + 10 * 2 + 5 * 2，因此實際寬度會變成 130 像素，這樣在網頁排版時，會因為需要計算容器寬度而變得相當麻煩。</p>
<p>為了避免發生這方面的問題，可以在排版之前先加入以下設定：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,*<span class="selector-pseudo">::before</span>,*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入這段設定後，元素的寬度與高度就不會包含 Padding、Border 所產生的距離，可以理解成實際寬度等於設定的寬度（width、max-width）。</p>
<blockquote>
<p>margin 不在 border-box 範疇之內。</p>
</blockquote>
<hr>
<h2 id="使用百分比控制寬度"><a href="#使用百分比控制寬度" class="headerlink" title="使用百分比控制寬度"></a>使用百分比控制寬度</h2><p>在響應式網頁中，也常會使用百分比（%）單位來設計網頁元素的排版，而使用百分比的元素會根據父層元素的寬度，自適應調整自身的寬度與高度。</p>
<p>以下方原始碼為例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>圖片一<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>圖片二<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>圖片三<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS / 假設已載入 meyerweb reset */</span></span><br><span class="line">*,*<span class="selector-pseudo">::before</span>,*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.33%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點一 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例在 ul 使用了 flex 屬性值，讓內層的元素 li 並排，而 li 因為設定了寬度 33.33%，因此當瀏覽器寬度在 1000 像素或以上時，li 會以三個並排的方式呈現；當瀏覽器寬度在 768 像素或以下時，斷點一的條件就會滿足，使該斷點的樣式設定覆蓋原先的設定，因為 ul 有設定 wrap 屬性值，因此 li 會以兩個並排的方式呈現。</p>
<hr>
<h2 id="斷點規劃"><a href="#斷點規劃" class="headerlink" title="斷點規劃"></a>斷點規劃</h2><p>雖然在設計響應式網頁時，可以新增斷點讓網頁在不同瀏覽裝置上呈現不同排版，但是礙於現今裝置的多樣性，並沒有辦法透過幾個斷點就兼容所有瀏覽裝置，因此只能針對當下較熱門的解析度來設定斷點內容。</p>
<blockquote>
<p>可以使用 <a href="https://gs.statcounter.com/browser-market-share/all/taiwan/#monthly-202101-202201">statcounter</a> 工具來查詢目前熱門的螢幕解析度，並規劃網頁的斷點。</p>
</blockquote>
<hr>
<h2 id="表格設計"><a href="#表格設計" class="headerlink" title="表格設計"></a>表格設計</h2><p>電腦版網頁中的表格在轉換至行動版時，為了避免瀏覽器寬度不足而擠壓到內容，可透過 display 設定屬性來將較不重要的欄位隱藏，以下為範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;d-none&quot;</span>&gt;</span>訂單編號<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品項<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>產品價格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;d-none&quot;</span>&gt;</span>001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>皮卡丘<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>雷之石<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">375px</span> ) &#123;</span><br><span class="line">    <span class="selector-class">.d-none</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述為簡易的後台訂單表格，因為在 CSS 第 12 行設定了 Media Queries 的斷點設定，因此該表格在瀏覽器寬度 375 像素以下時，被加上 d-none 類別的 th 標籤與 td 標籤就會被隱藏。</p>
<p>但如果遇到在行動裝置上，表格的所有欄位都要顯示時，也可以透過以下方式來保留所有內容並防止內容擠壓，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>訂單編號<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品項<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>產品價格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>皮卡丘<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>雷之石<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">375px</span> ) &#123;</span><br><span class="line">    <span class="selector-class">.wrap</span> &#123;</span><br><span class="line">        <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">table</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">375px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例與先前內容相同，但是在 Media Queries 的設定裡，針對表格的外容器 wrap 設定了 overflow-x 的屬性與對應值 auto，這種設定方式能夠使內容因擠壓而超出元素寬度時，使該容器本身產生 x 軸，而在 CSS 第16 行的部分因為將表格設定了固定寬度，因此就算瀏覽器寬度小於表格寬度也不會被擠壓，而是隱藏在外容器產生的 x 軸外。</p>
<hr>
<h2 id="網頁優化"><a href="#網頁優化" class="headerlink" title="網頁優化"></a>網頁優化</h2><p>這一部分的內容與 RWD 較不相關，但也建議學會的小技巧！</p>
<h3 id="使用圖片取代文字"><a href="#使用圖片取代文字" class="headerlink" title="使用圖片取代文字"></a>使用圖片取代文字</h3><p>LOGO 是用來識別一個網站的重要圖片元素，而 h1 標籤通常是網頁中最重要的內容之一，可以透過以下技巧，將 LOGO 以 h1 標籤的方式撰寫，並將 h1 標籤中的文字隱藏不顯示，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>最重要網頁標題<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;images/logo.svg&#x27;</span>); <span class="comment">/* 推薦使用 svg 圖片格式 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 視圖片本身寬度而定 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>; <span class="comment">/* 視圖片本身高度而定 */</span></span><br><span class="line">    <span class="attribute">background-size</span>: contain; <span class="comment">/* 使圖片自適應在寬度與高度（200*100）之中 */</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">101%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例中，CSS 第 3~7 行的部分較容易理解，主要是設定背景圖片，而第 8 行開始，text-indent 的屬性值設定 101% 可使文字縮排至本身寬度以外，white-space 的屬性值 nowrap 則是能讓內容超過最大寬度時不會自動斷行，最後再透過 overflow 使寬度以外的部分隱藏不顯示。</p>
<p>圖片取代文字的用意，在於 LOGO 在網頁上呈現的結果雖然是一張圖片，但是搜索引擎的爬蟲機器人還是能夠抓取到被隱藏的文字內容，會比較有利於 SEO。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.w3schools.com/css/css_rwd_viewport.asp">RWD - The Viewport</a></li>
<li><a href="https://www.oxxostudio.tw/articles/201810/css-media-queries.html">CSS Media Queries 詳細介紹</a></li>
</ul>
]]></content>
      <categories>
        <category>RWD</category>
      </categories>
      <tags>
        <tag>學習筆記</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>Swiper 輪播效果</title>
    <url>/2022-06-06-swiper-note/</url>
    <content><![CDATA[<p>這篇內容記錄 Swiper 套件的一些相關常見配置。</p>
<span id="more"></span>

<hr>
<h2 id="Swiper-套件"><a href="#Swiper-套件" class="headerlink" title="Swiper 套件"></a>Swiper 套件</h2><p><a href="https://swiperjs.com/get-started">Swiper</a> 是一個製作網頁輪播效果的 JavaScript 插件。</p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>透過 CDN 方式安裝 Swiper 時，需要同時引入 <code>swiper-bundle.min.css</code> 與 <code>swiper-bundle.min.js</code> 兩個檔案，引入壓縮後的版本即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- In head --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/swiper@8/swiper-bundle.min.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- In front of body end tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/swiper@8/swiper-bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install swiper</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="基礎結構"><a href="#基礎結構" class="headerlink" title="基礎結構"></a>基礎結構</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>使用 Swiper 時，<code>swiper-container</code>、<code>swiper-wrapper</code>、<code>swiper-slide</code> 三者為必要存在的元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Slider main container --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Additional required wrapper --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Slides --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...  <span class="comment">&lt;!-- 新增 swiper-slide 數量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- If we need pagination --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- If we need navigation buttons --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- If we need scrollbar --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-scrollbar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要進行輪播的內容，會放在 <code>swiper-slide</code> 之中，數量可依需求自行新增。</p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>Swiper 在初始化時，會帶入一個 DOM / CSS Selector，以及一個參數（字串），如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> swiper = <span class="keyword">new</span> Swiper( swiperContainer, parameter );</span><br></pre></td></tr></table></figure>

<p>官方範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swiper = <span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// Optional parameters / 加入參數與設定值</span></span><br><span class="line">  <span class="attr">direction</span>: <span class="string">&quot;vertical&quot;</span>, <span class="comment">// 輪播方向</span></span><br><span class="line">  <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 重複顯示</span></span><br><span class="line">  <span class="comment">// If we need pagination / 是否顯示分頁</span></span><br><span class="line">  <span class="attr">pagination</span>: &#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;.swiper-pagination&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Navigation arrows / 是否加入上、下一頁方向圖示</span></span><br><span class="line">  <span class="attr">navigation</span>: &#123;</span><br><span class="line">    <span class="attr">nextEl</span>: <span class="string">&quot;.swiper-button-next&quot;</span>,</span><br><span class="line">    <span class="attr">prevEl</span>: <span class="string">&quot;.swiper-button-prev&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// And if we need scrollbar / 是否顯示滾動軸</span></span><br><span class="line">  <span class="attr">scrollbar</span>: &#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;.swiper-scrollbar&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="設定容器寬度"><a href="#設定容器寬度" class="headerlink" title="設定容器寬度"></a>設定容器寬度</h3><p>可自訂意義 Swiper 容器大小，範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.swiper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="常見參數"><a href="#常見參數" class="headerlink" title="常見參數"></a>常見參數</h2><p>除了先前官方範例提到的參數之外，以下列出一些在不同的版型下，可能會使用到的參數設定，更多可使用的參數可查閱<a href="https://swiperjs.com/swiper-api">官方文件</a>。</p>
<p><strong><code>effect</code></strong></p>
<p>主要用來變更輪播時的轉場效果，預設值為 <code>slide</code>，其他可使用效果還有 <code>fade</code>、<code>cube</code>、<code>coverflow</code>、<code>flip</code>、<code>creative</code>、<code>cards</code>。</p>
<p><strong><code>autoplay</code></strong></p>
<p>該參數屬於一個物件，會依據給予的屬性設定來自定義自動輪播的形式，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swiper = <span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">autoplay</span>: &#123;</span><br><span class="line">    <span class="attr">delay</span>: <span class="number">5000</span>, <span class="comment">// 自動輪播延遲時間</span></span><br><span class="line">    <span class="attr">disableOnInteraction</span>: <span class="literal">false</span>, <span class="comment">// 手動滑動後，停止自動撥放，預設值為 true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong><code>slidesPerView</code></strong></p>
<p>該參數可以決定輪播時，同時顯示的 <code>swiper-slide</code> 數量，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swiper = <span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">slidesPerView</span>: <span class="number">3</span> <span class="comment">// 同時顯示 3 個 swiper-slide</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>加入參數 <code>slidesPerView</code> 後，<code>swiper-slide</code> 的寬度會根據 swiper-container 來均分。</p>
</blockquote>
<p><strong><code>breakpoints</code></strong></p>
<p>加入該參數後，配合參數 <code>slidesPerView</code> 可根據所設定的斷點來達成響應式的效果，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swiper = <span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 預設的顯示數量為 1</span></span><br><span class="line">  <span class="attr">slidesPerView</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// 以下為斷點設定</span></span><br><span class="line">  <span class="attr">breakpoints</span>: &#123;</span><br><span class="line">    <span class="comment">// 當頁面寬度大於 768px 時，同時顯示數量為 2</span></span><br><span class="line">    <span class="number">768</span>: &#123;</span><br><span class="line">      <span class="attr">slidesPerView</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 當頁面寬度大於 992px 時，同時顯示數量為 3</span></span><br><span class="line">    <span class="number">992</span>: &#123;</span><br><span class="line">      <span class="attr">slidesPerView</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong><code>spacebetween</code></strong></p>
<p>該參數可以設定每個 <code>swiper-slide</code> 之間的間隙，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swiper = <span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">slidesPerView</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">spacebetween</span>: <span class="number">16</span>, <span class="comment">// 預設間隔為 20px</span></span><br><span class="line">  <span class="attr">breakpoints</span>: &#123;</span><br><span class="line">    <span class="number">768</span>: &#123;</span><br><span class="line">      <span class="attr">slidesPerView</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">spacebetween</span>: <span class="number">24</span> <span class="comment">// 當頁面寬度大於 768px 時，間隔為 24px</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Swiper</tag>
        <tag>套件</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass 實用語法</title>
    <url>/2022-06-07-sass-note-md/</url>
    <content><![CDATA[<p>簡單整理一下自己常用且覺得方便的一些 Sass 相關語法。</p>
<span id="more"></span>

<hr>
<h2 id="入門技巧"><a href="#入門技巧" class="headerlink" title="入門技巧"></a>入門技巧</h2><h3 id="使用-amp-表示父選擇器"><a href="#使用-amp-表示父選擇器" class="headerlink" title="使用 &amp; 表示父選擇器"></a>使用 &amp; 表示父選擇器</h3><p>以下是一個簡單的 Scss 格式設定：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="selector-class">.header-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ddd</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述例子可以改用 &amp; 的方式來撰寫，以 &amp; 符號來表示父曾，其運行結果想同，如下所示：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  &amp;-title &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#ddd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Variable-變數"><a href="#Variable-變數" class="headerlink" title="Variable 變數"></a>Variable 變數</h3><p>一個設定可能會在許多不同的區塊重複被使用，此時就能夠透過變數來統一管理，好處是後續若需要修改值，只需要修改變數值即可，而變數格式為 <code>$name: value</code>，以顏色為範例，如下所示：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color-primary</span>: <span class="number">#00cc99</span>;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  &amp;-title &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color-primary</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  &amp;-title &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color-primary</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>變數值可使用的格式分別有以下幾種：</p>
<ul>
<li>數字：2、16px、2rem</li>
<li>字串：”文字”、”./img/logo.png”</li>
<li>顏色：blue、#00CC99、rgba(0,0,0,0.5)</li>
<li>布林：true、false</li>
<li>空值：null</li>
<li>值列：16px 8px、”arial, sans-serif”</li>
<li>運算：1rem * 1.25</li>
</ul>
<h3 id="調整色彩明度"><a href="#調整色彩明度" class="headerlink" title="調整色彩明度"></a>調整色彩明度</h3><p>除了直接輸入顏色或色碼，也能夠使用 <code>darken</code>、<code>lighten</code> 來調整所設定顏色的明暗程度，範例如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color-primary</span>: <span class="number">#00cc99</span>;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: darken(<span class="variable">$color-primary</span>, <span class="number">25%</span>); <span class="comment">// 亮度減少 25%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lighten(<span class="number">#ddd</span>, <span class="number">15%</span>); <span class="comment">// 亮度增加 15%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="import-匯入檔案"><a href="#import-匯入檔案" class="headerlink" title="@import 匯入檔案"></a>@import 匯入檔案</h3><p>較大的專案為了方便管理程式碼，通常會將 scss 檔案進行較細的拆分，而這些拆分出來的檔案可透過 <code>@import</code> 來統一匯入（合併）一個 scss 檔案中，範例如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目前檔案為 all.scss</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;variable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;reset&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;base&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;mixin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;main&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>檔案的分類可參考 <a href="https://gist.github.com/rveitch/84cea9650092119527bc">Sass 7-1 Pattern</a>，或是此篇<a href="https://medium.com/ivycodefive/4-%E4%BB%80%E9%BA%BC%E6%98%AFsass-7-1%E6%9E%B6%E6%A7%8B-8687e9a10a64">文章</a>。</p>
</blockquote>
<p>補充說明：被合併的 scss 檔案，檔案名稱會使用 _ 做開頭，除了用來表示合併用，也不會被編譯成 css 檔案，但是在匯入時不需要加上下底線，如下所示：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正確匯入方式</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;variable&#x27;</span>;</span><br><span class="line"><span class="comment">// 錯誤匯入方式</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_variable&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="mixin-混合多個設定"><a href="#mixin-混合多個設定" class="headerlink" title="@mixin 混合多個設定"></a>@mixin 混合多個設定</h3><p>Mixin 的原理與變數相同，主要是將一些較常使用的語法組合封裝並且定義成一個名稱，等需要使用時，再透過 <code>@include</code> 來導入內容，範例如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _mixin.scss</span></span><br><span class="line"><span class="keyword">@mixin</span> textHide &#123; <span class="comment">// 圖片取代文字</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">101%</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> desktop &#123; <span class="comment">// 響應式斷點</span></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="keyword">@content</span>; <span class="comment">// 表示導入後所撰寫的內容位置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _main.scss</span></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;images/logo.svg&quot;</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line">  <span class="keyword">@include</span> textHide;</span><br><span class="line">  <span class="keyword">@include</span> desktop &#123;</span><br><span class="line">    <span class="comment">// 此區塊的內容會對應 @content 位置</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="進階技巧"><a href="#進階技巧" class="headerlink" title="進階技巧"></a>進階技巧</h2><h3 id="for-運作原理"><a href="#for-運作原理" class="headerlink" title="@for 運作原理"></a>@for 運作原理</h3><p>Sass 的 <code>@for</code> 運作方式類似 JavaScript 的 for 迴圈，能夠依序並重複套用相同的設定，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box-5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scss</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">5</span> &#123; <span class="comment">// through 若改使用 to，則不包含最終值</span></span><br><span class="line">    <span class="selector-class">.box-</span>#&#123; <span class="variable">$i</span> &#125;&#123; <span class="comment">// 變數需要加上 # 並使用 &#123;&#125; 包覆，否則無法正常讀取</span></span><br><span class="line">    <span class="attribute">background</span>: darken( <span class="number">#eee</span>, <span class="variable">$i</span> * <span class="number">5%</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例 scss 設定中，第 6 行使用了 <code>@for</code> 方法來設定不同的背景顏色，<code>$i</code> 表示帶入數字的變數，<code>from</code> 會接一個起始值，<code>through</code> 則是會接一個最終值。</p>
<p>而第 7 行的 <code>$i</code> 會先帶入初始值 1，此時就會針對 <code>.box-1</code> 設定下方的樣式 <code>background: darken( #eee, 1 * 5% )</code>，接著 <code>$i</code> 會再帶入 2，並進行與前一次相同的設定，直到最終值進行結束為止。</p>
<h3 id="Sass-Map-是甚麼"><a href="#Sass-Map-是甚麼" class="headerlink" title="Sass Map 是甚麼?"></a>Sass Map 是甚麼?</h3><p>Sass Map 是一種集合變數，概念有點類似 JSON，但是不同的地方在於 Sass Map 會將定義的變數透過<strong>小括弧</strong> <code>()</code> 包裝成一個群組，格式為 <code>$變數名稱: (key: value);</code>，範例如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  // key: value</span><br><span class="line">  <span class="string">&#x27;primary&#x27;</span>: <span class="number">#007bff</span>, // 每個設定之間需要使用半形逗號隔開</span><br><span class="line">  <span class="string">&#x27;secondary&#x27;</span>: <span class="number">#6c757d</span>,</span><br><span class="line">  <span class="string">&#x27;success&#x27;</span>: <span class="number">#28a745</span></span><br><span class="line">); <span class="comment">// 必須加上 ; 做結尾以免影響後方程式碼運作</span></span><br></pre></td></tr></table></figure>

<p>設定 Sass Map 之後，可以透過 <code>map-get</code> 來取用變數的內容，以上述例子來說，若想取用 <code>$primary</code> 來當作文字的顏色，做法如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: map-get(<span class="variable">$colors</span>, <span class="string">&#x27;primary&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: map-get(<span class="variable">$colors</span>, <span class="string">&#x27;secondary&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上述範例來說，雖然可以透過 <code>map-get</code> 來取得對應的變數內容，但是若針對個別項目逐一取用設定，效率會相對較低，因此通常會搭配 <code>@each</code> 來做使用。</p>
<h3 id="each-運作原理"><a href="#each-運作原理" class="headerlink" title="@each 運作原理"></a>@each 運作原理</h3><p>Sass 的 <code>@each</code> 類似 JavaScript 的 each，搭配先前提到的 Sass Map 就可以產出大量的樣式設定，而 <code>@each</code> 的格式為 <code>@each $key, $value in 集合變數&#123;...&#125;</code> ，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Button1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>Button2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>Button3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scss</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$colors</span>: (</span><br><span class="line">  <span class="string">&#x27;primary&#x27;</span>: <span class="number">#007bff</span>,</span><br><span class="line">  <span class="string">&#x27;secondary&#x27;</span>: <span class="number">#6c757d</span>,</span><br><span class="line">  <span class="string">&#x27;success&#x27;</span>: <span class="number">#28a745</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$key</span>, <span class="variable">$value</span> in <span class="variable">$colors</span> &#123;</span><br><span class="line">  <span class="selector-class">.btn-</span>#&#123;<span class="variable">$key</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上述範例 scss 設定中，第 10 行使用了 <code>@each</code> 並指定了集合變數 <code>$colors</code>，此時變數 <code>$colors</code> 中的每個 key 與 value 就會帶入 <code>@each</code> 大括弧裡的對應位置，最後再套用設定到對應的類別之中。</p>
<h3 id="extend-合併相同樣式"><a href="#extend-合併相同樣式" class="headerlink" title="@extend 合併相同樣式"></a>@extend 合併相同樣式</h3><p>在進入 <code>@extend</code> 之前，先簡單說明<strong>佔位符選擇器</strong>（Placeholder Selectors）是什麼，它與 class、id 兩種選擇器類似，差別在於佔位符選擇器在 Sass 中會使用 <code>%</code> 來定義，且必須透過 <code>@extend</code> 來調用，在被 <code>@extend</code> 調用之前，本身並不會被編譯到 .css 檔案中。</p>
<p>進入正題，如果相同的樣式設定被重複使用在多個類別中，可以透過 <code>%</code> 搭配 <code>@extend</code> 的做法，使 Sass 檔案在編譯後，有相同設定的類別就會被合併在一起，以減少多餘的程式碼產生，簡單概念如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .scss 未使用 @extend</span></span><br><span class="line"><span class="selector-class">.header-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#007bff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#6c757d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#28a745</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .scss 使用 @extend</span></span><br><span class="line">%btn-base &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-btn</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %btn-base;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#007bff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section-btn</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %btn-base;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#6c757d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer-btn</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %btn-base;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#28a745</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  編譯後的 .css  */</span></span><br><span class="line"><span class="selector-class">.footer-btn</span>, <span class="selector-class">.section-btn</span>, <span class="selector-class">.header-btn</span> &#123; <span class="comment">/* 相同設定合併在一起 */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#007bff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#6c757d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#28a745</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能會有人說，直接將共通的設定寫在一個 <code>.btn</code> 裡面不是比較方便且簡潔嗎？確實是這樣，而上述使用 <code>%btn-base</code> 來當作案例，主要是為了方便理解 <code>@extend</code> 的運作原理，實際上較不會透過以上做法來設定按鈕的共通樣式，至於什麼時候會用到 <code>@extend</code> 來合併設定呢？等你覺得也許可以用的時候，不妨再自己嘗試看看吧。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://medium.com/ivycodefive/4-%E4%BB%80%E9%BA%BC%E6%98%AFsass-7-1%E6%9E%B6%E6%A7%8B-8687e9a10a64">什麼是Sass 7-1架構?</a></li>
<li><a href="https://www.casper.tw/css/2016/12/25/sass-map/">鐵人賽 25 - 實戰心法 - Sass Map 快出產出大量樣式</a></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title>網頁切版直播班心得</title>
    <url>/2022-09-10-hexschool-web/</url>
    <content><![CDATA[<p>2022 夏，切版直播班心得。</p>
<span id="more"></span>

<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>八週結束了，你學到了甚麼？</p>
<p>我自己也不是很清楚，課堂上很多知識也還是似懂非懂，即使完成 100% 也感覺不到自己有所成長，這是去年直播班結束之後當下的心得，會有這樣的想法不是因為六角的學習環境不好，而是我自己在心態與學習方法上出現了問題。</p>
<p>先來說說目前為止在六角學習下來的感受，六角學院與其他仿間的機構在教學模式上有著很大的不同，除了每週的直播與作業之外，每天還會釋出配合當週教學內容的每日任務；在解惑方面，無論是作業遇到卡關或是觀念上不清楚，都能夠透過每日助教或是直接請教同學來尋求解答，除此之外，還能藉由小組討論的方式分享解決問題的方法，學習資源應有盡有。</p>
<p>但這樣真的足夠了？就在去年直播班結業後果斷否定了這個問題。本來以為只要每週直播不缺席，並且盡可能完成每個作業就可以達到最低限度的就業水準了，但事實證明這種想法太過不切實際了，即便乖乖的完成課程交代的作業，課程結束後我還是對所學的東西一知半解，更別說是去完成一個作品了。</p>
<p>雖然很挫折，但是自己很享受學習過程中所帶來的一點點成就感，因此放棄從來都不在選項中。於是也閱讀了其他學員的學習心得，發現也有不少人跟我一樣是非本科系，但在學習上的付出程度實在差太多了，頓時覺得自己很廢，但也因此被激勵到了不少。</p>
<p>整頓一下心態後我開始重頭來過，為了避免學了就忘開始嘗試把所學的內容透過撰寫筆記的方式記錄下來，從先前的直播到後來也購入了六角的線上錄影課程，也開始透過參考其他人的文章來做中學；不得不說寫筆記對初學者來說真的是一個能有效記憶知識的好方法，也不用在意寫得多爛，因為筆記是寫給自己看的，就這樣以這樣的模式渡過了一段時間。</p>
<h2 id="報名契機"><a href="#報名契機" class="headerlink" title="報名契機"></a>報名契機</h2><p>今年年四月左右參加了為期一個月的公益體驗營，然而在體驗營結束前夕，學院按照慣例會推坑下一次的活動，這次是切版直播班，不過內容相較過去更為豐富，教學大綱除了舊有的 Bootstrap 到近幾年盛行的 Tailwind，思索一番之後還是報名了。其實原本是衝著 Tailwind 來的，但礙於過去在切版方面都是純手刻又覺得 Bootstrap 很困難而遲遲不去面對，導致自己連一個 CSS 框架都不會，另一方面自己在新技能的學習上會需要花不少時間來吸收，擔心一次學兩個會應付不來，因此就把目標先轉向了目前使用率較高的 Bootstrap；除此之外，這次也要求自己必須把八週主線任務的所有頁面都切出來，既然都全職學習了，至少這一點是能做到的吧。</p>
<h2 id="每週學習歷程"><a href="#每週學習歷程" class="headerlink" title="每週學習歷程"></a>每週學習歷程</h2><h3 id="直播"><a href="#直播" class="headerlink" title="直播"></a>直播</h3><p>雖然每週直播的教學內容算是在複習錄影，但是現場跟大家一起聽課的氛圍比起自己看錄影兩者還是有差的，而且常常會有同學在聊天室提出一些平常可能不太會注意到的有趣問題，也能當作是一種額外的知識吸收，此外當然也少不了校長的嘴砲模式以及心靈雞湯，畢竟學程式容易產生焦慮，長時間學習下還是需要找地方宣洩一下情緒。八週的直播形式基本上都是前面提到的這樣，整體的感覺不錯，這部分也沒有需要特別需要補充甚麼了，不過直播班本來就是以大量輸出為前提，每週花費在作業上的時間自然就比較多。</p>
<p>另外這次直播班每週是有兩場直播的，上述提到的是週五例行的直播，另一場則是週三的 Tailwind 主題，雖然大部分心思都投入在 Bootstrap 上面，但是每週還是有聽課並把作業都做過一次，整體感覺其實是很不錯的。</p>
<h3 id="小組討論"><a href="#小組討論" class="headerlink" title="小組討論"></a>小組討論</h3><p>這次被分配到的組別還不錯，每週的小組討論出席率都很高，只是大多數的組員平時都比較忙，也有組員加班到很晚還趕回來餐與討論，辛苦各位了，無法出席的人也會透過線下時間把作業補齊，也要特別感謝組長主持以及做資料彙整，不得不說組長真的很認真好學，小組伺服器的發問次數也是最多的，自己也從不少問題中學到各種額外的知識，賺爛了。</p>
<h3 id="每日任務"><a href="#每日任務" class="headerlink" title="每日任務"></a>每日任務</h3><p>不得不說每日任務真的是很棒的學習資源，每天會釋出一道小題目給學員練習，有時候作業卡關也能從這邊找到線索，也可以學到很多平常不知道的知識，算是一個小寶庫；不過後半段的部分因為都在趕主線任務的進度，幾乎都是用補交的就是了。</p>
<h3 id="主線任務"><a href="#主線任務" class="headerlink" title="主線任務"></a>主線任務</h3><p>作業方面主線任務難度是最高的，前兩週比較像是在試水溫，但是從第三週開始版型就是一個完整的電商網站了，印象中在做第三週時，平均一頁包含 RWD 就花了幾乎一天的時間，切完所有頁面後開始地毯式搜索看有甚麼地方沒處理仔細或是可以再調整，也嘗試透過簡單的 JS 加入了一些小功能和效果，結果自己很滿意。</p>
<p>第四週設計稿和第三週是同一份，差別在於第四週需要透過 Gulp 來做，講白一點這已經不是切版的範疇了，但是提早面對終端機指令、版本相容性或是編譯等問題對未來學習上無疑是好事，不過 Gulp 要怎麼寫任務就要靠自己學了，可惡！好想學會自己寫 Gulp 啊！！</p>
<p>第五週是後台版型，也開始嘗試使用以前一直不敢面對的 Bootstrap，然而這週的作業是一邊看官方文件一邊做的，大部分的時間都花在看文件而不是切版，為了讓自己能早一點習慣使用 Bootstrap，有好幾天晚上睡前用手機都不是在看社群，而是在看官方文件…。</p>
<p>校長在第一次直播時，有大概用折線圖描述一下每週的作業難度，印象中第六週的難度是僅次於第八週的，而且第六週開始被要求使用 CSS 框架來做，還好前一段時間花了不少時間研究 Bootstrap，現在通用類別與元件在使用上已經熟練了非常多，頓時覺得自己以前只是懶的去看密密麻麻的文件而已。除此之外，第六週設計稿部分區塊還需要引入 JS 套件，從 Discord 作業討論頻道也可以看到不少學員受到 Swiper 無情肆虐。自己也花費將近一週的時間才做完，就順便整合第七週一起繳交了，然而心想終於可以休息一下，結果第八週設計稿就提前釋出，害我差點就忘記自己還在通往地獄的列車上。</p>
<p>第八週的設計稿很特別，充斥著各式各樣酷炫的排版。在這過程中也做了很多以往沒做過的嘗試，首先是開始自己設計元件，先前看到其他同學不用 Pages 資料夾就能做出所有頁面，自己早就想嘗試看看了，意外的是然辦到了！果然有些事如果不做永遠不知道結果；另外也學會了客製化通用類別的方法，不得不說使用起來很方便可惜相見恨晚。不過最麻煩的部分還是 JS 套件，這部分花了很多時間不斷嘗試和理解才做出來，從拿到設計稿到切完所有頁面大概用了一個多禮拜的時間，真的好累啊…。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本來以為自己會倒在第八週，但意外的挺過來了，不得不說即便是全職學習還是覺得時間很緊迫，真心佩服那些平時有工作還來進修的同學。總結來說，這次直播班真的扎扎實實的學到很多知識，同時也深刻體會到學習是沒有捷徑的，追求卓越的唯一方法只有不斷的練習，最後非常感謝六角學院提供這麼棒的學習資源和環境，兩位講師和每位助教都辛苦了，小心肝啊！！</p>
<p>（長嘆，肝了無數個夜晚終於可以休息一下了，啊~原來我報名了 JS 直播班，差點忘記我搭的是不停靠的直達列車了。</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>課程心得</tag>
        <tag>六角學院</tag>
        <tag>網頁切版</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Flex 水平置中，子元素溢出不被裁切</title>
    <url>/2022-09-17-max-content/</url>
    <content><![CDATA[<p>記錄一下解決問題的方法。</p>
<span id="more"></span>

<hr>
<p>前一段時間在切版時，遇到一個有趣的問題，範例如下：</p>
<p><img src="https://i.imgur.com/TK9ZZcF.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;section mt-3&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;section-title&quot;</span>&gt;</span>Section Title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS（上方列表區塊） */</span></span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例中，上方 <code>.list</code> 區塊使用 <code>display: flex</code> 加上 <code>justify-content: center</code> 讓子元素置中，同時希望瀏覽器寬度縮小至子元素溢出時，溢出的部分以水平軸方式呈現，因此加入了 <code>overflow: auto</code> 設定，呈現畫面如下：</p>
<p><img src="https://i.imgur.com/Sn1BMH4.png"></p>
<p>然而將水平軸向左滾動至最底時，溢出的部分卻被裁切了，而問題就在 <code>justify-content: center</code> 這個屬性上，移除該屬性之後，子元素溢出的部分就會正常呈現，如下：</p>
<p><img src="https://i.imgur.com/6GYarUd.png"></p>
<p>此時問題來了，在不使用 <code>justify-content: center</code> 的情況下，要如何同時滿足子元素保持置中，但是溢出情況下不會被裁切呢？在思索一番後想到另一個能使區塊水平置中的語法，就是 <code>margin: 0 auto</code>，不過這個語法只適用具有實際寬度但非滿版的區塊，而範例中的 <code>.list</code> 區塊因為 <code>display: flex</code> 的關係佔了滿版的寬，因此並沒有如預期置中。下圖是區塊實際佔用的空間：</p>
<p><img src="https://i.imgur.com/WnJz6ud.png"></p>
<p><strong>解決方式：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS（上方列表區塊） */</span></span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">max-width</span>: max-content;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>僅需在 <code>.list</code> 區塊加上 <code>max-width: max-content</code> 語法即可，而 <code>max-content</code> 最基本的作用是讓區塊寬度或高度自適應子元素，並且當子元素溢出時，內容不會受到擠壓而換行；此處正好利用了前者特性，使 <code>.list</code> 最大寬度等於所有子元素（<code>.list-item</code>）寬度的加總，此時再配合 <code>margin: 0 auto</code> 之後區塊得以置中，並且當子元素溢出時不會被裁切。結果如下圖所示：</p>
<p><img src="https://i.imgur.com/MLip3hT.png"></p>
<p><strong>實作範例：</strong></p>
<iframe src="https://codepen.io/Cliff_hex/embed/bGMqLOq?default-tab=css,result" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>

<blockquote>
<p>max-content 詳細說明請參考此<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/max-content">文章</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Flex</tag>
        <tag>overflow</tag>
        <tag>max-content</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 學習筆記</title>
    <url>/2022-01-20-git-note/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="請輸入正確密碼。" data-whm="該文章無法校驗。">
  <script id="hbeData" type="hbeData" data-hmacdigest="30b9e2661e4d0b5cbd1a014023d81f0cbe069b9ee82a63a3aeb5e38f1d666b38"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">內容已加密，請輸入密碼。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>學習筆記</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 學習筆記</title>
    <url>/2022-05-12-javascript-note/</url>
    <content><![CDATA[<p>這是一篇 JavaScript 的學習筆記，視情況陸續增加內容。</p>
<span id="more"></span>

<hr>
<h2 id="宣告"><a href="#宣告" class="headerlink" title="宣告"></a>宣告</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>宣告的值為區域變數，可重新賦予值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告一變數 &quot;price&quot;，並賦予值為 60</span></span><br><span class="line"><span class="keyword">let</span> price = <span class="number">60</span>;</span><br><span class="line"><span class="comment">// 重新賦予變數 &quot;price&quot; 值為 80</span></span><br><span class="line">price = <span class="number">80</span>;</span><br></pre></td></tr></table></figure>

<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>宣告的值為常數，僅可讀取不可重新賦予值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告一變數 &quot;sunNum&quot; 並賦予值為 1，該變數值無法在重新賦予</span></span><br><span class="line"><span class="keyword">const</span> sunNum = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>宣告的值為全域變數，可重新賦予值</p>
<blockquote>
<p>宣告變數的名稱可使用駝峰式命名，此外，若撞到部分保留字，會無法宣告，保留字可參考此<a href="http://www.w3bai.com/zh-TW/js/js_reserved.html">連結</a>。</p>
</blockquote>
<hr>
<h2 id="型別"><a href="#型別" class="headerlink" title="型別"></a>型別</h2><p>字串（String）、數字（Number）、布林值（Boolean）…等，可透過 <code>typeof</code> 來判斷變數型別，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例一</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);</span><br><span class="line"><span class="comment">// 輸出結果為 Number</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例二</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);</span><br><span class="line"><span class="comment">// 輸出結果為 String</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多型別內容可參考此<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Data_structures">連結</a>。</p>
</blockquote>
<h3 id="數字（Number）"><a href="#數字（Number）" class="headerlink" title="數字（Number）"></a>數字（Number）</h3><p>只要是數字，並且沒有使用單、雙引號的值，型別都屬於數字，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> num );</span><br><span class="line"><span class="comment">// 輸出結果為 Number</span></span><br></pre></td></tr></table></figure>

<h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>當兩變數無法進行計算時，會出現 <code>NaN</code> 的結果，產生時機範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> c = a * b;</span><br><span class="line"><span class="built_in">console</span>.log( c, <span class="keyword">typeof</span> c );</span><br><span class="line"><span class="comment">// 輸出結果為 NaN number</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NaN 主要告知輸出結果有異常，而型別屬於 number。</p>
</blockquote>
<h3 id="字串（String）"><a href="#字串（String）" class="headerlink" title="字串（String）"></a>字串（String）</h3><p>型別為字串的值會加上單或雙引號來表示。</p>
<h4 id="字串相加"><a href="#字串相加" class="headerlink" title="字串相加"></a>字串相加</h4><p>字串相加寫法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 寫法一</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;hello &#x27;</span> + <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 變數值中帶有半形空白</span></span><br><span class="line"><span class="comment">// 此時變數 text 的結果為 hello world</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 寫法二</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Cliff&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> word = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( content + <span class="string">&#x27; &#x27;</span> + name ); <span class="comment">// 使用 &#x27; &#x27; 取代寫法一的半形空白</span></span><br><span class="line"><span class="comment">// 此時輸出結果為 Hello! Cliff</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 寫法三</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Cliff&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> word = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> content = name + <span class="string">&#x27; &#x27;</span> + word;</span><br><span class="line"><span class="built_in">console</span>.log( content );</span><br><span class="line"><span class="comment">// 此時輸出結果為 Hello! Cliff</span></span><br></pre></td></tr></table></figure>

<p>寫法一在變數中使用空白，但實務上會比較建議使用寫法二、三的做法。</p>
<h4 id="字串長度"><a href="#字串長度" class="headerlink" title="字串長度"></a>字串長度</h4><p>可使用 <code>length</code> 來查詢變數內容的長度，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27; Hello! &#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( message.length );</span><br><span class="line"><span class="comment">// 輸出結果為 9</span></span><br></pre></td></tr></table></figure>

<p>上述透過 <code>length</code> 所計算出來的結果，會包含空白，因此若希望輸出結果自動過濾左右兩側的空白，可使用 <code>trim()</code> 語法，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27; Hello ! &#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( message.trim().length );</span><br><span class="line"><span class="comment">// 輸出結果為 7</span></span><br></pre></td></tr></table></figure>

<h4 id="自動轉型"><a href="#自動轉型" class="headerlink" title="自動轉型"></a>自動轉型</h4><p>因為 Javascript 屬於弱型別，因此有些情況下，變數的型別會被自動轉型，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> mixBoth = str + num;</span><br><span class="line"><span class="built_in">console</span>.log( mixboth, <span class="keyword">typeof</span> mixboth );</span><br><span class="line"><span class="comment">// 輸出結果為 105 string</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，變數 <code>str</code> 與 <code>num</code> 兩變數值的型別分別屬於字串與數字，而變數 <code>mixboth</code> 將兩者相加，從最後輸出的結果中可以發現，相加的過程中，變數 <code>num</code> 的值被自動轉型為字串。</p>
<h4 id="手動轉型"><a href="#手動轉型" class="headerlink" title="手動轉型"></a>手動轉型</h4><p><strong>字串轉數字</strong></p>
<p>可使用 <code>parseInt()</code> 將型別 string 轉為型別 number，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> mixBoth = <span class="built_in">parseInt</span>(str) + num;</span><br><span class="line"><span class="built_in">console</span>.log( mixboth, <span class="keyword">typeof</span> mixboth );</span><br><span class="line"><span class="comment">// 輸出結果為 15 number</span></span><br></pre></td></tr></table></figure>

<p>因為字串與數字相加後的型別會是字串，因此若要正確計算上述兩變數值時，需要透過 <code>parseInt()</code> 將變數 <code>str</code> 的值型別轉為數字。</p>
<blockquote>
<p><code>parseInt()</code> 使用的時機像是需要取出 <code>input[type=text]</code> 表單內容時。</p>
</blockquote>
<p>如果變數的值為非數字的字串，則無法正確轉型，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="built_in">parseInt</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log( num, <span class="keyword">typeof</span> num );</span><br><span class="line"><span class="comment">// 輸出結果為 NaN number</span></span><br></pre></td></tr></table></figure>

<p><strong>數字轉字串</strong></p>
<p>可使用 <code>toString()</code> 將型別 number 轉為型別 string，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">20</span>;</span><br><span class="line">num2 = num2.toString(); <span class="comment">// 將原本的型別 Number 轉為 String，並重新賦予值</span></span><br><span class="line"><span class="keyword">let</span> mixBoth = num + num2;</span><br><span class="line"><span class="built_in">console</span>.log( mixBoth, <span class="keyword">typeof</span> mixBoth );</span><br><span class="line"><span class="comment">// 輸出結果為 1020 string</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>toString()</code> 使用的時機像是需要將電話號碼的區域碼，與後方的號碼做分隔時，就會需要字串與字串相加。</p>
</blockquote>
<h4 id="value-指向"><a href="#value-指向" class="headerlink" title="value 指向"></a>value 指向</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例一</span></span><br><span class="line"><span class="keyword">let</span> email = <span class="string">&#x27;test@mail.com&#x27;</span>;</span><br><span class="line">email.length;</span><br><span class="line"><span class="built_in">console</span>.log( email );</span><br><span class="line"><span class="comment">// 輸出結果為 test@mail.com</span></span><br></pre></td></tr></table></figure>

<p>上述範例最終輸出結果為 <code>test@mail.com</code> 而非 <code>13</code>，因為 <code>length</code> 只是計算變數的長度，並沒有實際賦予變數一個新值，因此變數 <code>email</code> 的值並沒有改變指向。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例二</span></span><br><span class="line"><span class="keyword">let</span> email = <span class="string">&#x27; test@mail.com &#x27;</span>; <span class="comment">// 兩側加入空白</span></span><br><span class="line"><span class="keyword">let</span> emailLength = email.length;</span><br><span class="line">email.trim();</span><br><span class="line"><span class="built_in">console</span>.log( email, emailLength );</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27; test@mail.com &#x27; 15</span></span><br></pre></td></tr></table></figure>

<p>上述範例分別宣告了 <code>email</code>、<code>emailLength</code> 兩個變數並賦予值，而第四行雖然執行了 <code>trim()</code> 來過濾變數 <code>email</code> 兩側的空白，但並沒有使用 <code>=</code> 符號重新賦予該變數新的值，因此最終輸出結果不變，如果希望輸出的值不包含兩側空白，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> email = <span class="string">&#x27; test@mail.com &#x27;</span>; <span class="comment">// 兩側加入空白</span></span><br><span class="line"><span class="keyword">let</span> emailLength = email.length;</span><br><span class="line"><span class="keyword">let</span> updateEmail = email.trim();</span><br><span class="line">email.trim();</span><br><span class="line"><span class="built_in">console</span>.log( email, emailLength, updateEmail );</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27; test@mail.com &#x27; 15 &#x27;test@mail.com&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上述宣告一變數 <code>updateEmail</code> 並賦予值為 <code>email.trim()</code>，因此最終輸出結果為 <code>&#39;test@mail.com&#39;</code>。</p>
<h4 id="樣板字面值"><a href="#樣板字面值" class="headerlink" title="樣板字面值"></a>樣板字面值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Cliff&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> content = <span class="string">&#x27;我是&#x27;</span>+name+<span class="string">&#x27;，今年&#x27;</span>+age+<span class="string">&#x27;歲。&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( content );</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;我是Cliff，今年20歲。&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上述變數 <code>content</code> 的值雖透過 <code>+</code> 符號來組成一段文字內容，但這種方式較為麻煩且閱讀起來較困難，因此建議使用樣板字面值，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Cliff&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> content = <span class="string">`我是<span class="subst">$&#123;name&#125;</span>，今年<span class="subst">$&#123;age&#125;</span>歲。`</span>;</span><br><span class="line"><span class="built_in">console</span>.log( content );</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;我是Cliff，今年20歲。&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>樣板字面值會使用兩個反引號（tab 上方按鍵）符號將內容包覆在其中，而變數使用 <code>$&#123; 變數名稱 &#125;</code> 方式插入。</p>
</blockquote>
<h3 id="布林值（Boolean）"><a href="#布林值（Boolean）" class="headerlink" title="布林值（Boolean）"></a>布林值（Boolean）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isSingle = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log( isSingle, <span class="keyword">typeof</span> isSingle );</span><br><span class="line"><span class="comment">// 輸出結果為 true &#x27;boolean&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上述宣告一變數 <code>isSingle</code> 並賦予值 <code>true</code>，最終輸出型別為 <code>boolean</code>（布林值），與數字、字串型別不同的是，布林值只有 <code>true</code>、<code>false</code> 兩個值，通常用於判斷是或不是。</p>
<p>判斷 100⁹⁹ 與 99¹⁰⁰ 兩數值大小，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">100</span>**<span class="number">99</span> &gt; <span class="number">99</span>**<span class="number">100</span> );</span><br><span class="line"><span class="comment">// 輸出結果為 false</span></span><br></pre></td></tr></table></figure>

<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>除了前面提到的三種型別之外，較常見的還有 <code>undefined</code>，當宣告的變數未賦予（使用 <code>=</code> 符號）一個實際的值時，該變數的值與型別就會是 <code>undefined</code>，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="built_in">console</span>.log( a, type a );</span><br><span class="line"><span class="comment">// 輸出結果為 undefined &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>undefinde</code> 表示該變數 “尚未被賦予值”。</p>
</blockquote>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p><code>null</code> 表示該變數有被賦予一個值，但是是屬於空值，簡單範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, <span class="keyword">typeof</span> a);</span><br><span class="line"><span class="comment">// 輸出結果為 null &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>null</code> 通常會在需要清空物件或陣列中的資料內容時使用。</p>
</blockquote>
<hr>
<h2 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h2><h3 id="比較運算子"><a href="#比較運算子" class="headerlink" title="比較運算子"></a>比較運算子</h3><p>常見的比較運算子如下所示：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">| &gt; 大於 | &lt; 小於 | &gt;= 大於且等於 | &lt;= 小於且等於 | == 等於 | != 不等於 | === 等於（包含型別） | !== 不等於（包含型別） |</span><br></pre></td></tr></table></figure>

<p>比較運算子所運算的結果會以布林值（Boolean）表示，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> c = a &gt; b;</span><br><span class="line"><span class="built_in">console</span>.log( a &gt; b );</span><br><span class="line"><span class="comment">// 輸出結果為 true</span></span><br><span class="line"><span class="built_in">console</span>.log( ( b**<span class="number">2</span> ) &gt; a );</span><br><span class="line"><span class="comment">// 輸出結果為 true</span></span><br><span class="line"><span class="built_in">console</span>.log( c );</span><br><span class="line"><span class="comment">// 變數 c 的值會先在記憶體中計算出結果，再回傳計算後的結果 true 並賦予變數值，因此最終輸出結果為 true</span></span><br></pre></td></tr></table></figure>

<h4 id="比較運算子補充觀念"><a href="#比較運算子補充觀念" class="headerlink" title="比較運算子補充觀念"></a>比較運算子補充觀念</h4><p><strong>觀念一</strong></p>
<p><code>=</code> 與 <code>==</code> 兩者在作用上的差異在於前者表示 “賦予” 一個變數值，後者則是判斷兩變數的值 “是否相等”。</p>
<p><strong>觀念二</strong></p>
<p><code>==</code> 與 <code>===</code> 都是用來判斷兩變數的值是否相等，但有些許差異，差異如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( a == b );</span><br><span class="line"><span class="comment">// 輸出結果為 true</span></span><br><span class="line"><span class="built_in">console</span>.log( a === b );</span><br><span class="line"><span class="comment">// 輸出結果為 false</span></span><br></pre></td></tr></table></figure>

<p>從上述範例可以得知，<code>==</code> 在比較的過程中如果內容相同但型別不同，就會自動轉型變數的型別，而 <code>===</code> 除了比較內容之外，也會判斷兩變數的型別是否相等，因此後者較為嚴謹。</p>
<blockquote>
<p>上述範例同理 <code>!=</code> 與 <code>!==</code>。</p>
</blockquote>
<h3 id="邏輯運算子"><a href="#邏輯運算子" class="headerlink" title="邏輯運算子"></a>邏輯運算子</h3><p>邏輯運算子會使用的符號為 <code>&amp;&amp;</code>（and）、<code>||</code>（or），分別表示 “同時滿足條件”、”滿足其中一個條件” ，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log( a &gt;= b &amp;&amp; a &gt; c ); <span class="comment">// a &gt;= b 且 a &lt; c / 兩條件皆必須為 true</span></span><br><span class="line"><span class="comment">// 輸出結果為 false</span></span><br><span class="line"><span class="built_in">console</span>.log( a &gt;= b || a &gt; c ); <span class="comment">// a &gt;= b 或 a &lt; c / 其中一個條件為 true 即可</span></span><br><span class="line"><span class="comment">// 輸出結果為 true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>邏輯運算子常見的情境像是百貨公司周年慶 e.g 同款項第二件九折，若單筆消費超過兩千元，則送百元折價券。</p>
</blockquote>
<p>邏輯運算子也可以用來判斷兩個以上的條件，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sex = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> isSingle = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log( sex == <span class="string">&#x27;male&#x27;</span> &amp;&amp; age &gt;= <span class="number">18</span> &amp;&amp; isSingle == <span class="literal">true</span> );</span><br><span class="line"><span class="comment">// 不滿足 isSingle == true 條件，因此輸出結果為 false</span></span><br></pre></td></tr></table></figure>

<h3 id="賦值運算子"><a href="#賦值運算子" class="headerlink" title="賦值運算子"></a>賦值運算子</h3><p>賦值運算子會使用 <code>+=</code>, <code>-=</code> 等方式來變更變數值，以下範例為變更一個變數值的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wallet = <span class="number">500</span>; <span class="comment">// 錢包總共有 500 元</span></span><br><span class="line">wallect = <span class="number">400</span>; <span class="comment">// 買了 100 元的早餐，剩餘 400 元</span></span><br><span class="line">wallet = <span class="number">450</span>; <span class="comment">// 路上撿到 50 元，現在總共有 450 元</span></span><br><span class="line"><span class="built_in">console</span>.log( wallect );</span><br><span class="line"><span class="comment">// 輸出結果為 450</span></span><br></pre></td></tr></table></figure>

<p>上述範例若使用賦值運算子，寫法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wallet = <span class="number">500</span>; <span class="comment">// 錢包總共有 500 元</span></span><br><span class="line">wallect = wallet - <span class="number">100</span>; <span class="comment">// 買了 100 元的早餐，剩餘 400 元</span></span><br><span class="line">wallect = wallect + <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log( wallect );</span><br><span class="line"><span class="comment">// 輸出結果為 450</span></span><br></pre></td></tr></table></figure>

<p>如上述情境所示，透過賦值運算子來計算花費的金額，邏輯與可辨識性相較前者高。</p>
<h4 id="賦值運算子縮寫"><a href="#賦值運算子縮寫" class="headerlink" title="賦值運算子縮寫"></a>賦值運算子縮寫</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">num = num + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// num 最終的值為 2</span></span><br></pre></td></tr></table></figure>

<p>將上述範例使用縮寫撰寫，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 縮寫</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line"><span class="comment">// num 最終的值為 2</span></span><br></pre></td></tr></table></figure>

<p>若只需要針對變數值進行 <code>+=1</code> 或 <code>-=1</code> 的動作，可以使用 <code>++</code> 或 <code>--</code>，範例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">a++;</span><br><span class="line">b--;</span><br><span class="line"><span class="built_in">console</span>.log( a, b );</span><br><span class="line"><span class="comment">// 輸出結果為 2, 1</span></span><br></pre></td></tr></table></figure>

<p>雖然 <code>++</code> 本身沒有 <code>=</code> 符號，但也會重新賦予變數值，因此上述三種方式的運作方式與結果皆相同。</p>
<blockquote>
<p>更多相關運算子內容可參考此<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators">連結</a>。</p>
</blockquote>
<hr>
<h2 id="if-流程判斷"><a href="#if-流程判斷" class="headerlink" title="if 流程判斷"></a>if 流程判斷</h2><p>流程判斷會使用到的判斷方式有 <code>if</code>、<code>else if</code>、<code>else</code> 三種，分別可以理解成 “如果”、”或是”、”否則”，如下方範例情境所示：</p>
<p><strong>情境一</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：判斷是否下雨，若是，則待在家不出門</span></span><br><span class="line"><span class="keyword">let</span> isRain = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>( isRain == <span class="literal">true</span> )&#123; <span class="comment">// 判斷結果為 true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;待在家不出門&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;待在家不出門&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，<code>if</code> 右方小括弧中的內容稱為條件式，若條件式的判斷結果為 <code>true</code>（滿足條件式），則執行大括弧中的內容。</p>
<p><strong>情境二</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：判斷是否消費滿 1000 元，若是，則打九折，若否，則不打折</span></span><br><span class="line"><span class="keyword">let</span> cost = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">if</span>( cost &gt;= <span class="number">1000</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;消費滿千，可以折扣&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;未滿千元，沒有折扣&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;未滿千元，沒有折扣&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，因為條件式 <code>cost &gt;= 1000</code> 判斷結果為 <code>false</code>，因此跳過第 4 行的內容而執行 <code>else</code> 的內容。</p>
<blockquote>
<p>若 <code>if</code> 判斷的結果為 <code>false</code>，但沒有給予對應的 <code>else</code> 內容，就會終止判斷且不會執行任何內容。</p>
</blockquote>
<p><strong>情境三</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：判斷錢包的錢是否夠買麵配可樂</span></span><br><span class="line"><span class="keyword">let</span> wallet = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">let</span> noodlePrice = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">let</span> cokePrice = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span>( wallet &gt;= ( noodlePrice + cokePrice ) )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;午餐吃麵配可樂，真爽&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( wallet &gt; noodlePrice &amp;&amp; wallet &lt; ( noodlePrice + cokePrice ) )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;午餐只能吃麵&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;午餐只喝可樂，e04&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>情境四</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：今天計畫要出門，如果下毛毛雨就帶輕便雨衣，如果下小雨就帶傘，但如果下豪雨就不出門。</span></span><br><span class="line"><span class="keyword">let</span> weather = <span class="string">&#x27;小雨&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`現在外面<span class="subst">$&#123;weather&#125;</span>，所以`</span>);</span><br><span class="line"><span class="keyword">if</span>( weather == <span class="string">&#x27;無雨&#x27;</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;不需要攜帶雨具&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( weather == <span class="string">&#x27;毛毛雨&#x27;</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;攜帶輕便雨衣&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( weather == <span class="string">&#x27;小雨&#x27;</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;攜帶一把傘&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( weather == <span class="string">&#x27;小雨&#x27;</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;攜帶一把傘&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( weather == <span class="string">&#x27;豪雨&#x27;</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;待在家不出門&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;狀態異常&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果為 現在外面小雨，所以 攜帶一把傘</span></span><br></pre></td></tr></table></figure>

<p>如上述範例所示，<code>else if</code> 可以使用多個，而 <code>if</code>、<code>else</code> 僅可頭尾分別存在一個。</p>
<p><strong>情境五</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：判斷考試成績區間</span></span><br><span class="line"><span class="keyword">let</span> point;</span><br><span class="line">point = <span class="number">89</span>;</span><br><span class="line"><span class="built_in">console</span>.log(point, <span class="keyword">typeof</span> point)</span><br><span class="line"><span class="keyword">if</span>( point &gt;= <span class="number">80</span> &amp;&amp; (<span class="keyword">typeof</span> point) != <span class="literal">undefined</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成績優異&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">80</span> &gt; point &amp;&amp; point &gt;= <span class="number">60</span> &amp;&amp; (<span class="keyword">typeof</span> point) != <span class="literal">undefined</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;請保持&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">60</span> &gt; point &amp;&amp; (<span class="keyword">typeof</span> point) != <span class="literal">undefined</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;請再加油&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;資料有誤&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>範例程式碼中，最後的 <code>else</code> 主要用於判斷程式碼若不符合前面所有條件時，所產生的異常狀態，有利於除錯。</p>
</blockquote>
<h3 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h3><p>初學者在撰寫流程判斷時，若有事先規劃的流程圖，可以有效提高撰寫的效率與程式邏輯思維，流程圖的形狀代表意義如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">箭頭 = 流程走向</span><br><span class="line">橢圓 = 起止符號 = 流程起點/終點</span><br><span class="line">矩形 = 處理流程 = 一系列的程式去改變數值、形式、數據的位置</span><br><span class="line">菱形 = 決策判斷 = 判斷條件，視情況決定下一步走向，通常以是/否決定。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>推薦使用 <a href="https://whimsical.com/">Whimsical</a> 線上工具來設計流程圖，流程圖參考範例：<a href="https://i.imgur.com/7KufOX3.png">範例一</a>、<a href="https://i.imgur.com/zzvsblf.png">範例二</a>。</p>
</blockquote>
<h3 id="if-巢狀運用"><a href="#if-巢狀運用" class="headerlink" title="if 巢狀運用"></a>if 巢狀運用</h3><p>if 在判斷條件式後，執行的內容中也能夠放入其他細部判斷式，流程圖可參考此<a href="https://i.imgur.com/g1WaOjc.png">連結</a>，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：判斷不同性別的體態狀況</span></span><br><span class="line"><span class="comment">// 測試資料</span></span><br><span class="line"><span class="keyword">let</span> sex = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> centimeter = <span class="number">88</span>;</span><br><span class="line"><span class="comment">// 將測用的資料帶入流程判斷</span></span><br><span class="line"><span class="keyword">if</span>( sex == <span class="string">&#x27;male&#x27;</span> )&#123;</span><br><span class="line">    <span class="keyword">if</span>( centimeter &gt;= <span class="number">90</span> )&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;男生體態過胖&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;男生體態正常&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( sex == <span class="string">&#x27;woman&#x27;</span> )&#123;</span><br><span class="line">    <span class="keyword">if</span>( centimeter &gt;= <span class="number">80</span> )&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;女生體態過胖&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;女生體態正常&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;您輸入的資料有誤&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果為 男生體態正常</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，資料首先在第 6 行開始進行判斷式 <code>sex == &#39;male&#39;</code> 的判斷，符合條件後執行下方內容，再執行內容中 <code>if</code> 的判斷式 <code>centimeter &gt;= 90</code>，判斷後不符合條件，最後執行 <code>else</code> 的內容，執行完畢後終止該判斷流程。</p>
<blockquote>
<p>if 只要滿足其中一個條件（判斷式結果為 <code>true</code>），就會在執行該條件的內容後，終止判斷流程（不再進行後續判斷式判斷）。</p>
</blockquote>
<hr>
<h2 id="資料結構"><a href="#資料結構" class="headerlink" title="資料結構"></a>資料結構</h2><h3 id="陣列（Array）"><a href="#陣列（Array）" class="headerlink" title="陣列（Array）"></a>陣列（Array）</h3><p>一般的情況下，一個變數只能賦予一個值，但是在多筆資料的狀況下，難以針對每一個變數去賦予對應的值，因此在處理多筆資料時，通常會將這些資料透過一個陣列來表示，並賦予到一個變數中，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 資料可以是各種型態</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">30</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">let</span> data = [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>];</span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;red&#x27;</span>, <span class="number">30</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">let</span> data = []; <span class="comment">// 表示沒有資料的空陣列</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>陣列中的所有資料會放入一個中括號內，且每筆資料會使用半形逗號隔開。</p>
</blockquote>
<h4 id="取得陣列資料"><a href="#取得陣列資料" class="headerlink" title="取得陣列資料"></a>取得陣列資料</h4><p>進行抓取指定資料前，需要先理解陣列中的每筆內容是有順序排列的，而第一筆會由 0 開始計算，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log( data );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// (3) [&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"><span class="comment">// 0: &quot;red&quot;</span></span><br><span class="line"><span class="comment">// 1: &quot;yellow&quot;</span></span><br><span class="line"><span class="comment">// 2: &quot;green&quot;</span></span><br><span class="line"><span class="comment">// length: 3</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>從上述範例結果中，可以得知該陣列的每筆資料內容、長度以及資料結構類型，此時假設如果要取得該陣列的第二筆資料內容時，可以在該變數後方加上 <code>[1]</code>，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log( data[<span class="number">1</span>] ); <span class="comment">// 第一筆以 [0] 表示，因此第二筆為 [1]，依此類推</span></span><br><span class="line"><span class="comment">// 輸出結果為 yellow</span></span><br></pre></td></tr></table></figure>

<h4 id="陣列取值賦予新變數"><a href="#陣列取值賦予新變數" class="headerlink" title="陣列取值賦予新變數"></a>陣列取值賦予新變數</h4><p>可指定陣列中的資料，並將該資料內容賦予至一個新變數中，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> musicGenres = [<span class="string">&#x27;Pop&#x27;</span>, <span class="string">&#x27;Rock&#x27;</span>, <span class="string">&#x27;Rap&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> myHobby = musicGenres[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log( myHobby );</span><br><span class="line"><span class="comment">// 輸出結果為 Pop</span></span><br></pre></td></tr></table></figure>

<h4 id="取得陣列長度"><a href="#取得陣列長度" class="headerlink" title="取得陣列長度"></a>取得陣列長度</h4><p>先前在型別有提到可使用 <code>length</code> 來查詢變數的內容長度，而該作法在陣列上的使用方式也是相同的，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> aryLength = ary.length;</span><br><span class="line"><span class="built_in">console</span>.log( aryLength );</span><br><span class="line"><span class="comment">// 輸出結果為 5</span></span><br></pre></td></tr></table></figure>

<h4 id="新增陣列資料"><a href="#新增陣列資料" class="headerlink" title="新增陣列資料"></a>新增陣列資料</h4><p>以空陣列為例，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例一：指定陣列中第一筆資料並賦予值</span></span><br><span class="line"><span class="keyword">let</span> ary = [];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&#x27;新增資料&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( ary );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// [&#x27;新增資料&#x27;]</span></span><br><span class="line"><span class="comment">// 0: &quot;新增資料&quot;</span></span><br><span class="line"><span class="comment">// length: 1</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例二：分別指定陣列中第一筆資料與第三筆資料並賦予值</span></span><br><span class="line"><span class="keyword">let</span> ary = [];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&#x27;第一筆資料&#x27;</span>;</span><br><span class="line">ary[<span class="number">2</span>] = <span class="string">&#x27;第二筆資料&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( ary, ary[<span class="number">1</span>] );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// (3) [&#x27;第一筆資料&#x27;, empty, &#x27;第二筆資料&#x27;] undefined</span></span><br><span class="line"><span class="comment">// 0: &quot;第一筆資料&quot;</span></span><br><span class="line"><span class="comment">// 2: &quot;第二筆資料&quot;</span></span><br><span class="line"><span class="comment">// length: 3</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>範例二中的第二筆資料因為沒有賦予值，因此該筆資料為空資料 <code>empty</code>，但是空值不代表該筆資料不存在，而是尚未定義資料內容（undefined），因此也會被納入陣列的長度（length）中。</p>
</blockquote>
<h4 id="push-新增資料"><a href="#push-新增資料" class="headerlink" title="push 新增資料"></a>push 新增資料</h4><p><code>push()</code> 是新增資料到陣列中的一種方法，使用該方式所加入的值，會被放到陣列<strong>最末端</strong>的位置，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">colors.push(<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log( colors );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// (4) [&#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;] // blue 位置在最後</span></span><br><span class="line"><span class="comment">// 0: &quot;red&quot;</span></span><br><span class="line"><span class="comment">// 1: &quot;yellow&quot;</span></span><br><span class="line"><span class="comment">// 2: &quot;green&quot;</span></span><br><span class="line"><span class="comment">// 3: &quot;blue&quot;</span></span><br><span class="line"><span class="comment">// length: 4</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h4 id="unshift-新增資料"><a href="#unshift-新增資料" class="headerlink" title="unshift 新增資料"></a>unshift 新增資料</h4><p>運作的原理與 <code>push()</code> 相同，差異在於透過 <code>unshift()</code> 所加入陣列的值，位置會在該陣列的<strong>最前端</strong>，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">colors.unshift(<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log( colors );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// (4) [&#x27;blue&#x27;, &#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;green&#x27;] // blue 位置在最前</span></span><br><span class="line"><span class="comment">// 0: &quot;blue&quot;</span></span><br><span class="line"><span class="comment">// 1: &quot;red&quot;</span></span><br><span class="line"><span class="comment">// 2: &quot;yellow&quot;</span></span><br><span class="line"><span class="comment">// 3: &quot;green&quot;</span></span><br><span class="line"><span class="comment">// length: 4</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h4 id="pop-刪除資料"><a href="#pop-刪除資料" class="headerlink" title="pop 刪除資料"></a>pop 刪除資料</h4><p>在一個陣列後方加入 <code>pop()</code> 方法之後，該陣列的<strong>最後一筆</strong>資料會被刪除，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">colors.pop();</span><br><span class="line"><span class="built_in">console</span>.log( colors );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// (2) [&#x27;red&#x27;, &#x27;yellow&#x27;] // 最後一筆 green 被刪除</span></span><br><span class="line"><span class="comment">// 0: &quot;red&quot;</span></span><br><span class="line"><span class="comment">// 1: &quot;yellow&quot;</span></span><br><span class="line"><span class="comment">// length: 2</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h4 id="shift-刪除資料"><a href="#shift-刪除資料" class="headerlink" title="shift 刪除資料"></a>shift 刪除資料</h4><p>運作的原理與 <code>pop()</code> 相同，差異在於 <code>shift()</code> 所刪除的資料，是陣列中的<strong>第一筆</strong>，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">colors.shift();</span><br><span class="line"><span class="built_in">console</span>.log( colors );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// (2) [&#x27;yellow&#x27;, &#x27;green&#x27;] // 第一筆 red 被刪除</span></span><br><span class="line"><span class="comment">// 0: &quot;yellow&quot;</span></span><br><span class="line"><span class="comment">// 1: &quot;green&quot;</span></span><br><span class="line"><span class="comment">// length: 2</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h4 id="splice-刪除指定資料"><a href="#splice-刪除指定資料" class="headerlink" title="splice 刪除指定資料"></a>splice 刪除指定資料</h4><p>使用 <code>splice()</code> 方法刪除陣列中的資料時，會加入兩個參數，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">colors.splice(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( colors );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// (2) [&#x27;red&#x27;, &#x27;blue&#x27;] // 從 green 開始，刪除兩筆資料</span></span><br><span class="line"><span class="comment">// 0: &quot;red&quot;</span></span><br><span class="line"><span class="comment">// 1: &quot;blue&quot;</span></span><br><span class="line"><span class="comment">// length: 2</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，<code>splice(1, 2)</code> 兩個參數依序分別代表刪除資料的起始位置，以及刪除資料的筆數，因此會以第二筆開始刪除，並刪除兩筆資料，因此 <code>green</code> 與 <code>blue</code> 被刪除。</p>
<blockquote>
<p>無論使用上述任何方法新增、刪除陣列中的資料，該陣列的長度都會有所改變。</p>
</blockquote>
<blockquote>
<p>關於陣列的處理方法還有 <code>filter()</code> , <code>find()</code> , <code>forEach()</code> , <code>map()</code> , <code>every()</code> , <code>some()</code> , <code>reduce()</code>，以上內容會在函式（function）的部分說明。</p>
</blockquote>
<h3 id="物件（Object）"><a href="#物件（Object）" class="headerlink" title="物件（Object）"></a>物件（Object）</h3><p>當一筆資料需要詳細紀錄不同的細部資訊時，會以物件的形式來表示，並賦予至一個變數中，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myInfo = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>, <span class="comment">// 屬性: 屬性值</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;test@email.com&#x27;</span>,</span><br><span class="line">    <span class="attr">isSingle</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( myInfo );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &#123;name: &#x27;Mark&#x27;, sex: &#x27;male&#x27;, age: 18, email: &#x27;test@email.com&#x27;, isSingle: true&#125;</span></span><br><span class="line"><span class="comment">// age: 18</span></span><br><span class="line"><span class="comment">// email: &quot;test@email.com&quot;</span></span><br><span class="line"><span class="comment">// isSingle: true</span></span><br><span class="line"><span class="comment">// name: &quot;Mark&quot;</span></span><br><span class="line"><span class="comment">// sex: &quot;male&quot;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>物件的內容會放入一個大括號內，而物件中每個細項會有一個屬性名稱與對應的屬性值，且屬性之間會使用半形逗號隔開。</p>
</blockquote>
<h4 id="取得物件資料"><a href="#取得物件資料" class="headerlink" title="取得物件資料"></a>取得物件資料</h4><p>物件中會存在各種不同名稱的屬性與對應的值，如果要取得指定的屬性值，第一種方式會使用 <code>.</code> 符號，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myInfo = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">isSingle</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( myInfo.name ); <span class="comment">// 取得物件 myInfo 中的屬性 name 的值</span></span><br><span class="line"><span class="comment">// 輸出結果為 Mark</span></span><br></pre></td></tr></table></figure>

<p>除了前面提到使用 <code>.</code> 來取得屬性值，還可以使用中括號 <code>[屬性名稱]</code> 的方式來取得，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myInfo = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">isSingle</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( myInfo[<span class="string">&#x27;name&#x27;</span>] ); <span class="comment">// 取得物件 myInfo 中的屬性 name 的值</span></span><br><span class="line"><span class="comment">// 輸出結果為 Mark</span></span><br></pre></td></tr></table></figure>

<p>此外，也可以將物件的屬性名稱賦予至一變數，並透過 <code>[變數]</code> 的方式來取得物件中的屬性值，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myInfo = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">isSingle</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> myName = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log( myInfo[myName] ); <span class="comment">// 原理等同於 myInfo[&#x27;name&#x27;]</span></span><br><span class="line"><span class="comment">// 輸出結果為 Mark</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 <code>.</code> 或是 <code>[]</code> 都可以取得物件中的屬性值，而前者在取得某些 JSON 格式的資料時可能會導致程式碼無法辨識。</p>
</blockquote>
<h4 id="新增物件屬性"><a href="#新增物件屬性" class="headerlink" title="新增物件屬性"></a>新增物件屬性</h4><p>以空物件為例，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myInfo = &#123;&#125;;</span><br><span class="line">myInfo.name = <span class="string">&#x27;Mark&#x27;</span>; <span class="comment">// 在 myInfo 物件中新增一個 name 屬性，並賦予屬性值 &#x27;Mark&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log( myInfo );</span><br></pre></td></tr></table></figure>

<h4 id="修改物件屬性值"><a href="#修改物件屬性值" class="headerlink" title="修改物件屬性值"></a>修改物件屬性值</h4><p>物件中的屬性值修改方式原理與變數相同，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myInfo = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">isSingle</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 以下透過賦值運算子改變屬性值</span></span><br><span class="line">myInfo.name = <span class="string">&#x27;Fuck&#x27;</span>;</span><br><span class="line">myInfo.age += <span class="number">1</span>;</span><br><span class="line">isSingle = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log( myInfo );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &#123;name: &#x27;Fuck&#x27;, age: 19, isSingle: true&#125;</span></span><br><span class="line"><span class="comment">// age: 19</span></span><br><span class="line"><span class="comment">// isSingle: true</span></span><br><span class="line"><span class="comment">// name: &quot;Fuck&quot;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h4 id="刪除物件資料"><a href="#刪除物件資料" class="headerlink" title="刪除物件資料"></a>刪除物件資料</h4><p>物件中的屬性，可以透過 <code>delete</code> 來指定刪除，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myInfo = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">isSingle</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> myInfo.isSingle; <span class="comment">// 刪除 myInfo 物件中的 isSingle 屬性與值</span></span><br><span class="line"><span class="built_in">console</span>.log( myInfo, myInfo.isSingle );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &#123;name: &#x27;Mark&#x27;, age: 18&#125; undefined // 刪除後找不到 isSingle 相關屬性</span></span><br><span class="line"><span class="comment">// age: 18</span></span><br><span class="line"><span class="comment">// name: &quot;Mark&quot;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="物件結合陣列"><a href="#物件結合陣列" class="headerlink" title="物件結合陣列"></a>物件結合陣列</h2><p>陣列除了可以放入一般的變數之外，也能夠放入多個物件，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：水果的詳細資訊</span></span><br><span class="line"><span class="keyword">let</span> fruitDetail = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Apple&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">isSoldOut</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">isSoldOut</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">console</span>.log( fruitDetail );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// (2) [&#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"><span class="comment">// 0: &#123;name: &#x27;Apple&#x27;, price: 30, isSoldOut: false&#125;</span></span><br><span class="line"><span class="comment">// 1: &#123;name: &#x27;banana&#x27;, price: 20, isSoldOut: true&#125;</span></span><br><span class="line"><span class="comment">// length: 2</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Array(0)</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>陣列中的每個物件之間會使用一個半形逗號隔開。</p>
</blockquote>
<p>先前提到陣列會使用 <code>[順序]</code> 的方式來取值，而在陣列內容結構為物件的情況下也是相同的，會使用 <code>[]</code> 來指定物件，並透過 <code>.</code> 或是 <code>[]</code> 來取得屬性內容，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruitDetail = [</span><br><span class="line">    &#123; <span class="comment">// 第 1 筆 [0]</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Apple&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">isSoldOut</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,&#123; <span class="comment">// 第 2 筆 [1]</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">isSoldOut</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log( fruitDetail[<span class="number">1</span>] ); <span class="comment">// 取得陣列 fruitDetail 的第二個物件內容</span></span><br><span class="line"><span class="built_in">console</span>.log( fruitDetail[<span class="number">1</span>].name ); <span class="comment">// 指定陣列 fruitDetail 的第二個物件，並取得該物件中屬性 name 的值</span></span><br><span class="line"><span class="comment">// 輸出結果1 ----</span></span><br><span class="line"><span class="comment">// &#123;name: &#x27;banana&#x27;, price: 20, isSoldOut: true&#125;</span></span><br><span class="line"><span class="comment">// isSoldOut: true</span></span><br><span class="line"><span class="comment">// name: &quot;banana&quot;</span></span><br><span class="line"><span class="comment">// price: 20</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// 輸出結果2 ----</span></span><br><span class="line"><span class="comment">// banana</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON-格式"><a href="#JSON-格式" class="headerlink" title="JSON 格式"></a>JSON 格式</h3><p>JSON 是用於程式語言的一種資料結構，方便閱讀，目前也是多種語言通用的資料格式，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例 - 來源取自 wikipedia</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: <span class="string">&quot;This is the text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;dark_red&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bold&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strikethough&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        <span class="string">&quot;clickEvent&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: <span class="string">&quot;open_url&quot;</span>,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>: <span class="string">&quot;zh.wikipedia.org&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;hoverEvent&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: <span class="string">&quot;show_text&quot;</span>,</span><br><span class="line">            <span class="string">&quot;value&quot;</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;extra&quot;</span>: <span class="string">&quot;something&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;translate&quot;</span>: <span class="string">&quot;item.dirt.name&quot;</span>,</span><br><span class="line">        <span class="string">&quot;color&quot;</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;italic&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若是使用 Chrome 瀏覽器，可安裝 JSONView 擴充功能，該工具可將網頁上壓縮後的 JSON 格式資料進行自動整理以提高可讀性。</p>
</blockquote>
<h3 id="物件巢狀運用"><a href="#物件巢狀運用" class="headerlink" title="物件巢狀運用"></a>物件巢狀運用</h3><p>物件中的屬性值也能以物件結構表示，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 巢狀物件</span></span><br><span class="line"><span class="keyword">let</span> fruit = &#123; <span class="comment">// 外層物件</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Apple&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">isSoldOut</span>: &#123; <span class="comment">// 內層物件</span></span><br><span class="line">        <span class="attr">storeA</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">storeB</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( fruit ); <span class="comment">// 取得物件整體內容</span></span><br><span class="line"><span class="built_in">console</span>.log( fruit.isSoldOut.storeA ); <span class="comment">// 取得物件內的物件資料</span></span><br><span class="line"><span class="comment">// 輸出結果1----</span></span><br><span class="line"><span class="comment">// &#123;name: &#x27;Apple&#x27;, price: 30, isSoldOut: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">// isSoldOut: &#123;storeA: true, storeB: false&#125;</span></span><br><span class="line"><span class="comment">// name: &quot;Apple&quot;</span></span><br><span class="line"><span class="comment">// price: 30</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// 輸出結果2----</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h4 id="取得-JSON-資料"><a href="#取得-JSON-資料" class="headerlink" title="取得 JSON 資料"></a>取得 JSON 資料</h4><p><strong>範例一</strong></p>
<p>以此<a href="https://api.kcg.gov.tw/api/service/get/4278fc6a-c3ea-4192-8ce0-40f00cdb40dd">公開資料</a>為例，假設已將該資料賦予至變數 <code>jsonData</code> 中，嘗試取得屬性 <code>data</code> 中第 3 筆資料的 <code>車站中文名稱</code> 屬性值，做法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( jsonData.data[<span class="number">2</span>].車站中文名稱);</span><br><span class="line"><span class="comment">// 輸出結果為 草衙</span></span><br></pre></td></tr></table></figure>

<p><strong>範例二</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="string">&quot;contentType&quot;</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isImage&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;XML_Head&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Listname&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Language&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Orgname&quot;</span>: <span class="string">&quot;397000000A&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Updatetime&quot;</span>: <span class="string">&quot;2021/01/20 08:40:00&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Infos&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Info&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;C1_397000000A_000230&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;田寮月世界&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Zone&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Toldescribe&quot;</span>: <span class="string">&quot;田寮「月世界」特殊景觀在地理學上稱為「惡地」，是由於地殼的「回春作用」，經年累月的經由雨水與河水強烈侵蝕，將泥沙堆積在泥岩上，地層變動後，泥沙更與泥岩混合再經由風化、沉積作用，形成今日地貌，僅適於耐旱、耐鹽的淺根植物（如：箭竹）、濱海植物生長。從田寮到旗山台28線沿路除了月世界景觀，還有大小不等的二十多個泥火山，常呈現間歇性的噴發現象，噴發的規模則視地底天然氣與泥漿的累積壓力而定，噴發後的泥流堆積地區。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Description&quot;</span>: <span class="string">&quot;田寮「月世界」特殊景觀在地理學稱為「惡地」，經年累月由雨、河水侵蝕，將泥沙堆積在泥岩上，泥沙與泥岩混合經由風化形成。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tel&quot;</span>: <span class="string">&quot;886-7-6367036&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Add&quot;</span>: <span class="string">&quot;高雄市823田寮區崇德里月球路36號&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Zipcode&quot;</span>: <span class="string">&quot;823&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Travellinginfo&quot;</span>: <span class="string">&quot;無障礙交通：高鐵台南站 → 沙旗美月世界快線公車 → 月世界 → 旗山高鐵左營站 → 旗美快線公車 → 旗山 → 轉搭沙旗美月世界快線公車 → 月世界&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Opentime&quot;</span>: <span class="string">&quot;遊客中心：09:00–17:00月世界：全天候開放&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Gov&quot;</span>: <span class="string">&quot;397000000A&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Px&quot;</span>: <span class="string">&quot;120.38898&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Py&quot;</span>: <span class="string">&quot;22.88600&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;C1_397000000A_000234&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;西子灣風景區&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Zone&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Toldescribe&quot;</span>: <span class="string">&quot;西子灣以夕陽美景及天然礁石聞名，區內包括了西子灣海水浴場、海濱公園、打狗英國領事館....等景點；可觀海景、遠眺高雄港；海水浴場極富熱帶氣息、南國風情，每當夜幕低垂，晚霞的照耀，漁船燈火閃爍其間，呈現海天一色美景。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Description&quot;</span>: <span class="string">&quot;西子灣以夕陽美景及天然礁石聞名，區內包括了西子灣海水浴場、海濱公園、打狗英國領事館....等景點。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Tel&quot;</span>: <span class="string">&quot;886-7-5250005&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Add&quot;</span>: <span class="string">&quot;高雄市804鼓山區蓮海路51號&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Zipcode&quot;</span>: <span class="string">&quot;804&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Travellinginfo&quot;</span>: <span class="string">&quot;搭高鐵至左營站下或搭臺鐵至高雄站下 → 轉搭高雄捷運至西子灣站下 → 轉搭高雄市公車(99路、橘1A路)至西子灣站下。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Opentime&quot;</span>: <span class="string">&quot;西子灣海水浴場：10:00–16:00&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Gov&quot;</span>: <span class="string">&quot;397000000A&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Px&quot;</span>: <span class="string">&quot;120.26391&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Py&quot;</span>: <span class="string">&quot;22.62442&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;b69ffff9-23a5-44a6-a398-089b11a5f84c&quot;</span>,</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上述內容為一個 JSON 格式資料，嘗試完成註解中的內容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得 Info 的陣列資料，並賦予至 newData 變數</span></span><br><span class="line"><span class="keyword">let</span> newData = data.data.XML_Head.Infos.Info;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得 Info 陣列中第 2 筆資料的 Opentime 屬性值</span></span><br><span class="line"><span class="built_in">console</span>.log( data.data.XML_Head.Infos.Info[<span class="number">1</span>].Opentime ); <span class="comment">// 做法一</span></span><br><span class="line"><span class="built_in">console</span>.log( newData[<span class="number">1</span>].Opentime ); <span class="comment">// 做法二</span></span><br><span class="line"><span class="comment">// 輸出結果皆為 西子灣海水浴場：10:00–16:00</span></span><br></pre></td></tr></table></figure>

<h3 id="物件結合-if-判斷"><a href="#物件結合-if-判斷" class="headerlink" title="物件結合 if 判斷"></a>物件結合 if 判斷</h3><p>簡單範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myData = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( myData.age &gt;= <span class="number">18</span> )&#123;</span><br><span class="line">    myData.state = <span class="string">&#x27;符合入場條件&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    myData.state = <span class="string">&#x27;不符合入場條件&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( myData );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &#123;name: &#x27;Mark&#x27;, age: 18, state: &#x27;符合入場條件&#x27;&#125;</span></span><br><span class="line"><span class="comment">// age: 18</span></span><br><span class="line"><span class="comment">// name: &quot;Mark&quot;</span></span><br><span class="line"><span class="comment">// state: &quot;符合入場條件&quot;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h3 id="物件結合陣列與-if-判斷"><a href="#物件結合陣列與-if-判斷" class="headerlink" title="物件結合陣列與 if 判斷"></a>物件結合陣列與 if 判斷</h3><p>簡單範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：判斷 Mark 是否成年，若未成年則不得入場</span></span><br><span class="line"><span class="keyword">let</span> peopleData = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Vivian&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">if</span>( peopleData[<span class="number">0</span>].age &gt;= <span class="number">18</span> )&#123;</span><br><span class="line">    peopleData[<span class="number">0</span>].state = <span class="string">&#x27;符合入場條件&#x27;</span>; <span class="comment">// 符合條件就重新賦予 state 屬性值</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    peopleData[<span class="number">0</span>].state = <span class="string">&#x27;不符合入場條件&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( peopleData[<span class="number">0</span>] );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &#123;name: &#x27;Mark&#x27;, age: 18, state: &#x27;符合入場條件&#x27;&#125;</span></span><br><span class="line"><span class="comment">// age: 18</span></span><br><span class="line"><span class="comment">// name: &quot;Mark&quot;</span></span><br><span class="line"><span class="comment">// state: &quot;符合入場條件&quot;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上只是運作流程與邏輯的參考，而通常資料會有數筆，因此如果像上述範例一樣每有一筆資料就處理一次，效率就會很差且不易閱讀，因此通常會透過迴圈的方式來處理大批資料。</p>
</blockquote>
<hr>
<h2 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h2><p>函式（function）的作用主要是把一系列相關的程式透過一個指令來包裝，並視情況執行，起手式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showText</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;一段文字內容&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">showText(); <span class="comment">// 執行函式 showText</span></span><br><span class="line"><span class="comment">// 輸出結果為 一段文字內容</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一組函式在註冊完成後並不會立即執行，需要透過 <code>functionName();</code> 方式來執行，而該函式在執行完內容後，就會終止。</p>
</blockquote>
<h3 id="巢狀函式"><a href="#巢狀函式" class="headerlink" title="巢狀函式"></a>巢狀函式</h3><p>範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showText</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文字內容一&#x27;</span>);</span><br><span class="line">    showText2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showText2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文字內容二&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">showText();</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 文字內容一</span></span><br><span class="line"><span class="comment">// 文字內容二</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>函式中若存在別的函式，則會先搜尋是否有該函式的存在，若有就執行該函式的內容，執行完畢後再跳回原本的函式接續執行後續的內容。</p>
</blockquote>
<h3 id="代入參數"><a href="#代入參數" class="headerlink" title="代入參數"></a>代入參數</h3><p>一個函式在執行時，是可以帶入參數的，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">num, num2</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( num + num2 );</span><br><span class="line">&#125;</span><br><span class="line">calculate(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log( num, num2 );</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// num is not defined</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>上述範例在執行函式 <code>calculate</code> 時，代入了 <code>2</code>、<code>3</code> 兩個參數，此時第 2 行開始運算並得出結果為 <code>5</code>，而在函式外嘗試取得 <code>num</code> 的值後，輸出結果為顯示找不到相關內容，由此可知函式所代入的參數只能在該函式中作運用。</p>
<h3 id="return-回傳結果到函式外部"><a href="#return-回傳結果到函式外部" class="headerlink" title="return 回傳結果到函式外部"></a>return 回傳結果到函式外部</h3><p>前面提到函式所代入的參數只能使用在該函式中，但如果要在函式外做使用，可以透過 <code>return</code> 來將<strong>函式運算後的結果</strong>傳遞到函式的外部，此時就可以透過宣告變數等方式，來接收被傳遞到函式外的值，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">num, num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num + num2; <span class="comment">// 將運算結果回傳到函式之外（第 4 行）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = calculate(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log( result );</span><br><span class="line"><span class="comment">// 輸出結果為 15</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>換句話說，<code>calculate(5, 10)</code> 可以直接當作 <code>15</code>。</p>
</blockquote>
<p>除了上述範例在函式內直接回傳 <code>num + num2</code> 的運算結果之外，也可以先將運算結果賦予到一變數中，再透過 <code>return</code> 回傳<strong>該變數的值</strong>，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">num, num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = num + num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = calculate(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">`運算結果等於<span class="subst">$&#123;result&#125;</span>`</span> );</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;運算結果等於15&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>函式內所宣告的變數與參數一樣，只能在該函式內使用，而 <code>return</code> 回傳的只有運算後的結果，並非該變數本身。</p>
</blockquote>
<h3 id="return-中斷函式"><a href="#return-中斷函式" class="headerlink" title="return 中斷函式"></a>return 中斷函式</h3><p>return 除了能夠回傳結果，還具有中斷函式執行的作用，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">num, num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = num + num2;</span><br><span class="line">    <span class="keyword">return</span> sum;  <span class="comment">// 回傳結果後在此中斷</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;一段文字內容&#x27;</span>); <span class="comment">// 因 return 中斷而不執行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = calculate(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log( result );</span><br><span class="line"><span class="comment">// 輸出結果為 15</span></span><br></pre></td></tr></table></figure>

<h3 id="return-應用範例"><a href="#return-應用範例" class="headerlink" title="return 應用範例"></a>return 應用範例</h3><p><strong>情境一</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判斷成績是否及格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScore</span>(<span class="params">score</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( <span class="number">100</span> &gt;= score &amp;&amp; score &gt;= <span class="number">60</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;成績及格&#x27;</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">60</span> &gt; score &amp;&amp; score &gt;= <span class="number">0</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;成績不及格&#x27;</span>; <span class="comment">// 回傳結果至 exam 後程式在此中斷</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;資料有誤&#x27;</span>; <span class="comment">// 回傳結果至 exam2 後程式在此中斷</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> exam = checkScore(<span class="number">50</span>);</span><br><span class="line"><span class="keyword">let</span> exam2 = checkScore(<span class="number">120</span>);</span><br><span class="line"><span class="built_in">console</span>.log( exam, exam2 );</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;成績不及格&#x27; &#x27;資料有誤&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>情境二</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判斷兩數字相除是否可整除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">num, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> remainder = num % num2;</span><br><span class="line">  <span class="keyword">if</span>( remainder == <span class="number">0</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;可以整除&#x27;</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`餘數為<span class="subst">$&#123;remainder&#125;</span>，不可整除`</span>; <span class="comment">// 回傳結果至 result 後程式在此中斷</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result =  calculate(<span class="number">100</span>, <span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log( result );</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;餘數為4，不可整除&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>情境三</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判斷計算結果總次數</span></span><br><span class="line"><span class="keyword">let</span> calcNum = <span class="number">0</span>; <span class="comment">// 全域變數</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">num, num2</span>)</span>&#123;</span><br><span class="line">  calcNum += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> remainder = num % num2;</span><br><span class="line">  <span class="keyword">if</span>( remainder == <span class="number">0</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;可以整除&#x27;</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`餘數為<span class="subst">$&#123;remainder&#125;</span>，不可整除`</span>; <span class="comment">// 回傳結果至 result 後程式在此中斷</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result =  calculate(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"><span class="built_in">console</span>.log( result, <span class="string">`目前總共計算<span class="subst">$&#123;calcNum&#125;</span>次`</span> );</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;可以整除&#x27; &#x27;目前總共計算1次&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>從範例中第 4 行可得知，當函式中找不到宣告的變數時，會往全域搜尋是否存在相同名稱的變數。</p>
</blockquote>
<hr>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM（Document Object Model）簡單來說，就是將一個 HTML 的文件組成內容（標籤、文字、圖片等），以樹狀結構來表示的模型，詳細資料可參考此<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Document_Object_Model">連結</a>。</p>
<h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><p>透過 querySelector 可以選取網頁中的元素（標籤、class 選擇器、id 選擇器），語法格式為 <code>document.querySelector(&#39;網頁元素&#39;)</code>，以 id 選擇器為例，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">botton</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Botton<span class="tag">&lt;/<span class="name">botton</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &lt;botton id=&quot;btn&quot;&gt;Botton&lt;/botton&gt;</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果選取的元素有綁定 id 屬性，也能使用 getElementById 方式來取得該元素節點。</p>
</blockquote>
<h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><p>雖然 querySelector 可以選取網頁中的元素，但是相同名稱的元素存在多個時，只有第一個會被選取到，此時可以使用 querySelectorAll 來選取多個元素，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> els = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// NodeList[3]</span></span><br><span class="line"><span class="comment">// 0: a</span></span><br><span class="line"><span class="comment">// 1: a</span></span><br><span class="line"><span class="comment">// 2: a</span></span><br><span class="line"><span class="comment">// length: 3</span></span><br><span class="line"><span class="comment">// [[Prototype]]: NodeList</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>上述 JS 範例中得知，透過 querySelectorAll 的方式選取到所有的 a 標籤，而資料結構 <code>NodeList</code> 是一種有序的節點列表，也屬於陣列，因此可以透過中括號的方式來指定想要選取的內容，延續先前範例，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> els = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(els[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 輸出結果為 a</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>querySelector 會回傳一個 DOM，而 querySelector 則是回傳一個陣列。</p>
</blockquote>
<h3 id="textContent"><a href="#textContent" class="headerlink" title="textContent"></a>textContent</h3><p>如果需要修改元素的純文字內容，可以使用 textContent，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.title&#x27;</span>);</span><br><span class="line">el.textContent = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上述 JS 範例中，第 3 行將元素 <code>.title</code> 的文字內容 Title 修改為 Hello。</p>
<h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p>與先前 textContent 的差異在於，innerHTML 除了純文字以外，還可以新增 HTML 標籤與相關內容，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.links&#x27;</span>);</span><br><span class="line">el.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;&lt;li&gt;Google&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;Yahoo&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;Youtube&lt;/li&gt;&lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure>

<p>上述 JS 範例中，第 3 行使用 <code>innerHTML</code> 新增一組列表 <code>ul</code> 與其文字內容，而所新增的元素內容可透過<strong>反引號</strong>（樣板字面值）的方式來包覆。</p>
<blockquote>
<p>使用 <code>innerHTML</code> 新增標籤後，若區塊內原先已有其他標籤，舊有的標籤內容會直接被清空並取代為新增的標籤內容。</p>
</blockquote>
<p>此外，透過 innerHTML 所加入的標籤中，也能夠帶入變數，延續先前範例，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未帶入變數</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.links&#x27;</span>);</span><br><span class="line">el.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;&lt;li&gt;Google&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;Yahoo&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/&quot;&gt;Youtube&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 帶入變數</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.links&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> myLink = <span class="string">&#x27;https://www.youtube.com/&#x27;</span>;</span><br><span class="line">el.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;&lt;li&gt;Google&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;Yahoo&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href=<span class="subst">$&#123;myLink&#125;</span>&gt;Youtube&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h3><p>透過 setAttribute 可設定 HTML 標籤中的屬性，格式為 <code>setAttribute(&#39;標籤屬性&#39;,&#39;屬性內容&#39;)</code>，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-class">.text-primary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> myLink = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.link&#x27;</span>);</span><br><span class="line">myLink.setAttribute(<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;https://www.google.com/&#x27;</span>);</span><br><span class="line">myLink.setAttribute(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="取得節點內容"><a href="#取得節點內容" class="headerlink" title="取得節點內容"></a>取得節點內容</h3><p>前面介紹到的 textContent、innerHTML、setAttribute 都是屬於寫入內容，若要取得內容可以使用以下做法：</p>
<p><strong>取得標籤中的純文字</strong></p>
<p>textContent 可寫入純文字，也可以取得標籤中的純文字內容，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.title&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el.textContent); <span class="comment">// 取得 h1 標籤中的純文字內容</span></span><br><span class="line"><span class="comment">// 輸出結果為 Title</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>透過 textContent 所寫入的純文字，也可透過上述方式來取得純文字內容。</p>
</blockquote>
<p><strong>取得 HTML 標籤</strong></p>
<p>innerHTML 可寫入標籤，同時也可以取得標籤，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Yahoo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Youtube<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.links&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el.innerHTML); <span class="comment">// 取得 .links 區塊中的標籤內容</span></span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li&gt;Google&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li&gt;Yahoo&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;li&gt;Youtube&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>透過 innerHTML 所寫入的標籤，也可透過上述方式來取得標籤內容。</p>
</blockquote>
<p><strong>取得標籤屬性內容</strong></p>
<p>標籤屬性相關內容可透過 getAttribute 來取得，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.com/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.link&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el.getAttribute(<span class="string">&#x27;href&#x27;</span>)); <span class="comment">// 取得 a 標籤的 href 屬性內容</span></span><br><span class="line"><span class="built_in">console</span>.log(el.getAttribute(<span class="string">&#x27;class&#x27;</span>)); <span class="comment">// 取得 a 標籤的 class 屬性名稱</span></span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &#x27;https://www.google.com/&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;link&#x27;</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h3 id="表單值取得與修改"><a href="#表單值取得與修改" class="headerlink" title="表單值取得與修改"></a>表單值取得與修改</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文字內容&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;高雄&quot;</span>&gt;</span>高雄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;台北&quot;</span>&gt;</span>台北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>取得表單值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> el2 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#city&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el.value, el2.value);</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;文字內容&#x27; &#x27;高雄&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改表單值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">el.value = <span class="string">&#x27;修改後的文字內容&#x27;</span>; <span class="comment">// 重新賦予 .txt 的 value 值</span></span><br><span class="line"><span class="keyword">const</span> el2 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#city&#x27;</span>);</span><br><span class="line">el2.value = <span class="string">&#x27;台北&#x27;</span>; <span class="comment">// 變更預設顯示的值</span></span><br></pre></td></tr></table></figure>

<h3 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a>nodeName</h3><p>透過 nodeName 可以回傳目前 DOM 的節點名稱，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(btn.nodeName);</span><br><span class="line"><span class="comment">// 輸出結果為 BUTTON</span></span><br></pre></td></tr></table></figure>

<h3 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h3><p>如果是針對 class 的屬性值，可以透過 classList 來達成某些動作，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkBox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check active&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkBox = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;checkBox&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(checkBox.classList);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 0: &quot;check&quot;</span></span><br><span class="line"><span class="comment">// 1: &quot;active&quot;</span></span><br><span class="line"><span class="comment">// length: 2</span></span><br><span class="line"><span class="comment">// value: &quot;check active&quot;</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p><strong>新增 class</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkBox.classList.add(<span class="string">&#x27;className&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>移除 class</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkBox.classList.remove(<span class="string">&#x27;className&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>切換 class</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkBox.classList.toggle(<span class="string">&#x27;className&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述 toggle 會根據 class 名稱是否存在來執行動作，有就移除該類別名稱，沒有則是加入。</p>
</blockquote>
<p>此外，classList 也能搭配 contains 來判斷 class 列表中，是否存在指定的<strong>一個</strong>類別名稱，以前面範例來說，結果如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(checkBox.classList.contains(<span class="string">&#x27;active&#x27;</span>));</span><br><span class="line"><span class="comment">// 輸出結果為 true</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="event-事件"><a href="#event-事件" class="headerlink" title="event 事件"></a>event 事件</h2><p>event 表示在一個 DOM 元素上所觸發的事件，像常見的滑鼠點擊就屬於事件的一種，其他事件可參考此<a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">連結</a>。</p>
<h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><p>DOM 的觸發事件可以透過 addEventListener() 方法來進行註冊，而該方法會有三個參數，分別是事件名稱、觸發後執行的函式、捕獲或冒泡階段的執行（在此不做說明），以點擊事件 <code>click</code> 為例，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">// 註冊事件監聽</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;已被點擊&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 觸發事件時輸出結果為 已被點擊</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>事件監聽中的函式僅在事件觸發後才會執行。</p>
</blockquote>
<p>事件監聽中的函式，會帶入一個參數 <code>e</code>（event），而這個參數的結構是一個物件，主要是存放與該事件有關的所有屬性與其相關資訊，以前面範例來說，當事件觸發時，回傳結果如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">PointerEvent &#123;<span class="attr">isTrusted</span>: <span class="literal">true</span>, <span class="attr">pointerId</span>: <span class="number">0</span>, <span class="attr">width</span>: <span class="number">1</span>, <span class="attr">height</span>: <span class="number">1</span>, <span class="attr">pressure</span>: <span class="number">0</span>, …&#125;</span><br></pre></td></tr></table></figure>

<p>因為是物件的關係，也可以指定想要顯示的資訊，如事件觸發後，回傳觸發事件的 DOM 當前位置，做法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 觸發事件時輸出結果為 &lt;button type=&quot;button&quot; class=&quot;btn&quot;&gt;Button&lt;/button&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="觸發事件目標"><a href="#觸發事件目標" class="headerlink" title="觸發事件目標"></a>觸發事件目標</h3><p>在上個範例有提到，事件監聽中的函式所帶入的參數 <code>e</code> 會回傳一個紀錄所有相關屬性的物件，而其中的屬性 <code>target</code> 代表觸發事件的元素位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 觸發事件時輸出結果為 &lt;button type=&quot;button&quot; class=&quot;btn&quot;&gt;Button&lt;/button&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="範圍取值"><a href="#範圍取值" class="headerlink" title="範圍取值"></a>範圍取值</h3><p>在項目較多的情情形下，如果都針對個別元素進行事件監聽，程式碼可能會較為繁雜，因此有時候會希望一個範圍內的所有元素都能夠觸發事件，做法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-1&quot;</span>&gt;</span>item-1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-2&quot;</span>&gt;</span>item-2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-3&quot;</span>&gt;</span>item-3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item-4&quot;</span>&gt;</span>item-4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> els = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list&#x27;</span>); <span class="comment">// 監聽整個 ul 範圍</span></span><br><span class="line">els.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target); <span class="comment">// 輸出觸發對象的純文字內容</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 觸發事件時輸出結果 ----</span></span><br><span class="line"><span class="comment">// 點擊 item-1 範圍時，輸出結果為 &lt;li class=&quot;item-1&quot;&gt;item-1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// 點擊 item-2 範圍時，輸出結果為 &lt;li class=&quot;item-2&quot;&gt;item-2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// 點擊 item-3 範圍時，輸出結果為 &lt;li class=&quot;item-3&quot;&gt;item-3&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// 點擊 item-4 範圍時，輸出結果為 &lt;li class=&quot;item-4&quot;&gt;item-4&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>從上方範例可得知，因為事件監聽的範圍為整個 <code>ul</code>，因此當範圍內的不同元素所佔有的範圍被點擊時，輸出的結果也會對應到不同的內容。</p>
<p><strong>範例一</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Button&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line">list.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.target.nodeName == <span class="string">&#x27;INPUT&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;點擊到按鈕&#x27;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;未點擊到按鈕&#x27;</span>, <span class="string">`目前點擊的對象是 <span class="subst">$&#123;e.target.nodeName&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如上述範例，事件監聽範圍為 <code>.list</code> 區塊，當範圍內點擊事件觸發時，判斷觸發對象的節點名稱是否為 <code>INPUT</code> 而輸出對應的內容。</p>
<p><strong>範例二</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;點擊到按鈕&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.item&#x27;</span>);</span><br><span class="line">item.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.target.getAttribute(<span class="string">&#x27;class&#x27;</span>) == <span class="string">&#x27;btn&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.getAttribute(<span class="string">&#x27;value&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上述範例則是透過 <code>getAttribute</code> 來判斷點擊到的元素標籤屬性 <code>class</code> 值是否為 <code>btn</code>，若是才會執行下方程式碼。</p>
<p><strong>範例三</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Title-1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按鈕1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Title-2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按鈕2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Title-3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按鈕3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">const</span> itemList = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.item-list&#x27;</span>);</span><br><span class="line">itemList.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.target.getAttribute(<span class="string">&#x27;class&#x27;</span>) !== <span class="string">&#x27;btn&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.getAttribute(<span class="string">&#x27;value&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上述範例同理範例二，只是判斷條件變成點擊到的元素標籤屬性 <code>class</code> 值若不是 <code>btn</code>，則中斷程式碼。</p>
<h3 id="data-屬性取值"><a href="#data-屬性取值" class="headerlink" title="data- 屬性取值"></a>data- 屬性取值</h3><p>有些時候可能會額外加入一些需要使用的自訂屬性名稱，而為了讓這類型的屬性名稱達到通用，HTML5 新增了 <code>data-</code> 的屬性，格式為 <code>data-自訂名稱=&#39;自訂值&#39;</code>，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-order</span>=<span class="string">&quot;1&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-order</span>=<span class="string">&quot;2&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-order</span>=<span class="string">&quot;3&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line">list.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.target.nodeName == <span class="string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.getAttribute(<span class="string">&#x27;data-order&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>補充知識：有時候會在 html 標籤中埋入 <code>data-id</code> 屬性，而該屬性通常會對應陣列中每筆物件的 id 類型屬性，為了確保每個 id 的獨一無二，可以使用 Date 物件的方式來達成，做法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 不同時間生成的物件，id 值都不同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Date 物件儲存了世界標準時間（UTC）自 1979/01/01 開始至今的時間，以毫秒單位儲存，透過上述方式可以取得不同的時間戳，因此適合做為 id 使用，相關內容可參考此<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date">文章</a>。</p>
</blockquote>
<h3 id="closest-最近節點"><a href="#closest-最近節點" class="headerlink" title="closest 最近節點"></a>closest 最近節點</h3><p>有時候可能會因為 HTML 結構較複雜（層數較多）導致 <code>e.target</code> 無法選取到指定的元素，此時透過 <code>closest</code> 就能夠取得距離該元素最近的指定節點，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>項目<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> listItem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list li&#x27;</span>);</span><br><span class="line">listItem.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target);</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.closest(<span class="string">&#x27;.list&#x27;</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.closest(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 點擊時輸出結果 ----</span></span><br><span class="line"><span class="comment">// &lt;a&gt;項目&lt;/a&gt;</span></span><br><span class="line"><span class="comment">// &lt;ul class=&quot;list&quot;&gt;...&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">// &lt;li&gt;&lt;a&gt;項目&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p><strong>應用範例 - 簡易 todolist</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入代辦事項&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;save&quot;</span> <span class="attr">value</span>=<span class="string">&quot;新增代辦事項&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;p&gt;待辦事項&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;button&quot; class=&quot;delete&quot; value=&quot;刪除&quot;&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> save = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.save&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.list&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   content: &quot;待辦事項&quot;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 初始畫面渲染</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.list&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    str += <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;li&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;<span class="subst">$&#123;item.content&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;button&quot; class=&quot;delete&quot; data-id=&quot;<span class="subst">$&#123;item.id&#125;</span>&quot; value=&quot;刪除&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  list.innerHTML = str;</span><br><span class="line">&#125;</span><br><span class="line">renderData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增邏輯</span></span><br><span class="line">save.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (txt.value == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> addData = &#123;&#125;;</span><br><span class="line">  addData.content = txt.value;</span><br><span class="line">  addData.id = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime().toString();</span><br><span class="line">  data.push(addData);</span><br><span class="line">  renderData(); <span class="comment">// 新增資料後再次渲染畫面</span></span><br><span class="line">  txt.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除邏輯</span></span><br><span class="line">list.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.target.nodeName !== <span class="string">&quot;INPUT&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> deleteId = data.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> item.id === e.target.dataset.id); <span class="comment">// 取得刪除資料的索引值</span></span><br><span class="line">  data.splice(deleteId, <span class="number">1</span>);</span><br><span class="line">  renderData(); <span class="comment">// 刪除資料後再次渲染畫面</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>以上範例使用了先前提到的範圍取值方式來進行事件監聽，並且透過 <code>findIndex</code> 取得自訂屬性 <code>data-id</code> 值，再透過 <code>splice</code> 達到刪除點擊的項目，呈現結果如下：</p>
<iframe src="https://codepen.io/Cliff_hex/embed/BarBpVd?default-tab=resault" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe>


<h3 id="取消默認行為"><a href="#取消默認行為" class="headerlink" title="取消默認行為"></a>取消默認行為</h3><p>HTML 標籤會存在一些默認行為，以 a 標籤來說，點擊標籤的連結會跳轉到指定的頁面就屬於一種默認的行為，如果要避免這些行為的話，可以使用 <code>e.preventDefault()</code> 方法來達成，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.com/&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">link.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;未跳轉新頁面&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 當點擊 a 標籤時，網頁不會跳轉，且輸出結果為 &#x27;未跳轉新頁面&#x27;</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="迴圈-陣列操作"><a href="#迴圈-陣列操作" class="headerlink" title="迴圈/陣列操作"></a>迴圈/陣列操作</h2><p>相同性質的資料若資料筆數過多，通常會透過迴圈迭代的方式，來重複執行相同的動作以取得或組合資料內容，而迴圈常聽到的迭代指的是重複過程的意思，一次迭代表示一次的重複過程。</p>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++ )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( i );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，<code>for</code> 小括號的三個項目依序分別表示<strong>初始狀態</strong>、<strong>執行條件</strong>、<strong>變更值</strong>，在此宣告一個變數 <code>i</code> 初始值為 <code>0</code>，當 <code>i</code> 值小於 <code>3</code> 的判斷結果為 <code>true</code> 時，執行大括號中的內容，每執行完一次 <code>i</code> 值 <code>+1</code>，接著運行第二次直到不滿足執行條件為止。</p>
<blockquote>
<p>for 迴圈的小括號中使用 <code>var</code> 宣告變數 <code>i</code> 時，該變數會屬於全域變數。</p>
</blockquote>
<h4 id="for-陣列操作範例"><a href="#for-陣列操作範例" class="headerlink" title="for 陣列操作範例"></a>for 陣列操作範例</h4><p><strong>情境一</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：列出所有種類的水果名稱</span></span><br><span class="line"><span class="keyword">let</span> fruitDetail = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Apple&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">30</span>,</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> fruitNum = fruitDetail.length;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;fruitNum; i++ )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( fruitDetail[i].name );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// Apple</span></span><br><span class="line"><span class="comment">// banana</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p><strong>情境二</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情境：加總所有學校的學生人數</span></span><br><span class="line"><span class="keyword">let</span> school = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;學校A&#x27;</span>,</span><br><span class="line">        <span class="attr">studentNum</span>: <span class="number">35</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;學校B&#x27;</span>,</span><br><span class="line">        <span class="attr">studentNum</span>: <span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> schoolNum = school.length;</span><br><span class="line"><span class="keyword">let</span> studentTotal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;schoolNum; i++ )&#123;</span><br><span class="line">    studentTotal += school[i].studentNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">`全部學生總共有<span class="subst">$&#123;studentTotal&#125;</span>人`</span> );</span><br><span class="line"><span class="comment">// 輸出結果為 全部學生總共有67人</span></span><br></pre></td></tr></table></figure>

<p><strong>情境三</strong></p>
<p>加入 if 條件判斷</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：列出正在下雨的城市</span></span><br><span class="line"><span class="keyword">let</span> cityStatus = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;高雄&#x27;</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="string">&#x27;晴天&#x27;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;台南&#x27;</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="string">&#x27;下雨&#x27;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;台北&#x27;</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="string">&#x27;下雨&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> cityNum = cityStatus.length;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;cityNum; i++ )&#123;</span><br><span class="line">    <span class="keyword">if</span>( cityStatus[i].state == <span class="string">&#x27;下雨&#x27;</span> )&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;cityStatus[i].city&#125;</span>天氣為雨天`</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 台南天氣為雨天</span></span><br><span class="line"><span class="comment">// 台北天氣為雨天</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<h4 id="break-中斷迴圈"><a href="#break-中斷迴圈" class="headerlink" title="break 中斷迴圈"></a>break 中斷迴圈</h4><p>若希望 for 迴圈在執行過程中當滿足了某些條件後，就終止迴圈執行，可以使用 <code>break</code> 來中斷動作，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：集點活動，找出最先累積滿 100 點的人</span></span><br><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">        <span class="attr">points</span>: <span class="number">89</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Vivian&#x27;</span>,</span><br><span class="line">        <span class="attr">points</span>: <span class="number">102</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Leo&#x27;</span>,</span><br><span class="line">        <span class="attr">points</span>: <span class="number">115</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;people.length; i++ )&#123;</span><br><span class="line">    <span class="keyword">if</span>( people[i].points &gt;= <span class="number">100</span> )&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`最先累積滿100點的人是<span class="subst">$&#123;people[i].name&#125;</span>，總共有<span class="subst">$&#123;people[i].points&#125;</span>點!`</span> );</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 迴圈運行到第2筆時達成條件，因此終止迴圈</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果為 最先累積滿100點的人是Vivian，總共有102點!</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>範例中若未加上 <code>break</code>，則輸出結果會列出所有滿足 <code>points &gt;= 100</code> 的內容，而 break 僅能在 for 迴圈中使用。</p>
</blockquote>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index, array);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;結束迴圈&#x27;</span>);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// red 1 (3) [&#x27;blue&#x27;, &#x27;red&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"><span class="comment">// green 2 (3) [&#x27;blue&#x27;, &#x27;red&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"><span class="comment">// blue 0 (3) [&#x27;blue&#x27;, &#x27;red&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"><span class="comment">// 結束迴圈</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，第 3 行的部分可以看到 <code>forEach()</code> 會放入一個函式，而這個函式的執行次數，會根據陣列中的資料筆數而定，以範例來說，<code>data</code> 陣列中的資料總共有三筆，因此會執行三次，接著該函式可以帶入三個變數，分別表示<strong>當前對象的值</strong>、<strong>索引值</strong>、<strong>陣列中所有資料</strong>，直到陣列中的所有資料都執行完畢後，才會接著執行下方的程式碼。</p>
<blockquote>
<p>forEach 無法被 return 等語法中斷（無法中斷迴圈執行）。</p>
</blockquote>
<h4 id="forEach-陣列操作範例"><a href="#forEach-陣列操作範例" class="headerlink" title="forEach 陣列操作範例"></a>forEach 陣列操作範例</h4><p><strong>範例一</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 數值累加</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">10</span>,<span class="number">5</span>,<span class="number">30</span>,<span class="number">12</span>];</span><br><span class="line"><span class="keyword">let</span> calcNum = <span class="number">0</span>;</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  calcNum += item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(calcNum);</span><br><span class="line"><span class="comment">// 輸出結果為 57</span></span><br></pre></td></tr></table></figure>

<p>如上述範例所示，宣告變數 <code>calcNum</code> 且值為 <code>0</code>，此時當 <code>data</code> 透過 <code>forEach</code> 執行第一次時，變數 <code>calcNum</code> 的值會加上陣列 <code>data</code> 中的第一個數值 <code>10</code>，接著相同的動作再進行第二次，依此類推，最終完成迴圈後的加總結果為 <code>57</code>。</p>
<p>接下來的範例邏輯大同小異，因此不另外做說明。</p>
<p><strong>範例二</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 計算 data 中所有偶數的加總</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">let</span> evenTotal = <span class="number">0</span>;</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( item % <span class="number">2</span> == <span class="number">0</span> ) &#123;</span><br><span class="line">    evenTotal  += item;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(evenTotal);</span><br><span class="line"><span class="comment">// 輸出結果為 30</span></span><br></pre></td></tr></table></figure>

<p><strong>範例三</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加總所有學校的學生人數</span></span><br><span class="line"><span class="keyword">let</span> school = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;學校A&quot;</span>,</span><br><span class="line">    <span class="attr">studentNum</span>: <span class="number">35</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;學校B&quot;</span>,</span><br><span class="line">    <span class="attr">studentNum</span>: <span class="number">32</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> studentTotal = <span class="number">0</span>;</span><br><span class="line">school.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  studentTotal += item.studentNum;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(studentTotal);</span><br><span class="line"><span class="comment">// 輸出結果為 67</span></span><br></pre></td></tr></table></figure>

<p><strong>範例四</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 計算及格與不及格人數</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Marry&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;girl&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">85</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Leo&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">59</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alvin&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">90</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">48</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sophia&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;girl&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">75</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> boyPass = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> girlPass = <span class="number">0</span>;</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( item.sex == <span class="string">&#x27;boy&#x27;</span> &amp;&amp; item.score &gt;= <span class="number">60</span> ) &#123;</span><br><span class="line">    boyPass ++;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>( item.sex == <span class="string">&#x27;girl&#x27;</span> &amp;&amp; item.score &gt;= <span class="number">60</span> )&#123;</span><br><span class="line">    girlPass ++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`男生及格人數 <span class="subst">$&#123;boyPass&#125;</span> 人，女生及格人數 <span class="subst">$&#123;girlPass&#125;</span> 人`</span>);</span><br><span class="line"><span class="comment">// 輸出結果為 男生及格人數 1 人，女生及格人數 2 人</span></span><br></pre></td></tr></table></figure>

<p><strong>範例五</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 篩選出免費與投幣式的充電站</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;A充電站&#x27;</span>,</span><br><span class="line">    <span class="attr">charge</span>: <span class="string">&#x27;投幣式&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;B充電站&#x27;</span>,</span><br><span class="line">    <span class="attr">charge</span>: <span class="string">&#x27;投幣式&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;C充電站&#x27;</span>,</span><br><span class="line">    <span class="attr">charge</span>: <span class="string">&#x27;免費&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> newData = &#123; <span class="comment">// 整合新的資料</span></span><br><span class="line">  <span class="attr">pay</span>: [],</span><br><span class="line">  <span class="attr">free</span>: []</span><br><span class="line">&#125;;</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( item.charge == <span class="string">&#x27;投幣式&#x27;</span> ) &#123;</span><br><span class="line">    newData.pay.push(item.name);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    newData.free.push(item.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newData);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`收費充電站總共 <span class="subst">$&#123;newData.pay.length&#125;</span> 個，免費充電站總共 <span class="subst">$&#123;newData.free.length&#125;</span> 個`</span>);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// &#123;pay: Array(2), free: Array(1)&#125;</span></span><br><span class="line"><span class="comment">// free: [&#x27;C充電站&#x27;]</span></span><br><span class="line"><span class="comment">// pay: (2) [&#x27;A充電站&#x27;, &#x27;B充電站&#x27;]</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// 收費充電站總共 2 個，免費充電站總共 1 個</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p><strong>範例六</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">let</span> cityStatus = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;高雄&quot;</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="string">&quot;晴天&quot;</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;台南&quot;</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="string">&quot;下雨&quot;</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;台北&quot;</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="string">&quot;下雨&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 初始化（預設載入）</span></span><br><span class="line">  <span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  cityStatus.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.city&#125;</span>目前<span class="subst">$&#123;item.state&#125;</span>。&lt;/li&gt;`</span></span><br><span class="line">   	str += content;</span><br><span class="line">  &#125;);</span><br><span class="line">  list.innerHTML = str;</span><br><span class="line">  <span class="built_in">console</span>.log(list.textContent); <span class="comment">// 測試</span></span><br><span class="line">&#125;</span><br><span class="line">init(); <span class="comment">// 網頁載入時執行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出結果為 高雄目前晴天。台南目前下雨。台北目前下雨。</span></span><br></pre></td></tr></table></figure>

<p>有時候會希望網頁載入時，某些程式碼就立即執行（如載入伺服器資料等），即初始化，此時可以參考上述範例 <code>init()</code> 的做法。</p>
<blockquote>
<p> 大部分的陣列處理方法都會回傳一個結果，而 forEach 不會。</p>
</blockquote>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 原陣列</span></span><br><span class="line"><span class="keyword">const</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123; <span class="comment">// 產生的新陣列</span></span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, newArr);</span><br><span class="line"><span class="comment">// 輸出結果為 [1, 2, 3] [5, 10, 15]</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>map</code> 在處理陣列時，會將原始陣列中的內容經過逐一運算並<strong>回傳結果</strong>，再將運算結果重新組合一個新的陣列，因此兩陣列長度會相同，如上述範例，將原陣列 <code>arr</code> 進行 <code>map</code> 陣列處理後所回傳的結果，賦予至新的陣列 <code>newArr</code> 中，而原陣列並沒有變化。</p>
<h4 id="map-陣列操作範例"><a href="#map-陣列操作範例" class="headerlink" title="map 陣列操作範例"></a>map 陣列操作範例</h4><p><strong>範例一</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將原陣列判斷後的結果賦予至物件中，並重組成新陣列</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">20</span>, <span class="number">18</span>, <span class="number">28</span>];</span><br><span class="line"><span class="keyword">const</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> calcNum = &#123;&#125;;</span><br><span class="line">  calcNum.result = item &gt; <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">return</span> calcNum;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// 輸出結果為 [&#123;result: false&#125;, &#123;result: false&#125;, &#123;result: ture&#125;]</span></span><br></pre></td></tr></table></figure>

<p>補充說明：<code>map</code> 與 <code>forEach</code> 雖然都是陣列處理的方法，但是以 <code>map</code> 來說，需要使用 <code>return</code> 來回傳計算後的結果，即使不加上 <code>return</code> 也會回傳 <code>undefined</code>；而 <code>forEach</code> 無法使用 <code>return</code>，換句話說就是<strong>不會回傳任何東西</strong>，因此上述範例若改用 <code>forEach</code> 來處理陣列，會因為陣列本身並沒有被賦予值，所以輸出結果會是 <code>undefined</code>。</p>
<p>以使用時機來說，<code>forEach</code> 較適合用於需要逐一將陣列中的內容進行運算，或是組合成自訂的資料格式（HTML、物件等）時，但若是需要一個所有元素皆為原陣列回傳運算結果的新陣列，則較適合使用 <code>map</code>。</p>
<p><strong>範例二</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將原陣列的價格進行運算後新增屬性，並賦予至新陣列中</span></span><br><span class="line"><span class="keyword">const</span> foodList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;豚骨拉麵&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">130</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;親子丼飯&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> newList = foodList.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  item.newPrice = item.price * <span class="number">0.8</span>; <span class="comment">// 新增屬性</span></span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newList);</span><br><span class="line"><span class="comment">// 輸出結果為 [&#123;name: &#x27;豚骨拉麵&#x27;, price: 130, newPrice: 104&#125;, &#123;name: &#x27;親子丼飯&#x27;, price: 80, newPrice: 64&#125;]</span></span><br></pre></td></tr></table></figure>

<h4 id="join-陣列轉字串"><a href="#join-陣列轉字串" class="headerlink" title="join 陣列轉字串"></a>join 陣列轉字串</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;Red&#x27;</span>, <span class="string">&#x27;Green&#x27;</span>, <span class="string">&#x27;Blue&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.join(), arr.join(<span class="string">&#x27;&#x27;</span>), arr.join(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// Red,Green,Blue   // 不加入任何內容（預設為 &quot;,&quot;）</span></span><br><span class="line"><span class="comment">// RedGreenBlue     // 加入空字串</span></span><br><span class="line"><span class="comment">// Red-Green-Blue   // 加入 &quot;-&quot; 符號</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p><code>join()</code> 可將陣列中的分隔符號更改為自訂的內容，並將該陣列轉換為一個字串，格式為 <code>array.jion(分隔符號/其他內容)</code>，預設（不加入任何內容）為半形逗號。</p>
<p><strong>範例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> foodList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;豚骨拉麵&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">130</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;親子丼飯&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> newList = foodList.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  item.newPrice = item.price * <span class="number">0.8</span>; <span class="comment">// 新增屬性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.name&#125;</span> 目前特價 <span class="subst">$&#123;item.newPrice&#125;</span> 元&lt;/li&gt;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line">list.innerHTML = newList; <span class="comment">// 渲染到頁面中</span></span><br><span class="line"><span class="built_in">console</span>.log(newList);</span><br><span class="line"><span class="comment">// 輸出結果為 [&#x27;&lt;li&gt;豚骨拉麵 目前特價 104 元&lt;/li&gt;&#x27;, &#x27;&lt;li&gt;親子丼飯 目前特價 64 元&lt;/li&gt;&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>以上範例將原陣列 <code>foodList</code> 中每筆資料的屬性 <code>price</code> 進行運算，並重組成一個新陣列 <code>newList</code>，最後希望將新陣列的內容組成字串，並透過 <code>innerHTML</code> 渲染到網頁上，但是如輸出結果所示，<code>map</code> 會產生一個陣列，因此每個項目之間會存在半形逗號，而這些逗號也會跟著被渲染到網頁中，此時就能使用 <code>join</code> 方法來將陣列轉為字串 。</p>
<p>在上述範例 <code>map</code> 方法末端加入 <code>.join(&#39;&#39;)</code>，做法如下所示，此時陣列 <code>newList</code> 中的所有半形逗號就會替換為空字串，而陣列本身也會被轉為一個字串，在渲染頁面時便不會出現半形逗號。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newList = foodList.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  item.newPrice = item.price * <span class="number">0.8</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.name&#125;</span> 目前特價 <span class="subst">$&#123;item.newPrice&#125;</span> 元&lt;/li&gt;`</span>;</span><br><span class="line">&#125;).join(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 陣列轉字串</span></span><br><span class="line">list.innerHTML = newList;</span><br><span class="line"><span class="built_in">console</span>.log(newList);</span><br><span class="line"><span class="comment">// 輸出結果為 &#x27;&lt;li&gt;豚骨拉麵 目前特價 104 元&lt;/li&gt;&lt;li&gt;親子丼飯 目前特價 64 元&lt;/li&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Marry&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">85</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Leo&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">59</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alvin&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">90</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> newData = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.score &gt;= <span class="number">60</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newData);</span><br><span class="line"><span class="comment">// 輸出結果為 [&#123;name: &#x27;Marry&#x27;, score: 85&#125;, &#123;name: &#x27;Alvin&#x27;, score: 90&#125;]</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>filter</code> 在處理陣列時，會將原陣列進行<strong>條件判斷</strong>並回傳為 <code>true</code> 的項目，再將這些項目組合成一個新陣列且不影響原陣列，如上述範例，篩選出符合條件的學生，並組成新陣列 <code>newData</code>，因此 <code>filter</code> 適合使用在需要針陣列中的項目進行條件篩選的情況下。</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Marry&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">85</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Leo&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">59</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alvin&#x27;</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="number">90</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> newData = data.find(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.score &gt;= <span class="number">60</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newData);</span><br><span class="line"><span class="comment">// 輸出結果為 [&#123;name: &#x27;Marry&#x27;, score: 85&#125;]</span></span><br></pre></td></tr></table></figure>

<p>前面提到 <code>filter</code> 會回傳原陣列所有符合條件的項目並組合成新陣列，而 <code>find</code> 與 <code>filter</code> 相似，差別在於 <code>find</code> <strong>只回傳一次</strong>結果，並且是原陣列中<strong>第一筆</strong>為 <code>true</code> 的項目，如上述範例，雖然 <code>item[0]</code>、<code>item[2]</code> 都符合 <code>&gt;=60</code> 條件，但是從輸出結果中可以發現，僅 <code>item[0]</code> 有被回傳。</p>
<h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Marry&#x27;</span>,</span><br><span class="line">    <span class="attr">product</span>: <span class="string">&#x27;茄子&#x27;</span>,</span><br><span class="line">    <span class="attr">orderNum</span>: <span class="number">130450</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Leo&#x27;</span>,</span><br><span class="line">    <span class="attr">product</span>: <span class="string">&#x27;榴槤&#x27;</span>,</span><br><span class="line">    <span class="attr">orderNum</span>: <span class="number">100257</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alvin&#x27;</span>,</span><br><span class="line">    <span class="attr">product</span>: <span class="string">&#x27;三色豆&#x27;</span>,</span><br><span class="line">    <span class="attr">orderNum</span>: <span class="number">100595</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> orderId = data.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.orderNum == <span class="string">&#x27;100595&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`索引值為 <span class="subst">$&#123;orderId&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`顧客姓名 <span class="subst">$&#123;data[orderId].name&#125;</span>，購買品項 <span class="subst">$&#123;data[orderId].product&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 索引值為 2</span></span><br><span class="line"><span class="comment">// 顧客姓名 Alvin，購買品項 三色豆</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p><code>findIndex</code> 與 <code>find</code> 兩者都<strong>只回傳一次</strong>結果，且回傳原陣列中<strong>第一筆</strong>符合判斷條件（為 true）的項目，差別在於 <code>findIndex</code> 只回傳該項目的<strong>索引值</strong>，如上述範例所示，透過判斷訂單編號來回傳對應的索引值，並根據索引值取得其他相關屬性內容。</p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">const</span> num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> totalNum = num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator, currentValue, currentIndex, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// accumulator：  每次迭代/累加的回傳值</span></span><br><span class="line">  <span class="comment">// currentValue： 當前迭代的項目</span></span><br><span class="line">  <span class="comment">// accumulator：  當前迭代的項目索引值（可有可無）</span></span><br><span class="line">  <span class="comment">// array：        陣列本身（可有可無）</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`累加值 <span class="subst">$&#123;accumulator&#125;</span>，當前值 <span class="subst">$&#123;currentValue&#125;</span>，回傳結果 <span class="subst">$&#123;currentValue + accumulator&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;) <span class="comment">// initialValue：初始值/第一次傳入 accumulator 的值（可有可無/預設為陣列第一筆項目）</span></span><br><span class="line"><span class="built_in">console</span>.log(totalNum);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 累加值 1，當前值 2，回傳結果 3</span></span><br><span class="line"><span class="comment">// 累加值 3，當前值 3，回傳結果 6</span></span><br><span class="line"><span class="comment">// 累加值 6，當前值 4，回傳結果 10</span></span><br><span class="line"><span class="comment">// 累加值 10，當前值 5，回傳結果 15</span></span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>先前提到的陣列處理方法（<code>map</code>、<code>filter</code> 等）都是回傳一個陣列，相較之下 <code>reduce</code> 方法在邏輯與結構都有較大的差異，<code>reduce</code> 會回傳一個值而非陣列，而 <code>reduce</code> 能讓每次迭代回傳的值再次運算。</p>
<p>如上述範例，<code>reduce</code> 需要代入兩個參數 <code>accumulator</code> 與 <code>currentValue</code>，分別表示<strong>累計值</strong>與<strong>當前的項目</strong>，範例中嘗試將陣列 <code>num</code> 中的所有值進行加總並回傳到變數 <code>totalNum</code>，過程中第 11 行的部分將兩個參數相加並 <code>return</code>，而這邊因為沒有加入初始值（<code>reduce</code> 函式結尾處）的關係，所以參數 <code>accumulator</code> 預設會代入陣列第一筆項目的值 <code>1</code>，此時因為參數 <code>currentValue</code> 會與前一個項目的值進行累加，前一個值取自第一筆項目，因此當前項目 <code>currentValue</code> 就會是第二筆，代入當前項目的值 <code>2</code> 之後，就開始進行第一次迴圈，運算的結果值會傳入累加值 <code>accumulator</code> 再以相同過程進行下一次迴圈，依此類推。</p>
<blockquote>
<p>可以理解成每次 <code>return</code> 的值都會傳入累計值 <code>accumulator</code> 當中，再以這個累計值執行下一次的迴圈，且累計值與當前項目兩者存在<strong>關聯性</strong>，詳細資訊可參考此<a href="https://www.casper.tw/javascript/2017/06/29/es6-native-array/#Array-prototype-reduce">文章</a>、<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">MDN</a>。</p>
</blockquote>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例：運作原理</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">17</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">15</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`比較 a: <span class="subst">$&#123;a&#125;</span>，b: <span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 比較 a: 3，b: 17</span></span><br><span class="line"><span class="comment">// 比較 a: 22，b: 3</span></span><br><span class="line"><span class="comment">// 比較 a: 15，b: 22</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p><code>sort</code> 可以將陣列中的項目進行排序，如果要針對<strong>數字</strong>進行排序，需要在括號中加入一個函式（compareFunction）與兩個參數，然後會根據兩個參數的回傳值來進行排序；從上述的輸出結果可以發現，函式中的參數位置 <code>a</code> 皆為順序在後的值、<code>b</code> 皆為順序在前的值，且每次都是後者去與前者進行比較，在參數 <code>a</code> 與 <code>b</code> 比較時，會根據以下邏輯來進行排序：</p>
<ul>
<li>若函式的回傳值小於 0，<code>a</code> 會排在 <code>b</code> 前面。</li>
<li>若函式的回傳值大於 0，<code>b</code> 會排在 <code>a</code> 前面。</li>
<li>若函式的回傳值為 0，<code>a</code> 與 <code>b</code> 位置不變（兩個相同值的排序位置，會根據瀏覽器而有所差異）。</li>
</ul>
<p>如此一來，在比較陣列中的數值時，就可以透過將兩個參數相減，並根據回傳的結果是正值或負值來自訂排序的順序。</p>
<p><strong>範例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 由小到大排序</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">17</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">const</span> newArr = arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span> - <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;a-b&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// 3 - 17 = -14 // 結果為負值，因此 a（17）排在 b（3）之前，後面依此類推。</span></span><br><span class="line"><span class="comment">// 22 - 3 = 19</span></span><br><span class="line"><span class="comment">// 22 - 17 = 5</span></span><br><span class="line"><span class="comment">// 15 - 17 = -2</span></span><br><span class="line"><span class="comment">// 15 - 3 = 12</span></span><br><span class="line"><span class="comment">// [3, 15, 17, 22]</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>上述輸出結果能看到每次在比較時，參數 <code>a</code> 與 <code>b</code> 所代入的值，且同時會根據回傳結果排序兩數值的前後順序。</p>
<blockquote>
<p>使用 <code>sort()</code> 時，若不加入 compareFunction，陣列中的數值會被轉換成字串，並以 Unicode 編碼位置進行比較來排序，本篇僅論數字的排序方法，相關內容可參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">MDN</a>。</p>
</blockquote>
<hr>
<h2 id="AJAX-簡述"><a href="#AJAX-簡述" class="headerlink" title="AJAX 簡述"></a>AJAX 簡述</h2><p>AJAX（Asynchronous JavaScript and XML）是一種非同步的 JavaScript 與 XML 技術，主要的功用是能夠讓網頁在更新內容時，不需要重新載入整個頁面，達到網址不需要變動就能夠更新局部內容效果。</p>
<h3 id="網路請求"><a href="#網路請求" class="headerlink" title="網路請求"></a>網路請求</h3><p>網路請求（HTTP Request）簡單來說，就是使用者向伺服器發出請求後，伺服器經驗證再從資料庫取得資料，並提供給使用者的過程。以瀏覽器來說，輸入網址並按下 Enter，就屬於網路請求的一種。</p>
<p>以下方原始碼為例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-hant&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;xxx/xxx/img.png&quot;</span>&gt;</span> <span class="comment">&lt;!-- 第二次請求 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./all.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 第三次請求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>當網址送出時，瀏覽器會向伺服器發出一次網路請求，若確認網址無誤，便會回傳資料庫內容給瀏覽器，接著開始載入並解析 HTML 結構，若存在如上述範例第 11 行的 <code>img</code> 圖片網址等相關內容，就會再發出一次請求，以上述範例來說，總共對伺服器發出三次網路請求。</p>
<blockquote>
<p>網路請求並非同時進行，以上述範例來說，是先載入 HTML 結構，再由上往下依序判斷程式碼。而網路請求的順序與相關內容可從開發人員工具 ➔ Network 查看（需重新整理頁面）。</p>
</blockquote>
<h3 id="狀態碼"><a href="#狀態碼" class="headerlink" title="狀態碼"></a>狀態碼</h3><p>HTTP 狀態碼是伺服器端回應請求結果的狀態，根據不同的請求結果所回應的狀態碼也會不同，常見的狀態碼如 200（請求成功）、404（伺服器找不到請求的資源）、500（伺服器端錯誤）等。</p>
<blockquote>
<p>狀態碼可從開發人員工具 ➔  Network ➔ Status 查看，HTTP 狀態碼相關內容可參考此<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status">連結</a>。</p>
</blockquote>
<h3 id="Request-Response"><a href="#Request-Response" class="headerlink" title="Request / Response"></a>Request / Response</h3><p>Request 即瀏覽器發出的請求，而 Response 為伺服器端回傳的內容，兩者的相關資訊可從開發人員工具 ➔ Network ➔ Headers 中查看，以瀏覽器發出請求的基本資訊來說，主要會記錄在 Request Headers 中，而伺服器端的回應資訊則是會記錄在 Response Headers 內。</p>
<p>除了請求與回傳的基本資訊外，伺服器端所回傳的主要資料內容，可以在開發人員工具 ➔ Network ➔ Response 中查看。</p>
<h3 id="JavaScript-網路請求"><a href="#JavaScript-網路請求" class="headerlink" title="JavaScript 網路請求"></a>JavaScript 網路請求</h3><p>JavaScript 可以使用原生寫法 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest">XMLHttpRequert</a>、<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch">Fetch</a>，或是透過套件 <a href="https://github.com/axios/axios">axios</a> 來發出網路請求，而本篇以 axios 來做說明。</p>
<h4 id="環境安裝"><a href="#環境安裝" class="headerlink" title="環境安裝"></a>環境安裝</h4><p><strong>NPM</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure>

<p><strong>CDN</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h4><p><strong>GET 請求</strong></p>
<p><code>get</code> 請求只應用於<strong>取得資料</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 網址來源為 JSONPlaceholder 假資料</span></span><br><span class="line">axios.get(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data); <span class="comment">// 主要資料內容</span></span><br><span class="line">    <span class="built_in">console</span>.log(response.status); <span class="comment">// 狀態碼</span></span><br><span class="line">    <span class="comment">// console.log(response.statusText);</span></span><br><span class="line">    <span class="comment">// console.log(response.headers);</span></span><br><span class="line">    <span class="comment">// console.log(response.config);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 回傳結果 ----</span></span><br><span class="line"><span class="comment">// &#123;data: &#123;…&#125;, status: 200, statusText: &#x27;&#x27;, headers: &#123;…&#125;, config: &#123;…&#125;, …&#125;</span></span><br><span class="line"><span class="comment">// config: &#123;transitional: &#123;…&#125;, transformRequest: Array(1), transformResponse: Array(1), timeout: 0, adapter: ƒ, …&#125;</span></span><br><span class="line"><span class="comment">// data: &#123;userId: 1, id: 1, title: &#x27;delectus aut autem&#x27;, completed: false&#125;</span></span><br><span class="line"><span class="comment">// headers: &#123;cache-control: &#x27;max-age=43200&#x27;, content-type: &#x27;application/json; charset=utf-8&#x27;, expires: &#x27;-1&#x27;, pragma: &#x27;no-cache&#x27;&#125;</span></span><br><span class="line"><span class="comment">// request: XMLHttpRequest &#123;onreadystatechange: null, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …&#125;</span></span><br><span class="line"><span class="comment">// status: 200</span></span><br><span class="line"><span class="comment">// statusText: &quot;&quot;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// 200</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>get</code> 發出請求時，第一個參數會帶入資料的網址，當伺服器的資料成功回傳時，<code>.then</code> 函式就會執行，而回傳資料的型態會整理成物件，並帶入參數 <code>response</code> 中，因此可透過點記法來取得屬性資料。</p>
<p>接著，嘗試將資料中的 <code>title</code> 屬性內容呈現在網頁上，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.title&#x27;</span>);</span><br><span class="line">    title.textContent = response.data.title;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>POST 請求</strong></p>
<p><code>post</code> 方法用於<strong>提交指定資料</strong>，以提供伺服器進行驗證，並依驗證結果成功與否回傳對應內容；當瀏覽器透過 <code>post</code> 發出請求或是接收伺服器回傳的資訊時，都會夾帶 headers 資訊（開發人員工具 ➔ Network ➔ Headers）以及 data 資料（開發人員工具 ➔ Network ➔ Payload）。</p>
<p>此外，data 的資料格式又有好幾種分別，常見的資料格式（Content-Type）如下：</p>
<ol>
<li>application/x-www-form-urlencoded</li>
<li>application/json</li>
<li>multipart/form-data</li>
<li>text/plain</li>
</ol>
<blockquote>
<p>axios 預設使用的資料格式為 application/json，本篇未記載其他資料格式與轉換方式（沒有研究），Content-Type 相關內容可參考此<a href="https://www.796t.com/article.php?id=192469">文章</a>。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios post 範例</span></span><br><span class="line">axios.post(url, &#123;  <span class="comment">// post(url, obj)</span></span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Amy&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Lin&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>若是透過 <code>post</code> 發出請求，則會帶入兩個參數，分別是網址與傳送至伺服器端的 data 資料（物件格式且屬性與伺服器相同），這個 data 會對應到瀏覽器發出請求時，所夾帶的 data 內容，而 <code>.then</code> 與 <code>.catch</code> 則分別會回傳請求成功或失敗的對應資訊。</p>
<p><strong>POST 應用範例</strong></p>
<p>下列為 <a href="https://github.com/hexschool/nodejs_ajax_tutorial">六角學院練習用 API</a>：</p>
<p><em><strong>註冊</strong></em> - 新增一個帳號</p>
<ul>
<li><p><strong>Method:</strong> <code>POST</code></p>
</li>
<li><p><strong>URL:</strong> <code>https://hexschool-tutorial.herokuapp.com/api/signup</code></p>
</li>
<li><p><strong>Data:</strong> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;lovef2e@hexschool.com&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Success Response:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;result&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;帳號註冊成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Error Response:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;result&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;此帳號已被使用&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em><strong>登入</strong></em> - 登入一個已存在的帳號</p>
<ul>
<li><p><strong>Method:</strong> <code>POST</code></p>
</li>
<li><p><strong>URL:</strong> <code>https://hexschool-tutorial.herokuapp.com/api/signin</code></p>
</li>
<li><p><strong>Data:</strong> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;lovef2e@hexschool.com&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Success Response:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;result&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;登入成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Error Response:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;result&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;此帳號不存在或帳號密碼錯誤&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在上述文件註冊或登入內文中，可以看到 Method（請求方法）、URL（伺服器網址路徑）、Data（傳送至伺服器的資料格式）、Success Response（請求成功的回傳內容）以及 Error Response（請求失敗的回傳內容）。</p>
<blockquote>
<p>不同伺服器的請求格式規範也會不同。</p>
</blockquote>
<p>以上述範例 API 為例，嘗試使用 axios 來進行註冊的 post 網路請求，如下所示：</p>
<p><strong>範例一</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;https://hexschool-tutorial.herokuapp.com/api/signup&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;testacc123@gmail.com&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;testpwd456&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">axios.post(url, data)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    .console.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 回傳結果 ----</span></span><br><span class="line"><span class="comment">// config: &#123;transitional: &#123;…&#125;, transformRequest: Array(1), transformResponse: Array(1), timeout: 0, adapter: ƒ, …&#125;</span></span><br><span class="line"><span class="comment">// data: &#123;success: true, result: &#123;…&#125;, message: &#x27;帳號註冊成功&#x27;&#125;</span></span><br><span class="line"><span class="comment">// headers: &#123;content-length: &#x27;59&#x27;, content-type: &#x27;application/json; charset=utf-8&#x27;&#125;</span></span><br><span class="line"><span class="comment">// request: XMLHttpRequest &#123;onreadystatechange: null, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …&#125;</span></span><br><span class="line"><span class="comment">// status: 200</span></span><br><span class="line"><span class="comment">// statusText: &quot;OK&quot;</span></span><br><span class="line"><span class="comment">// [[Prototype]]: Object</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>在上述回傳資訊中可以看到各種屬性與其對應的值，狀態碼 <code>200</code> 表示請求成功，其中物件 <code>data</code> 的值與範例 API 文件的 Success Response 內容相同。</p>
<p><strong>範例二</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;account&quot;</span>&gt;</span>帳號：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密碼：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;送出&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> account = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#account&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> password = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#password&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  callSignUp();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSignUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(account.value == <span class="string">&#x27;&#x27;</span> || password.value == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;帳號或密碼不得為空白！&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  data.email = account.value;</span><br><span class="line">  data.password = password.value;</span><br><span class="line">  </span><br><span class="line">  axios.post(<span class="string">&#x27;https://hexschool-tutorial.herokuapp.com/api/signup&#x27;</span>, data)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">    alert(response.data.message);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="axios-非同步觀念"><a href="#axios-非同步觀念" class="headerlink" title="axios 非同步觀念"></a>axios 非同步觀念</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line">axios.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    data.push(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(data, <span class="number">1</span>); <span class="comment">// 位置 1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(data, <span class="number">2</span>); <span class="comment">// 位置 2</span></span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// [] 2</span></span><br><span class="line"><span class="comment">// [&#123;…&#125;] 1</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>以上述範例來說，第 5 行將伺服器回傳的內容賦予至陣列 <code>data</code> 中，因此從位置一的輸出結果可以看到值有被賦予到陣列中，但是位置二的輸出結果卻是空陣列，而導致這種結果的原因是，當 axios 在發出網路請求時，為了避免資料過於龐大而導致網頁渲染出現延遲等問題，因此伺服器即使尚未將資料回傳至瀏覽器，後方程式碼依然會繼續執行，直到所有資料都回傳完畢，<code>.then</code> 的函式才會執行並將資料內容帶入變數 <code>response</code> 中，而從輸出結果也能看到，程式碼的執行順序是位置 2 ➔ 位置 1。</p>
<p><strong>透過函式處理非同步</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line">axios.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    data.push(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(data, <span class="number">1</span>); <span class="comment">// 位置 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;資料已回傳&#x27;</span>);</span><br><span class="line">    renderData();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data, <span class="number">2</span>); <span class="comment">// 位置 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果 ----</span></span><br><span class="line"><span class="comment">// [&#123;…&#125;] 1</span></span><br><span class="line"><span class="comment">// 資料已回傳</span></span><br><span class="line"><span class="comment">// [&#123;…&#125;] 2</span></span><br><span class="line"><span class="comment">// ----</span></span><br></pre></td></tr></table></figure>

<p>如上述範例所示，將位置 2 的程式碼透過函式 <code>renderData()</code> 包裝並寫入 <code>.then</code> 函式中，從輸出結果可看到執行順序為位置 1 ➔ 完成資料回傳 ➔ 位置 2，並且陣列 <code>data</code> 也成功被賦予值。</p>
<p>原因是 <code>.then</code> 函式會等待資料回傳到瀏覽器後才執行，而函式 <code>renderData()</code> 的執行位置也在函式 <code>.then</code> 之中，所以資料回傳後就會依序執行函式中的程式碼，如此一來，就能確保伺服器的資料回傳完畢後，程式碼能夠同步被執行。</p>
<p><strong>非同步處理範例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line">axios.get(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;資料已回傳&#x27;</span>);</span><br><span class="line">    dataTitle = response.data.title;</span><br><span class="line">    renderData();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> title = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.title&#x27;</span>);</span><br><span class="line">  title.textContent = dataTitle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述 JS 範例中， 因為函式 <code>renderData()</code> 位置在第 7 行，而函式 <code>.then</code> 在伺服器回傳資料給瀏覽器後就依序執行，換言之，函式 <code>renderData()</code> 會在 <code>dataTitle</code> 被賦予值（第 6 行）之後執行，因此第 11 行 <code>title</code> 才能正確讀取到 <code>dataTitle</code> 的值，並渲染純文字在畫面中。</p>
<hr>
<h2 id="函式-延伸內容"><a href="#函式-延伸內容" class="headerlink" title="函式-延伸內容"></a>函式-延伸內容</h2><h3 id="陳述式與表達式"><a href="#陳述式與表達式" class="headerlink" title="陳述式與表達式"></a>陳述式與表達式</h3><p>JavaScript 函式建立的方式有以下兩種：</p>
<p><strong>函式陳述式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">statement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">statement();</span><br><span class="line"><span class="comment">// 輸出結果為 Hello!</span></span><br></pre></td></tr></table></figure>

<p>以上範例是先前提到的類型，這種直接具名的形式稱為<strong>函式陳述式</strong>（Function Statement），這種直接宣的告函式，可以在函式被宣告之前呼叫，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">statement(); <span class="comment">// 在函式註冊之前執行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">statement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出結果為 Hello!</span></span><br></pre></td></tr></table></figure>

<p><strong>函式表達式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> expression = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">expression();</span><br></pre></td></tr></table></figure>

<p>另一種形式是將一個匿名的函式指定到一個變數中，這種形式稱為<strong>函式表達式</strong>（Function Expression），與陳述式的差別在於，表達式函式的呼叫位置如果在該函式被建立之前，該函式就無法執行，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">expression(); <span class="comment">// 在函式註冊之前執行</span></span><br><span class="line"><span class="keyword">const</span> expression = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 顯示錯誤</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>函式陳述式與表達式的運行差異與 <a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">Hosting</a>（提升）有關，而 <code>var</code> 的提升現象與 <code>let</code>、<code>const</code> 也有所差異，這裡不討論。</p>
</blockquote>
<h3 id="箭頭函式"><a href="#箭頭函式" class="headerlink" title="箭頭函式"></a>箭頭函式</h3><p>一般函式的組成結構會有關鍵字 <code>function</code> 加上函式名稱、<code>()</code> 中的參數列表、<code>&#123;&#125;</code> 中的主要程式碼，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函式一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params">num, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函式二</span></span><br><span class="line"><span class="keyword">let</span> funcName = <span class="function"><span class="keyword">function</span>(<span class="params">num, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而箭頭函式在寫法上相較一般函式來得簡短，以上述範例來說，箭頭函式的寫法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭頭函式</span></span><br><span class="line"><span class="keyword">let</span> funcName = <span class="function">(<span class="params">num, num2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例可以看到關鍵字 <code>function</code> 被省略，而參數列表與主要程式碼之間加入了 <code>=&gt;</code> 符號，用來表示這是一個箭頭函式。</p>
<p>除此之外，箭頭函式的主要程式碼中，如果<strong>只存在一個回傳值敘述</strong>（return）而沒有其他程式碼時，可以將回傳值寫入一個小括號中，或是<strong>只寫回傳值</strong>，而大括號、<code>return</code> 與回傳值的結尾分號可以省略，以下方範例來說，兩者結果相同：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭頭函式（簡化）</span></span><br><span class="line"><span class="keyword">let</span> funcName = <span class="function">(<span class="params">num, num2</span>) =&gt;</span> (num + num2);</span><br><span class="line"><span class="keyword">let</span> funcName = <span class="function">(<span class="params">num, num2</span>) =&gt;</span> num + num2;</span><br></pre></td></tr></table></figure>

<p>最後，如果箭頭函式的參數只存在一個，則包覆參數列表的小括號也能省略，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> funcName = <span class="function"><span class="params">num</span> =&gt;</span> num * num;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>箭頭函式若沒有參數，依然需要加上一組小括號來表示參數列表。</p>
</blockquote>
<p>這裡補上不可以簡化的箭頭函式，範例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭頭函式（不可簡化）</span></span><br><span class="line"><span class="keyword">let</span> funcName = <span class="function">(<span class="params">num, num2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = num + num2; <span class="comment">// 存在除了 return 以外的程式碼</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.796t.com/article.php?id=192469">前端利用formData格式進行資料上傳，前端 formData 傳值和 json 傳值的區別？</a></li>
<li><a href="https://www.casper.tw/javascript/2017/06/29/es6-native-array/#Array-prototype-reduce">JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(), some(), reduce()]</a></li>
<li><a href="https://www.fooish.com/javascript/array/sort.html#%E8%87%AA%E5%AE%9A%E7%BE%A9%E6%8E%92%E5%BA%8F-custom-sort">JavaScript Array sort() (陣列排序)</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>學習筆記</tag>
      </tags>
  </entry>
</search>
