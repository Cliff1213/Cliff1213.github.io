<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>六角學院 UI 觀念直播班心得</title>
    <url>/2022-01-17-hexschool-UI/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本身不是設計相關科系，但還是希望能透過這次的＂六角學院－UI設計觀念必修直播班＂來增進一點 UI/UX 的相關知識，雖然很遺憾沒有完美的走到終點，但還是幫自己記錄一下這次參與直播班的心路歷程。</p>
<span id="more"></span>

<h2 id="報名這堂課的契機是？"><a href="#報名這堂課的契機是？" class="headerlink" title="報名這堂課的契機是？"></a>報名這堂課的契機是？</h2><p>相信在仿間與 UI/UX 設計相關的課程一定數不勝數，但是為什麼我會選擇”六角學院”的課程？原因很簡單，<del>就是信仰（沒</del>，其實早在先前就有報名六角的切版班了，而六角學院整體給我的氛圍是很團結的；你會有自己的小組以及永遠在前線待命等你發問的助教，當然少不了最敬業的老師。而因為你是跟著大家一起學習，所以當腦海衍生出想偷懶的想法同時，也會有一種被人從後面拍肩膀並對你說「欸我先走一步哩，你就繼續耍廢。」的感覺，讓你在學習上能自律。</p>
<h2 id="每週的學習過程："><a href="#每週的學習過程：" class="headerlink" title="每週的學習過程："></a>每週的學習過程：</h2><p>這一次表訂為期四週的直播課程大綱如下：</p>
<ul>
<li><p><strong>Week 1：掌握頁面所有元件</strong></p>
<p>本次主要使用的設計工具為 Figma，算是目前的主流之一。而這週就是帶你認識軟體的操作介面；雖然我在開課前有先觀看課前釋出的體驗營直播錄影，但是自己在操作上還是有許多不解的地方；不過在聽完第一週的直播後，我私下就利用時間把直播錄影再看一次並且針對操作上比較複雜的地方寫了筆記，<del>對我來說都很複雜所以筆記滿到哭</del>，而這些後續幫助我在練習軟體上幫助很多。</p>
</li>
<li><p><strong>Week 2：帶你從草稿到完稿</strong></p>
<p>這週認識了一些網頁在設計的過程中比較常見會遇到的設計模式，像是C.R.A.P的設計準則，或是在規劃網頁時常用的 AIDA Modal；再來會介紹甚麼是 Wireframe。這週基本上每個人會開始設計第一個 Landing Page，對我這個設計白癡來說算是頗有挑戰性的，<del>（我做的很像釣魚網站</del>。</p>
</li>
<li><p><strong>Week 3：伸縮自如的響應式設計</strong></p>
<p>RWD對我來說雖然早就不陌生，但是這堂課讓我更加的理解網頁在不同寬度的視窗做切換時的一些細節以及過往不懂的知識，像是中斷點、網格切換時的邏輯或是兩個物件之間的間距都是一個學問。</p>
</li>
<li><p><strong>Week 4：讓介面動起來</strong></p>
<p>這週的直播內容算是比較有趣的一次，主要都是在介紹 Prototype 的運作，很多動畫都是在網頁中常見的，但是直播以外的時間幾乎都是拿來做最終作品，從這週開始會覺得時間緊湊起來。</p>
</li>
<li><p><strong>Week 5：加碼內容</strong></p>
<p>標題說是表訂為期四週，但怎麼會還有第五週呢？原因是老師擔心有些同學工作比較忙碌，可能會沒有時間做最終作品，因此開放最終作品有達到一定進度的同學提供額外的一次直播並且延長作品繳交的期限<del>（老師你是神吧</del>，而加碼直播課程的內容是如何把作品上傳到 Behance 以及作品呈現的排版建議；為了拿到這張門票我花了不少時間不反覆改我的作品版型，但一切都值得。</p>
</li>
</ul>
<h2 id="建議："><a href="#建議：" class="headerlink" title="建議："></a>建議：</h2><p>無論你是不是設計背景，或是你有想轉職 UI 設計師的想法但是沒有明確的學習目標，不仿可以考慮看看六角學院的 UI 設計直播課程；好的學習環境跟課程規劃這裡都提供給你了，但能不能有所成長還是決定在自己身上，以我自己為例，很多觀念在直播上課的當下我是充滿疑惑的，但課後我會盡可能的把當天的直播錄影重頭到尾看一次並且隨時暫停錄影做筆記，因為對我來說暫停的當下會先思考一次問題的所在，而作筆記的時候會間接複習剛剛思考的問題，這確實大幅提升了我的學習效率，當然這是我自己的做法，每個人的學習方式不盡相同，但這裡要表達的重點是自己必須要有所規劃，再搭配現有的資源去做結合，才能最有效率的學習。</p>
<h2 id="結語："><a href="#結語：" class="headerlink" title="結語："></a>結語：</h2><p>雖然這次的過程對我來說真的不容易，但還是很榮幸可以跟到這次的直播課程，畢竟這是我有史以來最認真跟 UI/UX 相處的一段時間。很喜歡一個人專注在思考或是做某一件事情時的感覺，而這次直播班讓我深刻體會到了，遺憾的是我沒有在時間內完成最終作品，雖然對特別延長繳交期限的老師很不好意思，但這個作品我還是會利用時間把它完成，至少有始有終也算是對參與這個課程的自己負責吧。</p>
<p>最後我要特別感謝<strong>熾炎鐵甲狼</strong>的組員，特別是組長都會幫忙繳交小組作業以及提醒繳交的時間，也要感謝其他組員都會提出疑問和幫忙解答，雖然各位都很忙，但都盡可能的參與小組任務，這邊讓我私心合影紀念一下。</p>
<p><img src="https://i.imgur.com/kQuBKJ5.png" alt="img"></p>
<p>最後的最後，要感謝聲音自帶磁性的俊儀老師和唯一的 Joanne 助教願意回答我提出的蠢問題<del>（假日問跨年也問，吵到真的不好意思</del>，雖然最後階段的作品屢次被退回，但每次的建議我都有仔細看，讓我這個設計肢障提升了設計觀念之餘，也培養了專注思考的能力，感謝兩位的用力鞭打，也辛苦你們了。</p>
<p><img src="https://i.imgur.com/GIbWClM.png?1"></p>
]]></content>
      <categories>
        <category>心得文</category>
      </categories>
      <tags>
        <tag>UI/UX</tag>
        <tag>六角學院</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM 筆記</title>
    <url>/2022-02-07-npm-note/</url>
    <content><![CDATA[<p>最近開始接觸 JS 套件，但在過程中因為版本之間的相容問題，幾乎是讓我踩到一堆深不見底的坑，後來開始找了很多資料並參考其他開發者使用以及管理套件的方式，然而相關資料都離不開 NPM，於是決定來找它泡茶一下，順便紀錄一下過程中學到的知識。</p>
<span id="more"></span>

<hr>
<h2 id="甚麼是-NPM？"><a href="#甚麼是-NPM？" class="headerlink" title="甚麼是 NPM？"></a>甚麼是 NPM？</h2><p>全名 Node Package Manager，是一種套件管理工具，簡言之就是匯集各種 Node js 套件的線上庫。</p>
<hr>
<h2 id="安裝-Node-JS-amp-NPM"><a href="#安裝-Node-JS-amp-NPM" class="headerlink" title="安裝 Node JS &amp; NPM"></a>安裝 Node JS &amp; NPM</h2><p><img src="https://i.imgur.com/O3WVkU4.png"></p>
<p>上圖是 <a href="https://nodejs.org/en/">Node js 官網</a>所提供的下載點，可以看到分成兩個部分，左邊為 LTS（Long Term Support），屬於長期支援維護的版本，可以理解成較穩定的版本；右邊 Current 的部分則是最近、最新的版本。</p>
<p>Node js 官方在版本的釋出上有自己的邏輯，通常會在每年四月份發布偶數版本，十月份發布奇數版本，可以從下圖看到近期的版本維護狀態：</p>
<p><img src="https://i.imgur.com/zOGuPaZ.png"></p>
<p>新的版本在發布後，版本號如果是奇數，六個月後就不會再維護；但版本號如果是偶數，半年後就會進入長期維護（Active LTS）的狀態，並保證在接下來的三十個月內會更新與修復各種問題，因此新專案通常會選擇安裝 LTS 的版本。</p>
<p>接著進入正題，要如何安裝 NPM？這個問題其實在安裝 Node 後就已經解決了，因為 NPM 是 Node js 開發環境預設的套件管理工具（Packge Manager），因此在安裝 Node 的同時，NPM 會跟著一起安裝。</p>
<blockquote>
<p>因為每個專案所使用的 Node 版本不盡相同，因此為了避免產生版本與套件之間的相容問題，建議使用 NVM（Node Version Manager）來切換 Node 版本。</p>
</blockquote>
<p>安裝完成後，開啟任一終端機即可開始操作。</p>
<hr>
<h2 id="檢視版本"><a href="#檢視版本" class="headerlink" title="檢視版本"></a>檢視版本</h2><p>在終端機輸入以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果顯示 npm 版本號，表示安裝成功，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6.9.0</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="初始化目錄"><a href="#初始化目錄" class="headerlink" title="初始化目錄"></a>初始化目錄</h2><p>指定任一資料夾為目錄，輸入以下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>此時會顯示訊息要求輸入專案的一些資訊，如下所示：</p>
<p><img src="https://i.imgur.com/bGQsEeb.png"></p>
<p>上述部分只需要持續按下 Enter 即可。</p>
<p>接著透過編輯器開啟專案資料夾，可以看到一個 package.json 的檔案，這是資料夾在進行 npm 初始化後所產生的 json 格式檔案，內容主要是紀錄專案的資訊，如下所示：</p>
<p><img src="https://i.imgur.com/yjjj8ZV.png"></p>
<hr>
<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><h3 id="安裝至全域"><a href="#安裝至全域" class="headerlink" title="安裝至全域"></a><strong>安裝至全域</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g 套件名稱</span><br></pre></td></tr></table></figure>

<p>安裝套件時，在指令加入 <code>-g</code>，套件就會被安裝在全域，也就是當前使用的電腦上；這樣做的好處是，當有其他專案需要使用這個套件時，就不用再另外安裝該套件在專案資料夾中。</p>
<h3 id="安裝至指定目錄"><a href="#安裝至指定目錄" class="headerlink" title="安裝至指定目錄"></a><strong>安裝至指定目錄</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save 套件名稱</span><br></pre></td></tr></table></figure>

<p>以指定專案資料夾為目錄並執行上述指令，套件就會被安裝在該資料夾中，在加入 <code>--save</code> 參數後，這個套件就會被記錄在 package.json 檔案裡，下列以安裝 jquery 為範例：</p>
<p><img src="https://i.imgur.com/n1jRC8k.png"></p>
<p>可以看到檔案中新增了一個 dependencies 項目，並且在下方可以看到已安裝的 jquery 套件與對應版本。</p>
<p>因為不同專案所使用的套件與套件版本不同，因此在接手別人開發的專案時，可以先依據 dependencies 中的資訊來安裝對應的套件。</p>
<hr>
<h2 id="安裝指定版本套件"><a href="#安裝指定版本套件" class="headerlink" title="安裝指定版本套件"></a>安裝指定版本套件</h2><p>正常的情況下，安裝下來的套件預設會是最新的版本，但一些較舊的專案可能不支援新版本的套件，此時就可以使用以下指令來安裝指定版本的套件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install 套件名稱@版本號</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="版本數字意義"><a href="#版本數字意義" class="headerlink" title="版本數字意義"></a>版本數字意義</h2><p>通常套件的版本會以 3 個數字的格式來表示，但每個數字所代表的意義其實不同，下列以 jquery 為例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;jquery&quot;： &quot;^3.6.0&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>3</code> - 主要版本，通常會因為重大改版而增加版本號。</li>
<li><code>6</code> - 次要版本，依當前的主要版本為基準，新增功能時增加版本號。</li>
<li><code>0</code> - 修正版本，依當前的主要版本為基準，修正錯誤時增加版本號。</li>
</ul>
<p>開發的過程中通常不會直接更新主要版本，因為這樣有極高的機率毀掉專案，正常的情況下只會更新次要版本或修正版本，依專案的開發情形而定。</p>
<hr>
<h2 id="版本標示符號"><a href="#版本標示符號" class="headerlink" title="版本標示符號"></a>版本標示符號</h2><ul>
<li><code>^x.x.x</code> - 安裝套件時，自動更新次要與修正版本，主要版本不做更動。</li>
<li><code>~x.x.x</code> - 安裝套件時，自動更新修正版本，主要與次要版本不做更動。</li>
<li><code>latest</code> - 安裝套件時，自動安裝最新版本。</li>
<li>未加入任何符號，表示只安裝當前輸入的版本。</li>
</ul>
<p>更新套件版本的方式，只需要將專案資料夾中的 node_modules 刪除，再重新執行以下指令，系統就會根據該專案中的 package.json 檔案設置來安裝所有會使用到的套件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="移除套件"><a href="#移除套件" class="headerlink" title="移除套件"></a>移除套件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall 套件名稱</span><br></pre></td></tr></table></figure>

<p>需要注意的是，上述指令只會將專案資料夾中的套件移除，但是並不會同時更新 package.json 檔案中的設置，如果有這個需求，只需要在指令中加入 <code>--save</code> 參數即可。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E4%BD%BF%E7%94%A8npm%E5%A5%97%E4%BB%B6-317beefdf182"><em>從零開始：使用NPM套件</em></a></li>
<li><em><a href="https://linyencheng.github.io/2020/03/22/tool-npm/">npm 入門到進階</a></em></li>
</ul>
]]></content>
      <categories>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>NPM</tag>
        <tag>學習筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Font-Family 潛規則</title>
    <url>/2022-03-02-font-family/</url>
    <content><![CDATA[<p>回想過去在初學網頁的時候，對於 font-family 這個屬性一直處於很難相處的狀態，常會發生明明設定了字體，也沒有語法上的錯誤，但是網頁上呈現出來的結果總是不如預期；剛好前陣子在練習切版的時候又遇到了這方面的問題，於是決定投入一點時間研究問題的所在，藉此讓自己重新認識這個屬性。</p>
<blockquote>
<p>本篇僅討論 font-family 字體設定的基本觀念，沒有過多的字體介紹，主要方便自己做後續的查閱用途。</p>
</blockquote>
<span id="more"></span>

<hr>
<h2 id="Font-Family-設定規則"><a href="#Font-Family-設定規則" class="headerlink" title="Font-Family 設定規則"></a>Font-Family 設定規則</h2><p>基本上只要是網頁設計，都會使用到的屬性，可以自訂頁面上的文字字體，但是初學者在使用這個屬性之前，為了避免結果不如預期，建議需要先理解一些設定上的規則。</p>
<h3 id="字體套用邏輯"><a href="#字體套用邏輯" class="headerlink" title="字體套用邏輯"></a>字體套用邏輯</h3><p>Font-Family 雖然可以設定多個屬性值，但是並不會將所有寫入的字體都一起套用，而是會根據瀏覽器對該字體的支援與否，由左至右依序判斷，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: 字體A, 字體B, 字體C;</span><br></pre></td></tr></table></figure>

<p>假設使用者的電腦系統中僅存在 “字體B”，此時瀏覽器載入網頁時，會根據上述設定先判斷系統內是否有對應的字體A，但因為系統中找不到這個字體，因此會跳過該字體並判斷下一個字體B，此時找到字體B之後，就會套用該字體，並且不再往下進行判斷。</p>
<h3 id="語法注意事項"><a href="#語法注意事項" class="headerlink" title="語法注意事項"></a>語法注意事項</h3><p>在部分字體的選用上，同一個字體可以選擇使用中文名稱或英文名稱的屬性值設定，其結果會相同，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Microsoft JhengHei&quot;</span>;</span><br><span class="line"><span class="attribute">font-family</span>: 微軟正黑體;</span><br></pre></td></tr></table></figure>

<p>從上述語法中可以發現，第一行的字體加上了雙引號，這是因為該字體的名稱之間如果存在空白，在不加上雙引號的情形下，瀏覽器會無法辨識而導致讀取失敗。</p>
<p>另一個值得注意的是，雖然使用中文名稱來設定字體結果與英文名稱相同，但是只單獨設定中文名稱的話，可能會遇到編碼的問題而導致結果不如預期，因此會建議使用英文名稱的屬性值，或是中、英文一起使用，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Microsoft JhengHei&quot;</span>, 微軟正黑體;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Font-Family-字體類型"><a href="#Font-Family-字體類型" class="headerlink" title="Font-Family 字體類型"></a>Font-Family 字體類型</h2><p>在當今這麼大量的字體中，主要可以分為 “指定字體” 與 “通用字體” 兩種類型。</p>
<h3 id="指定字體（family-name）"><a href="#指定字體（family-name）" class="headerlink" title="指定字體（family-name）"></a>指定字體（family-name）</h3><p>不同的字體也會影響網頁的視覺感受，因此在選用字體時，通常會優先使用指定的字體。</p>
<h3 id="通用字體（generic-family）"><a href="#通用字體（generic-family）" class="headerlink" title="通用字體（generic-family）"></a>通用字體（generic-family）</h3><p>通用字體可以理解成多數的電腦系統中，內建就已存在的字體，常見的通用字體有以下五種，其中無襯線體、襯線體使用最為廣泛：</p>
<ul>
<li>sans-serif（無襯線體 / 黑體）</li>
<li>serif（襯線體 / 明體）</li>
<li>cursive（手寫體）</li>
<li>monospace（等寬體）</li>
<li>fantasy（幻想體）</li>
</ul>
<h3 id="設定方式"><a href="#設定方式" class="headerlink" title="設定方式"></a>設定方式</h3><p>雖然可以透過指定字體名稱的方式，來達到自訂網頁上想要呈現的字體，但是並非所有電腦系統都有對應的指定字體，因此在使用指定字體時，通常都會在 font-family 屬性值的<strong>最後方位置</strong>設定預設的通用字體；而前面有提到 font-family 是由左至右判斷屬性值，所以當瀏覽器不支援或無法從系統中找到前方所對應的指定字體時，就會套用最後設定的通用字體，設定格式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: 指定字體, <span class="string">&quot;指定 字體&quot;</span>, 通用字體;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="字體順序觀念"><a href="#字體順序觀念" class="headerlink" title="字體順序觀念"></a>字體順序觀念</h2><p>本篇一開始在設定規則的地方有簡單提到字體是由左邊開始判斷，但是在順序方面還有一些重要觀念需要熟記，這邊先記住以下設定順序，後續會說明原因：</p>
<p>設定順序：<strong>英文字體 &gt; Linux &gt; Mac &gt; Windows &gt; 通用字體</strong></p>
<!-- 這部分一直沒有比較好的解釋 -->



<h3 id="中、英文順序"><a href="#中、英文順序" class="headerlink" title="中、英文順序"></a>中、英文順序</h3><p>一個網頁通常會存在多個語言（以中、英文為例），但是並非所有的字體都同時支援中、英文，因此許多網頁會利用這個由左至右判斷的技巧，分別針對中文與英文各別設定不同的字體，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: Arial, 微軟正黑體;</span><br></pre></td></tr></table></figure>

<p>上述設定中，Arial 只有英文字體，而微軟正黑體則是中、英文字體都有，因此瀏覽器在判斷 Arial 之後，就會因為符合條件而套用英文字體，而中文會因為找不到對應字體則往下判斷微軟正黑體並套用，此時網頁上的中文與英文就會呈現不同字體的效果。</p>
<p>但是如果順序換成微軟正黑體在前面，瀏覽器就會先判斷微軟正黑體，因為該字體中、英文都可以使用，所以網頁上的兩種語言都會套用成微軟正黑體，而後面的 Arial 會因為英文字體已套用成微軟正黑體而不會被讀取。</p>
<p>因此，正確的屬性值順序為<strong>英文字體在前面，中文字體在後面。</strong></p>
<h3 id="字體使用率與順序"><a href="#字體使用率與順序" class="headerlink" title="字體使用率與順序"></a>字體使用率與順序</h3><p>每個作業系統都有自己的系統字體，例如 -apple-system 與 BlinkMacSystemFont 分別是 iOS 以及 macOS 的系統字體，並且前者只能使用在 Safari 瀏覽器上，後者則是用於 Chrome，像這種只能使用在特定系統或瀏覽器的字體，順序就需要放在前面，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, Roboto, <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span><br><span class="line">	     <span class="comment">/* mac系統字體, iOS系統字體,	windows英文系統字體, 微軟正黑體, Android系統字體, iOS系統字體, 通用字體, 通用字體 */</span></span><br></pre></td></tr></table></figure>

<p>假設使用者電腦系統為 windows，瀏覽器因為在系統中找不到 -apple-system 與 BlinkMacSystemFont 而直接跳過這兩個字體，而下一個 Segoe UI 屬於 windows 的英文系統字體，因此英文字體就會套用 Segoe UI，中文字體則是因為 Segoe UI 並沒有對應的中文而判斷下一個值，最終套用 Microsoft JhengHei。</p>
<p>如果電腦系統是 macOS 並且使用 Chrome 瀏覽網頁，當瀏覽器在讀取到 -apple-system 時，就會套用對應的中文及英文字體，並且不再往下判斷。</p>
<p>因此，為了適應各種不同的瀏覽器與作業系統，在設定字體時需要把<strong>較少使用到的字體放前面，較常使用到的字體放後面。</strong></p>
<hr>
<h2 id="實務範例"><a href="#實務範例" class="headerlink" title="實務範例"></a>實務範例</h2><p>附上幾個知名企業的字體設定當作參考，有興趣的也可以自行研究順序邏輯。</p>
<p>Apple（台灣）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;SF Pro TC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang TC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br></pre></td></tr></table></figure>

<p>微軟台灣：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;Segoe UI&#x27;</span>, SegoeUI, <span class="string">&#x27;Microsoft JhengHei&#x27;</span>, 微軟正黑體, <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, sans-serif;</span><br></pre></td></tr></table></figure>

<p>Google：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: arial, sans-serif;  <span class="comment">/* 不愧是 Google，連字體設定都這麼簡約 */</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.oxxostudio.tw/articles/201811/css-font-family.html">CSS font-family 詳細介紹</a></li>
<li><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/180456/#outline__1_2_1">最標準的系統字型規範 font-family</a></li>
<li><a href="https://www.casper.tw/css/2014/01/01/font-family/">font-family要怎麼玩</a></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>font-family</tag>
      </tags>
  </entry>
  <entry>
    <title>RWD 雜談</title>
    <url>/2022-03-14-rwd-note/</url>
    <content><![CDATA[<p>本篇內容會記錄一些 RWD 的小知識，以及設計過程中可以注意的小細節，撰寫目的主要是希望能透過這些筆記，來培養自己響應式網頁的設計思維。</p>
<span id="more"></span>

<hr>
<h2 id="RWD-在做什麼？"><a href="#RWD-在做什麼？" class="headerlink" title="RWD 在做什麼？"></a>RWD 在做什麼？</h2><p>響應式網頁設計（Responsive Web Design），是為了因應現今網頁瀏覽裝置的多樣性，而衍生出來的一網頁設計模式；能夠讓一個網頁在多種裝置寬度下，呈現出不同的內容排版。</p>
<hr>
<h2 id="初始設置"><a href="#初始設置" class="headerlink" title="初始設置"></a>初始設置</h2><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><p>要使網頁符合 RWD 條件，就必須在 head 標籤內層加入以下設定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述語法中的 viewport 代表視埠，可以理解成可視區域，在後方可以看到 width=device-width 與 initial-scale=1.0 兩個參數，前者表示強制讓網頁的解析度等於瀏覽裝置的寬度，後者則是設定網頁的縮放比例為 1 倍。</p>
<p>viewport 可設定參數分別有以下幾種：</p>
<ul>
<li>width（設定寬度）</li>
<li>height（設定高度）</li>
<li>initial-scale（設定初始縮放比例）</li>
<li>minimum-scale（設定最小縮放比例）</li>
<li>maximum-scale（設定最大縮放比例）</li>
<li>user-scalable（是否允許畫面縮放）</li>
</ul>
<h3 id="檢視前後差異"><a href="#檢視前後差異" class="headerlink" title="檢視前後差異"></a>檢視前後差異</h3><p>以 Chrome 瀏覽器為例，網頁在加上 viewport 的語法後，可以透過開發人員工具的 toggle device toolbar 功能來檢視是否載入成功，而先前的語法中分別設定了 width 以及 initial-scale，因此將瀏覽裝置變更為手機後，網頁中的文字會保持原本大小，並且內容會被侷限在裝置的寬度範圍裡，<strong>不會產生 x 軸</strong>。</p>
<blockquote>
<p>補充說明：上述提到的 x 軸，是指瀏覽器底部的水平移動軸（scroll bar）。</p>
</blockquote>
<hr>
<h2 id="Media-Queries"><a href="#Media-Queries" class="headerlink" title="Media Queries"></a>Media Queries</h2><p>media 是在設計響應式網頁時，必然會使用到的語法，而 Media Queries（媒體查詢）的作用是偵測使用者目前裝置的屬性（如裝置寬度），並針對這些屬性定義樣式。 </p>
<h3 id="媒體類型"><a href="#媒體類型" class="headerlink" title="媒體類型"></a>媒體類型</h3><p>根據 <a href="https://www.w3schools.com/css/css3_mediaqueries.asp">W3C</a> 文件中所列出的媒體類型，目前主要有以下幾種：</p>
<ul>
<li>all（所有裝置）</li>
<li>print（印刷裝置）</li>
<li>screen（螢幕裝置）</li>
<li>speech（朗讀裝置）</li>
</ul>
<blockquote>
<p>備註：後續內容會著重在網頁上會使用的相關設定。</p>
</blockquote>
<h3 id="設定方式（CSS）"><a href="#設定方式（CSS）" class="headerlink" title="設定方式（CSS）"></a>設定方式（CSS）</h3><p>以下原始碼只有指定 media 類型，因此只要裝置類型為螢幕（screen）時，就會載入樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">    <span class="comment">/* CSS Style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下原始碼除了指定 media 類型之外，還使用了 Queries 的判斷條件 and，此時需要符合裝置為螢幕，以及畫面的最大寬度為 768 像素，才會載入樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="comment">/* CSS Style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判斷條件也可以設定多個，以下方原始碼為例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> ( <span class="attribute">min-width</span>: <span class="number">375px</span> ) <span class="keyword">and</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="comment">/* CSS Style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>除了上述的 and，還可以使用 or、not、only 來設定判斷條件，在此不討論。</p>
</blockquote>
<p>如果不指定 media 類型，判斷的裝置類型就會是 all（所有裝置），此時 and 也可以省略，設定方式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="comment">/* CSS Style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="網頁常見的判斷語法"><a href="#網頁常見的判斷語法" class="headerlink" title="網頁常見的判斷語法"></a>網頁常見的判斷語法</h2><p>因為響應式網頁的運作方式是根據裝置的寬度，因此相關的判斷條件有以下兩種：</p>
<h3 id="max-width"><a href="#max-width" class="headerlink" title="max-width"></a>max-width</h3><p>表示最大寬度在設定的數值（含）以下時，範例原始碼如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 假設 h1 父層為 body */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點一 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點二 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">375px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假設目前瀏覽器寬度為 1024 像素，此時 h1 的字體顏色為紅色，接著嘗試使用 iPad Mini 進行瀏覽後，因為 iPad Mini 的解析度為 768*1024，因此就會滿足斷點一的條件並載入樣式，使 h1 的顏色變更為綠色。</p>
<blockquote>
<p>因為 CSS 權重觀念，Media Queries 的樣式載入後，前者相同屬性的樣式就會被後者載入的樣式覆蓋。</p>
</blockquote>
<p>同理，如果將瀏覽裝置切換成 iPhone SE，當前裝置的解析度變更為 375*667，此時就會滿足斷點二的條件，並將 h1 的字體大小設定為 24 像素。</p>
<p>從上述範例可以得知，max-width 會先設定電腦版的樣式，再依序調整平版與行動版，因此適合用於瀏覽裝置以<strong>電腦版為主</strong>的網頁。</p>
<h3 id="min-width"><a href="#min-width" class="headerlink" title="min-width"></a>min-width</h3><p>表示最小寬度在設定的數值（含）以上時，範例原始碼如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 假設 h1 父層為 body */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點一 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">min-width</span>: <span class="number">375px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">32px</span>; <span class="comment">/* h1 預設大小為 32px */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點二 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">min-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述原始碼所呈現的結果與先前的 max-width 是相同的，但是與 max-width 不同的點在於 min-width 會從行動版開始設定網頁樣式，接著調整平版再到電腦版，因此適合用於瀏覽裝置以<strong>行動版為主</strong>的網頁。</p>
<h3 id="差異與影響"><a href="#差異與影響" class="headerlink" title="差異與影響"></a>差異與影響</h3><p>因為 CSS 的載入邏輯是先判斷權重，再判斷先後順序，因此如果是使用 max-width 來設計響應式網頁，在行動裝置上 Media Queries 就會因為符合條件而優先載入電腦版樣式，接著再載入平版的樣式，最後才是行動裝置，這樣會使行動裝置上載入的 CSS 資源比使用 min-width 設計的網頁多載入一些。</p>
<p>另外在樣式設定方面，如果優先決定設計電腦版的網頁，後續在平版與行動版的排版上，限制會比較多；同理，如果優先設計行動版的網頁，在進行高解析度的排版時，自由度也會與行動版有所落差。</p>
<hr>
<h2 id="讓網頁自適應寬度"><a href="#讓網頁自適應寬度" class="headerlink" title="讓網頁自適應寬度"></a>讓網頁自適應寬度</h2><p>一般網頁在沒有設計響應式的情況下，最外層容器都會設定一個固定寬度，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">clss</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在響應式網頁中，如果使用 width 來設定容器寬度，會造成網頁在縮放時，因為寬度固定而無法使內容自適應寬度，導致產生 x 軸，以上方範例來說，手動調整瀏覽器寬度到 1000 像素以下時，網頁的寬度還是 1000 像素，因此部分內容會被隱藏到可視範圍外，需要拖曳瀏覽器底部的 x 軸，才能看到被隱藏的內容。</p>
<p>所以如果要讓上方原始碼具有響應式網頁的功能，就必須將最外層容器原本設定的屬性 width 更改為 max-width（最大寬度），設定方式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此一來，任意調整瀏覽器寬度時，最外層容器的寬度就會是瀏覽器當下的寬度，並且最大不會超過容器本身的寬度。</p>
<hr>
<h2 id="CSS-Reset"><a href="#CSS-Reset" class="headerlink" title="CSS Reset"></a>CSS Reset</h2><p>大部分的網頁在開始設定樣式之前，都會先載入習慣的 CSS Reset 設定，而在響應式網頁中，會建議另外加上幾個 Reset 設定。</p>
<h3 id="設定圖片"><a href="#設定圖片" class="headerlink" title="設定圖片"></a>設定圖片</h3><p>設定方式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假設網頁中的任意一張圖片原始大小為 900 像素，此時如果將瀏覽器寬度調整至小於 900 像素時，圖片預設還是會保持原本的大小，造成網頁產生 x 軸，但如果使用上述設定，圖片就會根據父層元素的寬度，以原始比例自動調整大小，並且最大不會超過圖片原始大小。</p>
<blockquote>
<p>屬性 max-width 若改為 width，可能會因為圖片解析度較小而失真。</p>
</blockquote>
<h3 id="設定容器寬度"><a href="#設定容器寬度" class="headerlink" title="設定容器寬度"></a>設定容器寬度</h3><p>一般情況下，網頁容器設定 Padding、Margin 或 Border 後，容器本身實際寬度都會改變，以下方原始碼為例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述 box 區塊在載入樣式後，寬度不是 width 所設定的 100 像素，而是 100 + 10 * 2 + 5 * 2，因此實際寬度會變成 130 像素，這樣在網頁排版時，會因為需要計算容器寬度而變得相當麻煩。</p>
<p>為了避免發生這方面的問題，可以在排版之前先加入以下設定：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,*<span class="selector-pseudo">::before</span>,*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入這段設定後，容器的寬度與高度就不會包含 Padding、Margin、Border 所產生的距離，而只是單純計算內容的寬高。</p>
<hr>
<h2 id="使用百分比控制寬度"><a href="#使用百分比控制寬度" class="headerlink" title="使用百分比控制寬度"></a>使用百分比控制寬度</h2><p>在響應式網頁中，也常會使用百分比（%）單位來設計網頁元素的排版，而使用百分比的元素會根據父層元素的寬度，自適應調整自身的寬度與高度。</p>
<p>以下方原始碼為例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>圖片一<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>圖片二<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>圖片三<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS / 假設已載入 meyerweb reset */</span></span><br><span class="line">*,*<span class="selector-pseudo">::before</span>,*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.33%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 斷點一 */</span></span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">768px</span> ) &#123;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例在 ul 使用了 flex 屬性值，讓內層的元素 li 並排，而 li 因為設定了寬度 33.33%，因此當瀏覽器寬度在 1000 像素或以上時，li 會以三個並排的方式呈現；當瀏覽器寬度在 768 像素或以下時，斷點一的條件就會滿足，使該斷點的樣式設定覆蓋原先的設定，因為 ul 有設定 wrap 屬性值，因此 li 會以兩個並排的方式呈現。</p>
<hr>
<h2 id="斷點規劃"><a href="#斷點規劃" class="headerlink" title="斷點規劃"></a>斷點規劃</h2><p>雖然在設計響應式網頁時，可以新增斷點讓網頁在不同瀏覽裝置上呈現不同排版，但是礙於現今裝置的多樣性，並沒有辦法透過幾個斷點就兼容所有瀏覽裝置，因此只能針對當下較熱門的解析度來設定斷點內容。</p>
<blockquote>
<p>可以使用 <a href="https://gs.statcounter.com/browser-market-share/all/taiwan/#monthly-202101-202201">statcounter</a> 工具來查詢目前熱門的螢幕解析度，並規劃網頁的斷點。</p>
</blockquote>
<hr>
<h2 id="表格設計"><a href="#表格設計" class="headerlink" title="表格設計"></a>表格設計</h2><p>電腦版網頁中的表格在轉換至行動版時，為了避免瀏覽器寬度不足而擠壓到內容，可透過 display 設定屬性來將較不重要的欄位隱藏，以下為範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;d-none&quot;</span>&gt;</span>訂單編號<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品項<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>產品價格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;d-none&quot;</span>&gt;</span>001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>皮卡丘<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>雷之石<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">375px</span> ) &#123;</span><br><span class="line">    <span class="selector-class">.d-none</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述為簡易的後台訂單表格，因為在 CSS 第 12 行設定了 Media Queries 的斷點設定，因此該表格在瀏覽器寬度 375 像素以下時，被加上 d-none 類別的 th 標籤與 td 標籤就會被隱藏。</p>
<p>但如果遇到在行動裝置上，表格的所有欄位都要顯示時，也可以透過以下方式來保留所有內容並防止內容擠壓，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>訂單編號<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品項<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>產品價格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>皮卡丘<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>雷之石<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> ( <span class="attribute">max-width</span>: <span class="number">375px</span> ) &#123;</span><br><span class="line">    <span class="selector-class">.wrap</span> &#123;</span><br><span class="line">        <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">table</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">375px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例與先前內容相同，但是在 Media Queries 的設定裡，針對表格的外容器 wrap 設定了 overflow-x 的屬性與對應值 auto，這種設定方式能夠使內容因擠壓而超出元素寬度時，使該容器本身產生 x 軸，而在 CSS 第16 行的部分因為將表格設定了固定寬度，因此就算瀏覽器寬度小於表格寬度也不會被擠壓，而是隱藏在外容器產生的 x 軸外。</p>
<hr>
<h2 id="網頁優化"><a href="#網頁優化" class="headerlink" title="網頁優化"></a>網頁優化</h2><p>這一部分的內容與 RWD 較不相關，但也建議學會的小技巧！</p>
<h3 id="使用圖片取代文字"><a href="#使用圖片取代文字" class="headerlink" title="使用圖片取代文字"></a>使用圖片取代文字</h3><p>LOGO 是用來識別一個網站的重要圖片元素，而 h1 標籤通常是網頁中最重要的內容之一，可以透過以下技巧，將 LOGO 以 h1 標籤的方式撰寫，並將 h1 標籤中的文字隱藏不顯示，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>最重要網頁標題<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;images/logo.svg&#x27;</span>); <span class="comment">/* 推薦使用 svg 圖片格式 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 視圖片本身寬度而定 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>; <span class="comment">/* 視圖片本身高度而定 */</span></span><br><span class="line">    <span class="attribute">background-size</span>: contain; <span class="comment">/* 使圖片自適應在寬度與高度（200*100）之中 */</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">101%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述範例中，CSS 第 3~7 行的部分較容易理解，主要是設定背景圖片，而第 8 行開始，text-indent 的屬性值設定 101% 可使文字縮排至本身寬度以外，white-space 的屬性值 nowrap 則是能讓內容超過最大寬度時不會自動斷行，最後再透過 overflow 使寬度以外的部分隱藏不顯示。</p>
<p>圖片取代文字的用意，在於 LOGO 在網頁上呈現的結果雖然是一張圖片，但是搜索引擎的爬蟲機器人還是能夠抓取到被隱藏的文字內容，會比較有利於 SEO。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.w3schools.com/css/css_rwd_viewport.asp">RWD - The Viewport</a></li>
<li><a href="https://www.oxxostudio.tw/articles/201810/css-media-queries.html">CSS Media Queries 詳細介紹</a></li>
</ul>
]]></content>
      <categories>
        <category>RWD</category>
      </categories>
      <tags>
        <tag>學習筆記</tag>
        <tag>RWD</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 指令概述</title>
    <url>/2022-01-20-git-note/</url>
    <content><![CDATA[<p>在初接觸到網頁領域的時候，偶爾會聽到版本控制一詞，當時的理解是把每一個完整的專案，當作一次的版本發佈到網路空間呈現出來；事實上確實是如此，但是實際在接觸到 Git 之後，才理解到版本控制背後有很多深層的學問可以探究；這段時間為了拓展技能樹，不斷的逼自己學習新的技能，近期剛好把 Git 告一個段落，順便藉由這次機會把學到的知識做個筆記。</p>
<blockquote>
<p>本篇僅記錄這段時間學習 Git 所做的筆記，主要是用來找資料與複習，內容較為白話也沒有過多專有名詞的解釋。</p>
</blockquote>
<span id="more"></span>

<hr>
<h2 id="環境安裝"><a href="#環境安裝" class="headerlink" title="環境安裝"></a>環境安裝</h2><p>在進入正題之前，必須先根據電腦的作業系統安裝 <a href="https://git-scm.com/">Git</a> 的環境，安裝成功後在 Git 資料夾中會有 “Git Bash” 的應用程式，可以透過它來操作 Git 指令；或是使用電腦本身就有的命令提示字元 / 終端機也可以，依使用者習慣為主。</p>
<hr>
<h2 id="Command-Line-基本指令"><a href="#Command-Line-基本指令" class="headerlink" title="Command Line 基本指令"></a>Command Line 基本指令</h2><p>使用 Git 時，通常還會搭配一些終端機的基本指令去輔助操作，常用的 command line 指令如下：</p>
<h3 id="移動到指定目錄"><a href="#移動到指定目錄" class="headerlink" title="移動到指定目錄"></a><strong>移動到指定目錄</strong></h3><p>指令：<code>cd 資料夾路徑</code></p>
<p>除了直接輸入路徑，也可以直接將資料夾拖曳至終端機視窗中。</p>
<h3 id="展開當前目錄"><a href="#展開當前目錄" class="headerlink" title="展開當前目錄"></a><strong>展開當前目錄</strong></h3><p>指令：<code>ls</code></p>
<p>列出當前目錄的所有檔案。</p>
<h3 id="回前一層目錄"><a href="#回前一層目錄" class="headerlink" title="回前一層目錄"></a><strong>回前一層目錄</strong></h3><p>指令：<code>cd ..</code></p>
<p>從當前位置回到前一層目錄。</p>
<h3 id="回到根目錄"><a href="#回到根目錄" class="headerlink" title="回到根目錄"></a>回到根目錄</h3><p>指令：<code>cd\</code></p>
<p>直接移動到根目錄。</p>
<h3 id="新增資料夾"><a href="#新增資料夾" class="headerlink" title="新增資料夾"></a><strong>新增資料夾</strong></h3><p>指令：<code>mkdir 資料夾名稱</code></p>
<p>在當前目錄下建立一個資料夾。</p>
<h3 id="新增檔案"><a href="#新增檔案" class="headerlink" title="新增檔案"></a><strong>新增檔案</strong></h3><p>指令：<code>touch 檔案名稱.檔案類型</code></p>
<p>在當前目錄建立一個檔案。</p>
<h3 id="刪除檔案"><a href="#刪除檔案" class="headerlink" title="刪除檔案"></a>刪除檔案</h3><p>指令：<code>del 檔案名稱.檔案類型</code></p>
<hr>
<h2 id="Git-版本檢視"><a href="#Git-版本檢視" class="headerlink" title="Git 版本檢視"></a>Git 版本檢視</h2><p>環境安裝完成後開啟終端機，嘗試輸入指令 <code>$ git version</code> ，如果若出現 Git 版本訊息即表示安裝成功。</p>
<p>版本訊息範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git version</span><br><span class="line">git version 2.32.0.windows.2</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Git-環境設定"><a href="#Git-環境設定" class="headerlink" title="Git 環境設定"></a>Git 環境設定</h2><p>使用 Git 進行版本控制時，每一個更新紀錄的更新人、更新時間以及部分的內容都會被記錄；因此在開始使用 Git 之前，需要先設定一些基本的資訊。</p>
<h3 id="設定使用者暱稱"><a href="#設定使用者暱稱" class="headerlink" title="設定使用者暱稱"></a><strong>設定使用者暱稱</strong></h3><p>指令：<code>$ git config --global user.name &quot;使用者暱稱&quot;</code></p>
<h3 id="設定使用者信箱"><a href="#設定使用者信箱" class="headerlink" title="設定使用者信箱"></a><strong>設定使用者信箱</strong></h3><p>指令：<code>$ git config --global user.email &quot;使用者信箱&quot;</code></p>
<h3 id="查看設定值"><a href="#查看設定值" class="headerlink" title="查看設定值"></a><strong>查看設定值</strong></h3><p>指令：<code>$ git config --list</code></p>
<hr>
<h2 id="Git-常用指令"><a href="#Git-常用指令" class="headerlink" title="Git 常用指令"></a>Git 常用指令</h2><p>Git 基本操作流程示意圖：</p>
<p><img src="https://i.imgur.com/zLOR8aN.png"></p>
<p>Git 操作方式會根據不同情境而有所差異，但是運作原理相同。</p>
<h3 id="建立本地端儲存庫"><a href="#建立本地端儲存庫" class="headerlink" title="建立本地端儲存庫"></a><strong>建立本地端儲存庫</strong></h3><p>指令：<code>$ git init</code></p>
<p>儲存庫（Repositiory）是用來存放一個專案所有檔案的資料夾；建立方式只需要開啟終端機，並以任意資料夾作為根目錄並輸入上述指令即可。</p>
<p>以檔名為 Project 的資料夾為例，建立成功後會顯示以下訊息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in C:/Users/user/Desktop/Project/.git/</span><br></pre></td></tr></table></figure>

<p>此外也可以開啟該資料夾，查看根目錄是否多出一個 .git 的資料夾，它主要是用於監控與紀錄資料夾內檔案的所有變動；通常 .git 資料夾預設會隱藏，可以從資料夾上方列的 “檢視” 開啟隱藏的項目。</p>
<h3 id="檢視狀態"><a href="#檢視狀態" class="headerlink" title="檢視狀態"></a><strong>檢視狀態</strong></h3><p>指令：<code>$ git status</code></p>
<p>查看工作目錄與暫存區的檔案是否有變動；可得知哪些檔案被修改，哪些檔案尚未被 Git 追蹤。</p>
<p>以 Project（本地端儲存庫）為例，輸入指令時顯示以下訊息，表示尚未做任何檔案新增或編輯：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">No commits yet</span><br><span class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>



<h3 id="加入暫存區"><a href="#加入暫存區" class="headerlink" title="加入暫存區"></a><strong>加入暫存區</strong></h3><p>指令：<code>$ git add .</code></p>
<p>工作目錄有新增或編輯的檔案時，可以輸入上述指令將檔案加入暫存區（索引），並等待提交成一次新的版本。</p>
<p>新增檔案 index.html 在 Project 資料夾中，並輸入指令 <code>$ git status</code> 查看狀態時顯示以下訊息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line">Untracked files:  # 偵測到未被追蹤檔案</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        index.html  # 檔案名稱</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>

<p>訊息顯示偵測到尚未追蹤的檔案 index.html，此時可以輸入上述指令將檔案加入暫存區。</p>
<p>檔案加入暫存區後，輸入 <code>$ git status</code> 查看狀態時顯示以下訊息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line">Changes to be committed:  # 工作目錄的檔案已被加入暫存區等待提交</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   index.html  # 檔案名稱</span><br></pre></td></tr></table></figure>



<p>補充說明：</p>
<p>使用指令 <code>$ git status</code> 查詢狀態時，如果是工作目錄新增的檔案，狀態會是 <code>Untracked files</code>，表示尚未加入暫存區追蹤；但如果是暫存區已存在，後續再進行修改的檔案，狀態會是 <code>Changes not staged for commit</code>，並且檔案前面會標註 <code>modified</code>，表示該檔案已被編輯，需要再次加入暫存區等待提交。</p>
<p>下列為檔案在不同狀態下所表示的意思：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Changes to be committed        # 已加入暫存區，準備提交成一次新的版本紀錄。</span><br><span class="line">Changes not staged for commit  # 已被追蹤，但尚未加入至暫存區。</span><br><span class="line">Untracked file                 # 新建立，尚未被追蹤的檔案。</span><br></pre></td></tr></table></figure>



<h3 id="提交更新（Commit）"><a href="#提交更新（Commit）" class="headerlink" title="提交更新（Commit）"></a><strong>提交更新</strong>（Commit）</h3><p>指令：<code>$ git commit -m &quot;提交內容敘述&quot;</code></p>
<p>將暫存區的檔案提交一次新的版本紀錄。</p>
<p>以下為成功提交暫存區的檔案 index.html 後顯示的訊息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;新增 index&quot;</span><br><span class="line">[master (root-commit) ce9d927] 新增 index  # 提交內容敘述</span><br><span class="line">1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line">create mode 100644 index.html  # 被提交的檔案</span><br></pre></td></tr></table></figure>

<p>提交暫存區的檔案後，輸入 <code>$ git status</code> 查看狀態時顯示以下訊息，表示沒有更動需要提交，並且目前工作目錄乾淨，完全沒有檔案新增、修改或刪除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>



<h3 id="查詢提交紀錄"><a href="#查詢提交紀錄" class="headerlink" title="查詢提交紀錄"></a><strong>查詢提交紀錄</strong></h3><p>指令：<code>$ git log</code></p>
<p>列出過去幾筆的提交紀錄。</p>
<p>以下為提交紀錄的顯示內容範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit ce9d92723df3302156a9523453c0fff21f7fdcc0 (HEAD -&gt; master)</span><br><span class="line">Author: Cliff Chu &lt;wave99487chu@gmail.com&gt;</span><br><span class="line">Date:   Sun Jan 23 17:53:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    新增 index</span><br></pre></td></tr></table></figure>

<p>顯示的筆數較多時，按下鍵盤 q 即可返回原內容。</p>
<hr>
<h2 id="忽略檔案"><a href="#忽略檔案" class="headerlink" title="忽略檔案"></a><strong>忽略檔案</strong></h2><p>不希望某些檔案被 Git 追蹤時，可以建立一個 .gitignore 檔案，透過編輯器開啟檔案後，輸入希望被忽略的檔案名稱和檔案類型並儲存即可；需要注意的是 .gitignore 檔案本身不會被忽略。</p>
<p>被忽略檔案的輸入格式分別為下列幾種類型：</p>
<ul>
<li><p><strong>忽略單一檔案</strong>：輸入格式：<code>檔案名稱.檔案類型</code></p>
</li>
<li><p><strong>忽略檔案類型</strong>：輸入格式：<code>*.檔案類型</code></p>
</li>
<li><p><strong>忽略單一資料夾</strong>：輸入格式：<code>資料夾名稱/</code></p>
</li>
</ul>
<hr>
<h2 id="還原（Reset）"><a href="#還原（Reset）" class="headerlink" title="還原（Reset）"></a>還原（Reset）</h2><p>開始介紹 <code>$ git reset</code> 相關指令之前，需要先理解 Reset 會使用到的三種參數模式，如下所示：</p>
<ul>
<li><code>--mixed</code>（預設模式）：暫存區的檔案會被丟回工作目錄，但是原本工作目錄的檔案不會被影響。</li>
<li><code>--soft</code>：移除 commit 節點，但是暫存區與工作目錄的檔案皆不會被影響。</li>
<li><code>--hard</code>：移除 commit 節點、工作目錄與暫存區所有檔案。</li>
</ul>
<p>補充說明：</p>
<p><code>^</code> 符號代表要往回還原的版本次數，<code>HEAD^</code> 代表往回一個版本，也可以使用 <code>~</code> 加上數字來代替 <code>^</code> 符號的數目，<code>@</code> 符號可以用來代表 <code>HEAD</code>；以 <code>HEAD^^</code> 為例，可以改成 <code>HEAD~2</code>，或 <code>@~2</code>。</p>
<h3 id="還原暫存區單一檔案回工作目錄"><a href="#還原暫存區單一檔案回工作目錄" class="headerlink" title="還原暫存區單一檔案回工作目錄"></a><strong>還原暫存區單一檔案回工作目錄</strong></h3><p>指令：<code>$ git reset HEAD 檔案名稱</code></p>
<h3 id="還原暫存區所有檔案回工作目錄"><a href="#還原暫存區所有檔案回工作目錄" class="headerlink" title="還原暫存區所有檔案回工作目錄"></a><strong>還原暫存區所有檔案回工作目錄</strong></h3><p>指令：<code>$ git reset HEAD</code></p>
<h3 id="還原單一檔案內容"><a href="#還原單一檔案內容" class="headerlink" title="還原單一檔案內容"></a>還原單一檔案內容</h3><p>指令：<code>$ git checkout 檔案名稱.檔案類型</code></p>
<p>指定檔案內容還原回最後一次提交的狀態。</p>
<h3 id="還原工作目錄與暫存區"><a href="#還原工作目錄與暫存區" class="headerlink" title="還原工作目錄與暫存區"></a><strong>還原工作目錄與暫存區</strong></h3><p>指令：<code>$ git reset --hard</code></p>
<p>當前工作目錄與暫存區，皆還原回最後一次提交時的狀態。</p>
<p>需要注意空的資料夾本身會被 git 忽略，因此不會被指令還原；但是資料夾內有存在檔案時，就會被 git 追蹤並還原。</p>
<h3 id="移除最新的提交節點"><a href="#移除最新的提交節點" class="headerlink" title="移除最新的提交節點"></a><strong>移除最新的提交節點</strong></h3><p>指令：<code>$ git reset HEAD^ --hard</code></p>
<p>除了移除最新的節點之外，當前暫存區的檔案也會被移除，但是當前工作目錄的檔案不受影響。</p>
<h3 id="還原被移除的最新提交節點"><a href="#還原被移除的最新提交節點" class="headerlink" title="還原被移除的最新提交節點"></a><strong>還原被移除的最新提交節點</strong></h3><p>指令：<code>$ git reset ORIG_HEAD --hard</code></p>
<p>還原指令 <code>$ git reset --hard HEAD^</code> 移除的節點，並移除當前暫存區的檔案，但是當前工作目錄不受影響。</p>
<p>補充說明：</p>
<p>指令中的 <code>ORIG_HEAD</code> 是當使用者在執行一些較危險的指令（<code>merge</code>、<code>rebase</code>、<code>reset</code> …）時，當前 HEAD 的檔案狀態會事先存放的地方，隨時可以還原。</p>
<p>除了上述方法，也可以使用以下指令來還原狀態：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset 89cb75  # 指令中的亂數為被刪除節點的 SHA-1 值</span><br></pre></td></tr></table></figure>

<p>需要注意被刪除的節點無法透過 <code>$ git log</code> 來查詢，查詢的方式可以使用指令 <code>$ git reflog</code> 來檢視歷史的狀態紀錄。</p>
<h3 id="移除最新的提交節點並保留檔案狀態"><a href="#移除最新的提交節點並保留檔案狀態" class="headerlink" title="移除最新的提交節點並保留檔案狀態"></a><strong>移除最新的提交節點並保留檔案狀態</strong></h3><p>指令：<code>$ git reset HEAD^ --soft </code></p>
<p>可以理解成沒有執行最後一次的提交動作。</p>
<h3 id="修改最新提交節點的描述"><a href="#修改最新提交節點的描述" class="headerlink" title="修改最新提交節點的描述"></a><strong>修改最新提交節點的描述</strong></h3><p>指令：<code>$ git commit --amend -m &quot;修改描述&quot;</code></p>
<p>修改當前分支最新一次的提交描述。</p>
<h3 id="追加檔案到最新的提交節點"><a href="#追加檔案到最新的提交節點" class="headerlink" title="追加檔案到最新的提交節點"></a><strong>追加檔案到最新的提交節點</strong></h3><p>指令：<code>$ git commit --amend --no-edit</code></p>
<p>執行指令時如果未加上 <code>--no-edit</code> 參數，會跳出 Vim 編輯視窗。</p>
<hr>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支（branch）是開發者在團隊協作一個專案時，會需要使用到的 Git 架構內容；可以理解成將當前儲存庫的所有檔案複製一份，而這兩個版本可以獨立進行檔案新增、編輯與修改。這樣的好處是檔案的內容如果需要做更動，就可以先移動到另一個分支動作，同時也不用擔心影響到原本的檔案狀態。</p>
<p>以下列出常見分支名稱與主要用途：</p>
<ul>
<li>master（預設分支）：用來合併 develop，合併時才會產生提交節點。</li>
<li>develop（開發分支）：用來合併 feature 分支，合併時才會產生提交節點。</li>
<li>feature：用來開發功能、修改錯誤。</li>
</ul>
<p>進入分支之前，需要先對 HEAD 指標有些概念，可以把它理解成當前分支上的所在位置；資料夾路徑可以看到目前 HEAD 的指向，如下圖所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user@DESKTOP-LV1TU83 MINGW64 ~/Desktop/Project (master)  # 目前 HEAD 正指向 master 分支</span><br></pre></td></tr></table></figure>

<h3 id="檢視當前所有分支"><a href="#檢視當前所有分支" class="headerlink" title="檢視當前所有分支"></a>檢視當前所有分支</h3><p>指令：<code>$ git branch</code></p>
<p>查詢目前本地端儲存庫的所有分支。</p>
<p>以 Project（本地端儲存庫）為例，輸入指令後顯示以下訊息，表示目前本地端有兩個分支，分別為 develop 與 master，而符號 <code>*</code> 表示當前 HEAD 正指向的分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  develop</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<h3 id="移動-HEAD-到指定提交節點"><a href="#移動-HEAD-到指定提交節點" class="headerlink" title="移動 HEAD 到指定提交節點"></a>移動 HEAD 到指定提交節點</h3><p>指令：<code>$ git checkout SHA-1前4碼</code></p>
<p>用來查看某一次的 commit 內容；而 SHA-1 值可透過 <code>$ git log</code> 查詢，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commit ce9d92723df3302156a9523453c0fff21f7fdcc0</span><br><span class="line">Author: Cliff Chu &lt;wave99487chu@gmail.com&gt;</span><br><span class="line">Date:   Sun Jan 23 17:53:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    新增 index</span><br></pre></td></tr></table></figure>

<p>接著輸入指令 <code>$ git checkout ce9d</code> 就能夠移動 HEAD 到這次 commit 節點，如果要回到原本位置，只需要輸入 <code>$ git checkout 當前分支名稱</code> 即可。</p>
<h3 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h3><p>指令：<code>$ git branch 分支名稱</code></p>
<p>建立一個新的分支，但是 HEAD 的指向不變。</p>
<h3 id="切換當前分支"><a href="#切換當前分支" class="headerlink" title="切換當前分支"></a>切換當前分支</h3><p>指令：<code>$ git checkout 分支名稱</code></p>
<p>移動 HEAD 到指定分支的最後一次提交節點。</p>
<h3 id="合併分支-快轉模式（Fast-Forward）"><a href="#合併分支-快轉模式（Fast-Forward）" class="headerlink" title="合併分支 - 快轉模式（Fast-Forward）"></a><strong>合併分支 - 快轉模式（Fast-Forward）</strong></h3><p>指令：<code>$ git merge 合併的分支名稱</code></p>
<p>快轉模式下，兩分支合併後路線重疊，並且不會產生額外的提交節點。</p>
<p>兩分支合併之前，如果最後提交節點都在同一個位置，合併時就會產生快轉模式（Fast - Forward），如下圖所示：</p>
<p><img src="https://i.imgur.com/q0db0Wg.png"></p>
<p>已知合併前的圖中，feature 分支比 master 分支多了兩次提交節點，但是 master 並沒有新增自己的節點，所以 master 分支的檔案在 feature 分支也都有，可以理解成 feature 分支只是 master 分支未來的版本而已，因此進行合併後，master 分支與 feature 分支會重疊，並且不會產生額外的合併節點，這種合併模式稱為 “快轉模式（Fast - Forward）”。</p>
<h3 id="合併分支-關閉快轉模式"><a href="#合併分支-關閉快轉模式" class="headerlink" title="合併分支 - 關閉快轉模式"></a><strong>合併分支 - 關閉快轉模式</strong></h3><p>指令：$ git merge 合併的分支名稱 –no-ff</p>
<p>非快轉模式下，兩分支合併後會產生額外的提交節點。</p>
<p>下圖為加上參數 <code>--no-ff</code> 關閉快轉模式的例子：</p>
<p><img src="https://i.imgur.com/zpwHsHZ.png"></p>
<p>圖中合併前的狀態前面的案例相同，因此在正常情況下合併兩分支就會產生快轉模式；但是也可以在合併時加上參數 <code>--no-ff</code> 來關閉快轉模式，如此一來，兩分支在合併後不但不會重疊，並且會額外產生新的提交節點。</p>
<p>補充說明：</p>
<p>兩分支在非快轉模式下進行合併時，可能會跳出以下訊息，表示需要輸入合併的原因；此時可以按下 i 進入輸入模式，接著將黃色文字的部分改成合併的簡單敘述（同 commit 訊息），輸入完畢後再按下 Esc 退出輸入模式，最後在底部輸入 <code>：wq</code> 即可完成合併並回到原來的畫面。</p>
<p><img src="https://i.imgur.com/LVudQXm.png"></p>
<h3 id="將當前分支合併到指定分支前"><a href="#將當前分支合併到指定分支前" class="headerlink" title="將當前分支合併到指定分支前"></a><strong>將當前分支合併到指定分支前</strong></h3><p>指令： <code>$ git rebase 要合併的分支名稱</code></p>
<p>複製當前分支所有的提交節點，合併在指定的分支前面。</p>
<p>需要注意複製的提交節點會重新產生個別的 SHA-1，與原先的節點彼此並不相同，而原先的節點會隨著時間被 Git 機制回收。</p>
<p>補充說明：</p>
<p>使用 <code>rebase</code> 合併後，無法透過 <code>$ git reset HEAD^</code> 還原回合併前的狀態，而是會還原到前一個節點上；如果要還原回合併前的狀態，可以使用指令 <code>$ git reset ORIG_HEAD --hard</code>。</p>
<p>下列圖片為兩分支在使用 <code>rebase</code> 合併時，可能產生的衝突：</p>
<p><img src="https://i.imgur.com/sz7xcOB.png"></p>
<p>合併時顯示上述訊息，表示檔案內容有衝突，此時可以開啟編輯器查看衝突的部分，以下圖為例：</p>
<p><img src="https://i.imgur.com/wxaxXFa.png"></p>
<p>確認完衝突的檔案內容後，只需要在終端機再次將檔案加入暫存區，接著輸入以下指令再次嘗試合併即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure>



<h3 id="指定提交節點合併到當前分支前"><a href="#指定提交節點合併到當前分支前" class="headerlink" title="指定提交節點合併到當前分支前"></a><strong>指定提交節點合併到當前分支前</strong></h3><p>指令： <code>$ git cherry-pick SHA-1 SHA-1</code></p>
<p>複製指定的單一或數個提交節點，合併在當前分支前面。</p>
<p>以下圖為例，嘗試將 feature 分支的 add style 與 add js 兩個合併節點，合併在 master 分支前面：</p>
<p><img src="https://i.imgur.com/UyuDjy1.png"></p>
<p>可以從 sourcetree 介面中的右側看到每個節點的 SHA-1，在取得 add style 與 add js 兩個節點的值後，在 master 分支執行以下指令，即可複製被指定的兩個節點，並合併在當前分支前面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">＄ git cherry-pick 7316ad7 3372681</span><br></pre></td></tr></table></figure>

<p>如果希望被複製過來的節點不要直接進行合併，可以在指令後方加上參數 <code>--no-commit</code>，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">＄ git cherry-pick 7316ad7 3372681 --no-commit</span><br></pre></td></tr></table></figure>

<p>此時被複製過來的節點會被拆除，並將節點的檔案加入暫存區，也可以透過 <code>$ git status</code> 查詢狀態，會發現暫存區目前有兩個檔案等待提交，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   all.js</span><br><span class="line">        new file:   style.css</span><br></pre></td></tr></table></figure>

<p>確認檔案沒問題後，就可以進行提交，結果如下圖所示：</p>
<p><img src="https://i.imgur.com/wJeP32p.png"></p>
<hr>
<h2 id="標籤（Tag）"><a href="#標籤（Tag）" class="headerlink" title="標籤（Tag）"></a>標籤（Tag）</h2><p>開發專案過程中，會因為檔案不斷新增、刪除或修改而增加許多提交節點，雖然彼此都有獨自的版本描述，但是這樣很難去區分彼此之間的重要程度，如不同時間點的上線版本；因此為了有效區別，可以使用標籤相關指令。</p>
<p>補充說明：</p>
<p>標籤和分支都是指向某一個提交節點的指標，但是兩者的差別在於標籤只會指向固定的提交節點，而分支會隨著提交的增加而移動到最新的節點。</p>
<h3 id="新增標籤"><a href="#新增標籤" class="headerlink" title="新增標籤"></a>新增標籤</h3><p>指令：<code>$ git tag 標籤名稱</code></p>
<p>在當前位置新增一個標籤，可使用指令 <code>$ git tag</code> 來查詢標籤。</p>
<h3 id="新增標示標籤"><a href="#新增標示標籤" class="headerlink" title="新增標示標籤"></a>新增標示標籤</h3><p>指令：<code>$ git tag -am &quot;標示內容&quot; 標籤名稱</code></p>
<p>在當前位置新增一個標籤，並加入詳細的敘述，可以使用指令 <code>$ git tag -n</code> 來檢視標籤的詳細內容。</p>
<h3 id="刪除標籤"><a href="#刪除標籤" class="headerlink" title="刪除標籤"></a>刪除標籤</h3><p>指令：<code>$ git tag -d 標籤名稱</code></p>
<p>可以將標籤想像成一張貼紙，撕掉並不會影響提交的檔案狀態。</p>
<h3 id="移動到指定標籤位置"><a href="#移動到指定標籤位置" class="headerlink" title="移動到指定標籤位置"></a>移動到指定標籤位置</h3><p>指令：<code>$ git checkout 標籤名稱</code></p>
<p>移動 HEAD 的位置到指定標籤上查看檔案狀態，輸入 <code>$ git checkout 分支名稱</code> 即可回到原本內容。</p>
<!-- 標籤類似快照，移動過去時無法編輯檔案，待補充說明 -->

<hr>
<h2 id="暫存（Stash）"><a href="#暫存（Stash）" class="headerlink" title="暫存（Stash）"></a>暫存（Stash）</h2><p>團隊開發專案的過程中，常常會開發到一半出現突發狀況要處理，其中一種作法是，先將目前的工作內容加入暫存區並提交，解決突發狀況後，再透過指令 <code>$ git reset --soft HEAD^</code> 刪除最後一次的提交節點，並還原提交前的所有狀態；另外一種做法則是透過 <code>$ git stash</code> 相關指令來暫存檔案狀態。</p>
<p>補充說明：</p>
<p>暫存（stash）和暫存區（Staging Area）兩者屬於不同的概念。</p>
<!-- 什麼不同概念，待補充 -->

<h3 id="暫存當前的檔案狀態"><a href="#暫存當前的檔案狀態" class="headerlink" title="暫存當前的檔案狀態"></a>暫存當前的檔案狀態</h3><p>指令：<code>$ git stash</code></p>
<p>暫存當前工作目錄已被追蹤與暫存區（Staging Area）的檔案狀態，暫存後無法透過 <code>$ git status</code> 查詢檔案。</p>
<h3 id="檢視暫存列表"><a href="#檢視暫存列表" class="headerlink" title="檢視暫存列表"></a>檢視暫存列表</h3><p>指令：<code>$ git stash list</code></p>
<p>透過指令 <code>$ git stash</code> 暫存的檔案可以使用上述指令來查詢，以下為查詢結果範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 15988d5 add index</span><br></pre></td></tr></table></figure>

<h3 id="還原暫存的檔案狀態"><a href="#還原暫存的檔案狀態" class="headerlink" title="還原暫存的檔案狀態"></a>還原暫存的檔案狀態</h3><p>指令：<code>$ git stash pop</code></p>
<p>將暫存的檔案狀態還原到當前分支上，有搬運檔案的功能。</p>
<h3 id="清除最新暫存"><a href="#清除最新暫存" class="headerlink" title="清除最新暫存"></a>清除最新暫存</h3><p>指令：<code>$ git stash drop</code></p>
<p>刪除暫存列表最新的暫存紀錄，並無法還原。</p>
<h3 id="清除全部暫存"><a href="#清除全部暫存" class="headerlink" title="清除全部暫存"></a>清除全部暫存</h3><p>指令：<code>$ git stash clear</code></p>
<p>刪除暫存列表所有的暫存紀錄，並無法還原。</p>
<hr>
<h2 id="遠端儲存庫操作指令"><a href="#遠端儲存庫操作指令" class="headerlink" title="遠端儲存庫操作指令"></a>遠端儲存庫操作指令</h2><p>本篇內容主要是在著重講述 Git 的基本操作，因此先不討論遠端儲存庫的建立方式與相關內容。</p>
<h3 id="連結遠端儲存庫"><a href="#連結遠端儲存庫" class="headerlink" title="連結遠端儲存庫"></a>連結遠端儲存庫</h3><p>指令：<code>$ git remote add origin 遠端儲存庫網址</code></p>
<p>指令中的 <code>origin</code> 為遠端儲存庫的預設名稱；實務上通常會有多個儲存庫，如正式主機與測試主機；使用者可根據儲存庫用途來自訂名稱。</p>
<h3 id="查詢遠端儲存庫"><a href="#查詢遠端儲存庫" class="headerlink" title="查詢遠端儲存庫"></a>查詢遠端儲存庫</h3><p>指令：<code>$ git remote</code></p>
<p>查詢與本地端連結的遠端儲存庫的名稱；加入參數 <code>-v</code> 可以查詢詳細名稱與路徑。</p>
<h3 id="複製遠端儲存庫"><a href="#複製遠端儲存庫" class="headerlink" title="複製遠端儲存庫"></a>複製遠端儲存庫</h3><p>指令：<code>$ git clone 遠端儲存庫網址</code></p>
<p>複製遠端資料到本地端資料夾，並建立工作目錄與本地端儲存庫（.git 資料夾），在指令後方加上 <code>-b 遠端分支名稱</code> 可以指定要複製的遠端分支。</p>
<p>補充說明：</p>
<p>上述指令通常會在本地端尚未存在遠端的資料的形況下執行；而後續本地端的資料更新都是透過 <code>$ git pull</code> 相關指令來操作。</p>
<h3 id="推送本地端分支到遠端分支"><a href="#推送本地端分支到遠端分支" class="headerlink" title="推送本地端分支到遠端分支"></a>推送本地端分支到遠端分支</h3><p>指令：<code>$ git push 遠端儲存庫名稱 遠端分支名稱</code></p>
<p>與本地端連結的遠端儲存庫如果有一個以上，在推送的時候要注意遠端儲存庫名稱，是否與要推送的遠端儲存庫相同，避免推送到錯誤的遠端。</p>
<p>補充說明：</p>
<p>第一次在推送時，如果在指令中加入參數 <code>-u</code>，Git 就會記錄這次的推送行為，後續在推送本地端資料回遠端時，只需要輸入指令 <code>$ git push</code> 即可，但是也會遇到無法推送的情形，這部分會在 <code>$ git pull</code> 的部分說明。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push -u 遠端儲存庫名稱 遠端分支名稱</span><br></pre></td></tr></table></figure>

<h3 id="變更遠端儲存庫名稱"><a href="#變更遠端儲存庫名稱" class="headerlink" title="變更遠端儲存庫名稱"></a>變更遠端儲存庫名稱</h3><p>指令：<code>$ git remote rename 原儲存庫名稱 修改後名稱</code></p>
<p>預設的遠端儲存庫名稱為 <code>origin</code>。</p>
<h3 id="複製遠端儲存庫分支與本地端分支合併"><a href="#複製遠端儲存庫分支與本地端分支合併" class="headerlink" title="複製遠端儲存庫分支與本地端分支合併"></a>複製遠端儲存庫分支與本地端分支合併</h3><p>指令：<code>$ git pull 遠端儲存庫名稱 遠端分支名稱</code></p>
<p>團隊協作開發專案時，因為每個人的進度不同，會需要不定時更新遠端的資料回本地端；與 <code>$ git clone</code> 不同的是，<code>$ git pull</code> 是使用在本地端已經存在遠端的資料，但是需要更新檔案進度時。</p>
<p>推送本地端資料回遠端前，如果遠端資料已更新，本地端在推送時就會出現以下衝突訊息：</p>
<p><img src="https://i.imgur.com/5Pu4KZi.png"></p>
<p>此時需要使用 <code>$ git pull</code> 先將遠端最新的資料更新（複製）到本地端，在複製遠端資料時會跳出以下訊息，表示需要將遠端資料與本地端進行合併。</p>
<p><img src="https://i.imgur.com/PnkSzXM.png"></p>
<p>從上述行為可得知，指令 <code>$ git pull</code> 做的事情是將遠端分支複製一份到本地端，再直接進行合併的動作。</p>
<h3 id="複製遠端儲存庫分支與本地端分支等待合併"><a href="#複製遠端儲存庫分支與本地端分支等待合併" class="headerlink" title="複製遠端儲存庫分支與本地端分支等待合併"></a>複製遠端儲存庫分支與本地端分支等待合併</h3><p>指令：<code>$ git fetch 遠端儲存庫名稱 遠端分支名稱</code></p>
<p>與 <code>$ git pull</code> 不同的是，使用 <code>$ git fetch</code> 取得的遠端最新檔案會產生一個 FETCH_HEAD，表示遠端分支的最新狀態 <code>遠端儲存庫名稱/遠端儲存庫分支</code> 與 <code>遠端儲存庫名稱/HEAD</code>，並額外產生提交節點在本地端當前分支前面，使用者檢查後再決定是否要與本地端分支合併，合併指令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge 遠端儲存庫名稱/遠端儲存庫分支</span><br></pre></td></tr></table></figure>

<p>從上述行為可得知，<code>$ git pull</code> 做的動作相當於 <code>$ git fetch</code> 加上 <code>$ git merge</code>。</p>
<!-- 可以補充說明 -->

<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><em><a href="https://gitbook.tw/chapters/using-git/amend-commit2">如何使用 –amend 追加檔案</a></em></li>
<li><em><a href="https://ithelp.ithome.com.tw/articles/10211795">Fast-Forward 快轉模式詳細介紹</a></em></li>
<li><em><a href="https://gitbook.tw/chapters/faq/stash">Git Stash 詳細使用方式</a></em></li>
<li><em><a href="https://gitbook.tw/chapters/using-git/reset-commit">Git Reset 使用模式</a></em></li>
<li><em><a href="https://gitbook.tw/chapters/branch/merge-with-rebase">使用 Git Rebase 合併</a></em></li>
<li><em><a href="https://iter01.com/539474.html">Git Fetch 詳細介紹</a></em></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>學習筆記</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap5 即時筆記（待刪除）</title>
    <url>/2022-04-27-Bootstrap5-draft/</url>
    <content><![CDATA[<p>本篇是為了讓我練習 Bootstrap5 而即時撰寫的筆記，一段時間後會轉為草稿或刪除，標籤、文章分類部分沒有添加；內容雜亂沒有整理和反覆校正，不適閱讀請轉道。</p>
<span id="more"></span>

<h2 id="Bootstrap-官方文件"><a href="#Bootstrap-官方文件" class="headerlink" title="Bootstrap 官方文件"></a>Bootstrap 官方文件</h2><p>官網中導覽列可以看到 Home / Docs / Examples / Icons / Expo / Blog 以上分類，本篇重點著重在 Docs 文件內容。</p>
<h3 id="文件簡介"><a href="#文件簡介" class="headerlink" title="文件簡介"></a>文件簡介</h3><ul>
<li>Getting Started（快速開始）</li>
<li>Customize（自定義）</li>
<li>Layout（排版）</li>
<li>Content（內容）</li>
<li>Form（表單）</li>
<li>Components（元件）</li>
<li>Helpers（幫助）</li>
<li>Utilities（通用類別）</li>
<li>Extend（擴增）</li>
<li>About（關於）</li>
</ul>
<p>上述任意項目中，除了官方提供的範例以外，也可以透過點選頁面右邊的相關細項（On this page），直接滑動到想要尋找的內容。</p>
<h3 id="Bootstrap-Icons"><a href="#Bootstrap-Icons" class="headerlink" title="Bootstrap Icons"></a>Bootstrap Icons</h3><p>屬於一個獨立的套件，不需要載入 Bootstrap 即可使用。</p>
<h3 id="引入-Bootstrap"><a href="#引入-Bootstrap" class="headerlink" title="引入 Bootstrap"></a>引入 Bootstrap</h3><p>以 CDN 方式引入為例，若是要單純使用樣式，只需要在 <code>&lt;head&gt;</code> 中加入以下內容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Bootstrap 中，會有許多 <code>data-bs</code> 開頭的功能，只有上述內容是無法使用 JS 相關功能的，因此需要在 <code>&lt;body&gt;</code> 中加入以下內容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>官方建議將 Bootstrap 的 Javascript script 標籤，放置在 body 結尾標籤之前。</p>
</blockquote>
<h3 id="HTML-標籤中的-Class"><a href="#HTML-標籤中的-Class" class="headerlink" title="HTML 標籤中的 Class"></a>HTML 標籤中的 Class</h3><p>Bootstrap 有著大量的 Class 屬性名稱，分別都代表不同的結構、樣式或狀態等，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>從上述範例中可以看到，<code>&lt;button&gt;</code> 套用了兩個樣式，分別為 <code>btn</code>（結構） 與 <code>btn-primary</code>（樣式）。</p>
<p>補充說明：</p>
<p>也可以使用下面的方法，直接在 html 標籤中加入 Bootstrap 的變數名稱來設定樣式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: var(--bs-primary)&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reboot（重置）"><a href="#Reboot（重置）" class="headerlink" title="Reboot（重置）"></a>Reboot（重置）</h2><h3 id="CSS-Reset"><a href="#CSS-Reset" class="headerlink" title="CSS Reset"></a>CSS Reset</h3><p>由於 Border、Padding 會影響元素運算後的寬度，而 Bootstrap 預設就已經載入 <code>box-sizing: border-box;</code> 屬性，因此元素定義的寬度會等於實際呈現的寬度。</p>
<blockquote>
<p>Bootstrap 5 預設的 Reset 設定是使用 Normalize。</p>
</blockquote>
<h3 id="CSS-Variables"><a href="#CSS-Variables" class="headerlink" title="CSS Variables"></a>CSS Variables</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box bg-primary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;local&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box bg-primary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bg-primary</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--primary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述為範例原始碼，而 CSS 變數的定義方式分為以下兩種（兩者位置皆在上方 css 區域 .box 之前）：</p>
<p><strong>定義於全域</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --primary: <span class="number">#00cc99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>透過上述方法定義的變數，可以在任何區域呼叫，並且所有元素皆可以套用。</p>
<p><strong>定義於區域（進階）</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.local</span> &#123;</span><br><span class="line">  --primary: <span class="number">#0099cc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定義在某區域（範圍）內的變數，只有該區域內的元素可以使用該變數，以上述原始碼為例，<code>--primary: #0099cc;</code> 只有 local 的內層元素可以進行套用。</p>
<h3 id="單位-em-rem"><a href="#單位-em-rem" class="headerlink" title="單位 em / rem"></a>單位 em / rem</h3><p>以下為範例原始碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;em-2&quot;</span>&gt;</span></span><br><span class="line">    Lorem...</span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&quot;em-2&quot;</span>&gt;</span>Lorem...<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rem-2&quot;</span>&gt;</span></span><br><span class="line">    Lorem...</span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&quot;rem-2&quot;</span>&gt;</span>Lorem...<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-class">.em-2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rem-2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>em</strong></p>
<p>網頁文字的預設大小為 16px，而屬性值 2em 表示兩倍的文字大小，因此 HTML 第 3 行的文字大小為 32px；而 em 的特性就是文字大小會繼承父層的文字尺寸，再重新計算，因此 HTML 第 4 行的文字大小會是 64px（32px * 2）。</p>
<p><strong>rem</strong></p>
<p>rem 文字大小的計算方式，是根據最外層（html / :root）的文字大小來決定，可以理解成網頁預設的文字大小是多少，1rem 就會是多少，因此 HTML 第 8 行的文字大小為 32px（16px * 2）。</p>
<h3 id="系統預設字體"><a href="#系統預設字體" class="headerlink" title="系統預設字體"></a>系統預設字體</h3><p>以下為不同作業系統上的字體設定：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">作業系統 | 預設字體 | 英文字體 | 中文字體</span><br><span class="line">Windows | 無 | Segoe UI | Microsoft JhengHei</span><br><span class="line">Mac OS | -apple-system | San Francisco / Helvetica Neue | PingFang / Heiti TC</span><br><span class="line">iOS | -apple-system | San Francisco / Helvetica Neue | PingFang / Heiti TC</span><br><span class="line">Android | 無 | Roboto | Noto Sans</span><br></pre></td></tr></table></figure>

<p>而 Bootstrap 的預設字體設定如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$font-family-sans-serif</span>:</span><br><span class="line">    // 使用系統預設的字體</span><br><span class="line">    system-ui,</span><br><span class="line">    -apple-system,</span><br><span class="line">    // 指定已知的系統 UI 字體</span><br><span class="line">    BlinkMacSystemFont,</span><br><span class="line">    <span class="string">&quot;Segoe UI&quot;</span>,</span><br><span class="line">    Roboto,</span><br><span class="line">    <span class="string">&quot;Helvetica Neue&quot;</span>, Arial,</span><br><span class="line">    <span class="string">&quot;Noto Sans&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Liberation&quot;</span>,</span><br><span class="line">    // CSS 定義字體、Emoji</span><br><span class="line">    sans-serif,</span><br><span class="line">    <span class="string">&quot;Apple Color Emoji&quot;</span>, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>, <span class="string">&quot;Noto Color Emoji&quot;</span> !default;</span><br></pre></td></tr></table></figure>

<p>因為 Bootstrap 只針對預設字體與英文字體做設定，因此中文字體相關設定（如：微軟正黑體）就需要手動加入。</p>
<h2 id="Typography（文字排版）"><a href="#Typography（文字排版）" class="headerlink" title="Typography（文字排版）"></a>Typography（文字排版）</h2><h3 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h3><p><strong>標題與標題文字</strong></p>
<p>雖然可以透過 <code>&lt;h1&gt;</code>～<code>&lt;h6&gt;</code> 的方式來設定文字大小，但是有時候只是想單純設定文字大小，而不是定義文字在頁面中的重要程度時，可以使用 class 名稱來取代使用標籤，以 <code>&lt;h1&gt;</code> 為例，<code>&lt;h1&gt;</code> 是表示頁面中最重要的內容，而如果只是想使用 <code>&lt;h1&gt;</code> 的文字大小時，設定方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 錯誤方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一段文字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正確方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>我是一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同理，雖然 <code>&lt;h1&gt;</code> 有預設的文字大小，但是也可以透過想同的做法來設定 <code>&lt;h1&gt;</code> 的文字大小：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h2&quot;</span>&gt;</span>我是一段文字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>小標題</strong></p>
<p>如果希望標題段落有大、小標題的區別，可使用 <code>&lt;small&gt;</code> 標籤來設定，以下為範例原始碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">    我是小標題</span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>小標題的副標題<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&lt;small&gt;</code> 標籤中的文字大小為 0.875rem。</p>
</blockquote>
<p><strong>顯示標題</strong></p>
<p>若不滿意預設的 <code>&lt;h1&gt;</code>～<code>&lt;h6&gt;</code> 文字大小，也能透過 class 的屬性 <code>display-1</code>～ <code>display-6</code> 來設定較大文字大小，以下為範例原始碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-1&quot;</span>&gt;</span>我是標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;display-2&quot;</span>&gt;</span>我是標題<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;display-3&quot;</span>&gt;</span>我是標題<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="對齊"><a href="#對齊" class="headerlink" title="對齊"></a>對齊</h3><p><strong>文字對齊</strong></p>
<p>Bootstrap 5 的文字對齊方向邏輯如下：</p>
<ul>
<li>start = 靠左、從左到右</li>
<li>end = 靠右、從右到左</li>
<li>center = 置中</li>
</ul>
<p>以下方原始碼為例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-start&quot;</span>&gt;</span>文字靠左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-end&quot;</span>&gt;</span>文字靠右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>文字置中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>列表樣式</strong></p>
<p>可使用下列類別，變更列表樣式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-unstyled&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此類設定僅適用個別 ul。</p>
</blockquote>
<p><strong>列表行內</strong></p>
<p>列表中的每個 <code>&lt;li&gt;</code> 預設的型態為區塊元素，若希望內容項目以並排的方式呈現，可以使用以下類別來設定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-inline-item&quot;</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-inline-item&quot;</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-inline-item&quot;</span>&gt;</span>列表三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述 <code>&lt;li&gt;</code> 在並排後，彼此之間預設會有 0.5rem 的外距。</p>
</blockquote>
<h2 id="圖片（Images）"><a href="#圖片（Images）" class="headerlink" title="圖片（Images）"></a>圖片（Images）</h2><h3 id="響應式"><a href="#響應式" class="headerlink" title="響應式"></a>響應式</h3><p>Bootstrap 5 的圖片預設並沒有響應式的功能，此時可使用 <code>img-fluid</code> 類別，讓單一圖片能夠隨著瀏覽器寬度自適應縮放大小：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-fluid&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="圖片樣式"><a href="#圖片樣式" class="headerlink" title="圖片樣式"></a>圖片樣式</h3><p><strong>設定圓角</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;rounded&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>圖片縮略圖</strong></p>
<p>在圖片標籤上使用 <code>img_thumbnail</code> 類別後，圖片就會呈現出 1px 的邊框。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img_thumbnail&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="圖片置中"><a href="#圖片置中" class="headerlink" title="圖片置中"></a>圖片置中</h3><p>圖片預設的型態為 <code>display: inline-block;</code> ，因此可使用下方兩種方式，使圖片至中對齊：</p>
<p><strong>mx-auto</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mx-auto&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>text-center</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>text-center</code> 須設定在圖片的父層元素才有置中效果。</p>
</blockquote>
<h3 id="圖片區"><a href="#圖片區" class="headerlink" title="圖片區"></a>圖片區</h3><p>如果想幫圖片加上文字描述，可以使用 <code>figure</code> 標籤，並在標籤中設定 <code>figure</code> 類別，而內層則是會分別放入 <code>&lt;img&gt;</code> 與 <code>&lt;figcaption&gt;</code> 兩個子元素，最後在後者加上 <code>figure-caption</code> 類別即可完成該圖片區，以下為範例原始碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">&quot;figure&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;figure-img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span> <span class="attr">class</span>=<span class="string">&quot;figure-caption&quot;</span>&gt;</span>圖片的描述<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表格（Form）"><a href="#表格（Form）" class="headerlink" title="表格（Form）"></a>表格（Form）</h2><h3 id="基本結構"><a href="#基本結構" class="headerlink" title="基本結構"></a>基本結構</h3><p>如果需要使用 Bootstrap 5 表格，<code>table</code> 標籤內層結構必須存在 <code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code> 兩個元素，但是無論有沒有引入 Bootstrap，在表格上會建議一律使用完整的表格架構去設計表格，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span> <span class="comment">&lt;!-- 必要 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span> <span class="comment">&lt;!-- 必要 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>購買項目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span> <span class="comment">&lt;!-- 必要 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>皮卡丘<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>雷之石<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>小智障<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>冠軍獎盃<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span> <span class="comment">&lt;!-- 視內容需求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>#表尾<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名表尾<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>購買項目表尾<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述範例 <code>&lt;thead&gt;</code> 中，<code>&lt;th&gt;</code> 標籤內使用的 <code>scope= &quot;col&quot;</code> 表示一橫列群組（第 4 行～第 6 行）；反之，<code>&lt;tbody&gt;</code> 中 <code>&lt;th&gt;</code> 標籤內所使用的 <code>scope= &quot;row&quot;</code> 表示一直欄群組，最後需要在最外層 <code>&lt;table&gt;</code> 標籤中加入類別 <code>table</code>，才能正確套用 Bootstrap 表格樣式。</p>
<h3 id="表格色彩"><a href="#表格色彩" class="headerlink" title="表格色彩"></a>表格色彩</h3><p><strong>使用情境色彩</strong></p>
<p>Bootstrap 預設的情境色彩變數共有下列幾種：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* variable */</span></span><br><span class="line">$theme-colors: (</span><br><span class="line">	<span class="string">&quot;primary&quot;</span>:    $primary,</span><br><span class="line">	<span class="string">&quot;secondary&quot;</span>:  $secondary,</span><br><span class="line"> 	<span class="string">&quot;success&quot;</span>:    $success,</span><br><span class="line">  	<span class="string">&quot;info&quot;</span>:       $info,</span><br><span class="line">	<span class="string">&quot;warning&quot;</span>:    $warning,</span><br><span class="line">	<span class="string">&quot;danger&quot;</span>:     $danger,</span><br><span class="line">	<span class="string">&quot;light&quot;</span>:      $light,</span><br><span class="line">	<span class="string">&quot;dark&quot;</span>:       $dark</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>可依據喜好，在不同的情境下使用上述變數設定，以表格為例，如果要將整個表格的顏色變更為 <code>$primary</code>，可在 <code>&lt;table&gt;</code> 標籤中加入以下類別設定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-primary&quot;</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>加上條文行色彩</strong></p>
<p>除了主題色，也可以在 <code>&lt;table&gt;</code> 標籤中加入類別 <code>table-striped</code> 來使內容區隔更加明顯：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped&quot;</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格-Hover-效果"><a href="#表格-Hover-效果" class="headerlink" title="表格 Hover 效果"></a><strong>表格 Hover 效果</strong></h3><p>如果要設定表格的鼠標滑入效果，只要在 <code>&lt;table&gt;</code> 標籤中加入類別 <code>table-hover</code> 即可，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover&quot;</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="啟用樣式"><a href="#啟用樣式" class="headerlink" title="啟用樣式"></a><strong>啟用樣式</strong></h3><p>在表格任意對應的標籤上加上類別 <code>table-active</code>，該欄位就會呈顯啟用狀態的效果，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-primary&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;table-active&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>購買項目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格邊框"><a href="#表格邊框" class="headerlink" title="表格邊框"></a><strong>表格邊框</strong></h3><p><strong>加上表格邊框</strong></p>
<p>如果要加入表格邊框，可以在 <code>&lt;table&gt;</code> 標籤中加入類別 <code>table-bordered</code> 即可，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered&quot;</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>設定邊框顏色</strong></p>
<p>在以加上邊框設定的表格上，可使用 <code>boder-顏色變數</code> 的方式來設定邊框顏色，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered border-dark&quot;</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小表格"><a href="#小表格" class="headerlink" title="小表格"></a>小表格</h3><p>若覺得預設的表格太大，可以在 <code>&lt;table&gt;</code> 標籤中加入類別 <code>table-sm</code>，此時表格就會相對較小，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-sm&quot;</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格文字對齊"><a href="#表格文字對齊" class="headerlink" title="表格文字對齊"></a>表格文字對齊</h3><p>表格內容文字的對齊方式，也可以使用通用類別來設定，以最常使用的垂直置中為例，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table align-middle&quot;</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表格標題"><a href="#表格標題" class="headerlink" title="表格標題"></a>表格標題</h3><p>在表格中，<code>&lt;thead&gt;</code> 並不一定會是表格的標題，因此當表格的標題需要另外呈現時，可以在 <code>&lt;table&gt;</code> 的子層加入標籤 <code>&lt;caption&gt;</code>，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table align-middle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格標題文字<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span>...<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>表格標題文字預設位置在表格下方，若想要變更位置到表格上方，可在 <code>&lt;table&gt;</code> 標籤中加入類別 <code>caption-top</code>。</p>
</blockquote>
<h3 id="響應式表格"><a href="#響應式表格" class="headerlink" title="響應式表格"></a>響應式表格</h3><p>當表格內容項目過多時，可能會超出表格寬度範圍，因此若要使表格具有響應式功能，建議在 <code>&lt;table&gt;</code> 標籤外新增一父層，並加上類別 <code>table-responsive</code>，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">		...</span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="斷點（Break-Point）"><a href="#斷點（Break-Point）" class="headerlink" title="斷點（Break Point）"></a>斷點（Break Point）</h2><p>表示網頁在特定的寬度下，會呈現不同的樣式，以下是 Bootstrap 5 的各個斷點：</p>
<table>
<thead>
<tr>
<th>Breakpoint</th>
<th>Class infix</th>
<th>Dimensions</th>
</tr>
</thead>
<tbody><tr>
<td>X-Small</td>
<td><em>None</em></td>
<td>&lt;576px</td>
</tr>
<tr>
<td>Small</td>
<td>sm</td>
<td>≥576px</td>
</tr>
<tr>
<td>Medium</td>
<td>md</td>
<td>≥768px</td>
</tr>
<tr>
<td>Large</td>
<td>lg</td>
<td>≥992px</td>
</tr>
<tr>
<td>Extra large</td>
<td>xl</td>
<td>≥1200px</td>
</tr>
<tr>
<td>Extra extra large</td>
<td>xxl</td>
<td>≥1400px</td>
</tr>
</tbody></table>
<h3 id="隱藏內容"><a href="#隱藏內容" class="headerlink" title="隱藏內容"></a>隱藏內容</h3><p>只要在任意標籤中加入類別 <code>d-none</code>，即可隱藏該標籤的所有內容，配合上述的類別名稱，可在不同的斷點設定不同的樣式，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box d-none&quot;</span>&gt;</span>斷點一<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     <span class="comment">&lt;!-- 頁面寬度 &lt; 576px 時，隱藏內容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box d-md-none&quot;</span>&gt;</span>斷點二<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- 頁面寬度 &gt; 768px 時，隱藏內容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box d-lg-none&quot;</span>&gt;</span>斷點三<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- 頁面寬度 &gt; 992px 時，隱藏內容 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="行動優先"><a href="#行動優先" class="headerlink" title="行動優先"></a>行動優先</h3><p>Bootstrap 5 屬於行動優先，以類別 sm 為例，當頁面寬度 “大於或等於 576px” 時，才會套用樣式設定，因此在設計排版時需要特別注意，需要<strong>先思考行動版，再補桌機版</strong>，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- box 內容在行動版上隱藏，桌面版顯示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box d-none d-lg-block&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述表示 box 預設為隱藏（行動版），但是在桌面版時，內容就會顯示。</p>
<blockquote>
<p>小訣竅：無論如何，請先以行動版做思考。</p>
</blockquote>
<h2 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h2><p>Bootstrap 中，Container 主要是用來定義最外層容器的寬度，在用上分別有 <code>container-fluid</code>（滿版寬度）、<code>container</code>（階段固定寬度）兩種類型。</p>
<h3 id="Container-fluid"><a href="#Container-fluid" class="headerlink" title="Container-fluid"></a>Container-fluid</h3><p>類別名稱 <code>container-fluid</code> 的寬度會隨者視窗大小自適應伸縮，在使用上不會去設定固定寬度，在不需要嚴謹的定義最大寬度時，就可以使用。</p>
<h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>若對於網頁內容寬度的階段美感都很要求，且需要最大寬度限制時，可使用類別 <code>container</code>。</p>
<h2 id="欄（Column）"><a href="#欄（Column）" class="headerlink" title="欄（Column）"></a>欄（Column）</h2><p>欄在使用上通常與 <code>container</code>、<code>row</code> 兩者脫離不了關係，範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，容器 <code>container</code> 內層為 <code>row</code>，主要是讓 <code>row</code> 內層的元素能夠並排（一列）顯示，且當元素超出 <code>container</code> 寬度時，該元素會自動換行；Bootstrap 中，<code>container</code> 預設欄位數為 12 欄，因此範例中第 3 行～第 11 行的 <code>box</code> 會因為寬度加總剛好等於 12 而並排成一列，第 14 行的 <code>box</code> 則會超出寬度而自動換行。</p>
<h3 id="等寬欄"><a href="#等寬欄" class="headerlink" title="等寬欄"></a>等寬欄</h3><p>若 <code>col-</code> 後方未加上任何數字，該 <code>col</code> 的寬度就會是剩餘空間的寬度，如果 <code>col</code> 存在數個，每個 <code>col</code> 會等寬併排成一列，因此如果確定 <code>col</code> 數量且要設計成等寬的形式時，<code>col-</code> 後方可以不需要加上數字。</p>
<h3 id="彈性寬度"><a href="#彈性寬度" class="headerlink" title="彈性寬度"></a>彈性寬度</h3><p>若使用類別 <code>col-auto</code> 設定寬度，該欄位就會根據該欄位的內容彈性調整寬度。</p>
<h3 id="朝狀"><a href="#朝狀" class="headerlink" title="朝狀"></a>朝狀</h3><p>欄位中也可以再加入內層的欄位，形成朝狀結構，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span> <span class="comment">&lt;!-- 必要加入 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span> <span class="comment">&lt;!-- 必要加入 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>row</code> 內層必須是 <code>col</code>，且只能存在 <code>col</code>，而 <code>col</code> 內層可以再使用 <code>row</code> 來新增 <code>col</code> 排版，但最外層必須是容器 <code>container</code> 或是 <code>container-fluid</code>。</p>
</blockquote>
<h3 id="響應式欄"><a href="#響應式欄" class="headerlink" title="響應式欄"></a>響應式欄</h3><p>欄位相關類別也可以搭配斷點進行響應式設計，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4 col-xl-3&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4 col-xl-3&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4 col-xl-3&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6 col-md-4 col-xl-3&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述範例表示手機版欄位會呈現三個並排，平板時會兩個並排，桌面板則會四個並排。</p>
<blockquote>
<p>當有存在其他中斷點時，可以不用加上類別 <code>col-12</code>。</p>
</blockquote>
<h2 id="欄間距（Gutter）"><a href="#欄間距（Gutter）" class="headerlink" title="欄間距（Gutter）"></a>欄間距（Gutter）</h2><h3 id="Gutter-運作概念"><a href="#Gutter-運作概念" class="headerlink" title="Gutter 運作概念"></a>Gutter 運作概念</h3><p>Bootstrap 中，每個 <code>col-*</code> 都有預設的左右 padding，而 gutter 就是由兩個 <code>col-*</code> 之間的 padding 相加所產生的，因此一個 <code>col-*</code> 實際的寬度會包含兩側 padding，但內容會因為兩側的 padding 而貼齊 gutter 邊線。</p>
<p>延續上述內容，因為每個 <code>col-*</code> 兩側都有獨立的 padding，因此容器 <code>container</code> 內部的左右兩側會多出一個 <code>col-*</code> 的 padding，即 gutter on outside，而 container 本身就有自己的 padding，所以這會讓內容顯得往內縮，因此 <code>row</code> 就會加上 <code>margin-left</code>、<code>margin-right</code> 的負數值，來消除 gutter on outside。</p>
<p>Gutter 是透過變數產生的，因此可以修改，如果要修改 gutter 數值，可以透過 <code>gx-*</code> 來調整，可使用數值為 0～5，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row gx-5&quot;</span>&gt;</span> <span class="comment">&lt;!-- 預設為 1.5rem --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>實際較常會運用在相近內容的群組上，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row gx-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述範例第 6 行因為加上 <code>gx-2</code>，因此視覺上比較有一個群處的感覺。</p>
<blockquote>
<p>Gutter 可使用的設定分別有 g-（水平與垂直）、gx-（水平）、gy-（垂直），也可以搭配中斷點設定；另外如果需要移除 gutter 時，可以將數值設定為 0。</p>
</blockquote>
<h3 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h3><p>除了可以在元素上加上 <code>col-*</code> 來設定欄數，也可以使用 <code>row-cols-&#123; 欄數 &#125;</code> 來設定，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 row-cols-* --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row row-cols-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不使用使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述範例中，兩者的結果是相同的，而行列式也可搭配中斷點設定，如 <code>row-cols-md-3</code>。</p>
<h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><p>可使用通用類別 <code>d-flex</code> 將容器加上 flex 屬性，必須加上該設定才能使用 flex 相關延伸設定，而 flex 有兩種形式呈現，範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">d-<span class="attribute">flex</span> &gt; 區塊會以滿版呈現</span><br><span class="line">d-inline-<span class="attribute">flex</span> &gt; 區塊寬度會根據內容決定（較少使用）</span><br></pre></td></tr></table></figure>

<h3 id="主軸"><a href="#主軸" class="headerlink" title="主軸"></a>主軸</h3><p>預設的軸線方向設定為 <code>flex-row</code>（由左至右），可使用 <code>flex-row-reverse</code> 來反轉起始方向，內容可使用 <code>justify-content</code> 來設定對齊位置，起點表示 <code>start</code>、終點表示 <code>end</code>。</p>
<h3 id="交錯軸"><a href="#交錯軸" class="headerlink" title="交錯軸"></a>交錯軸</h3><p>預設方向為由上而下，與主軸垂直交錯，內容可使用 <code>align-items</code> 來設定內容對齊位置。</p>
<h3 id="設定軸線方向"><a href="#設定軸線方向" class="headerlink" title="設定軸線方向"></a>設定軸線方向</h3><p>使用 <code>flex-column</code> 可將軸線方向變更為由上往下。</p>
<h3 id="內容水平對齊"><a href="#內容水平對齊" class="headerlink" title="內容水平對齊"></a>內容水平對齊</h3><p>水平對齊的方式，分為下列幾種：</p>
<ul>
<li>justify-content-start（靠左對齊）</li>
<li>justify-content-end（靠右對齊）</li>
<li>justify-content-center（水平置中對齊）</li>
<li>justify-content-between（左右對齊）</li>
<li>justify-content-around（兩物件水平間距相等）</li>
<li>justify-content-evenly（水平間距皆相等）</li>
</ul>
<h3 id="內容垂直對齊"><a href="#內容垂直對齊" class="headerlink" title="內容垂直對齊"></a>內容垂直對齊</h3><p>垂直對齊的方式，分為下列幾種：</p>
<ul>
<li>align-items-start（靠上對齊）</li>
<li>align-items-end（靠下對齊）</li>
<li>align-items-center（垂直置中對齊）</li>
<li>align-items-between（上下對齊）</li>
<li>align-items-around（兩物件垂直間距相等）</li>
<li>align-items-evenly（垂直間距皆相等）</li>
</ul>
<h3 id="屬性"><a href="#屬性" class="headerlink" title="屬性"></a>屬性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 外層屬性 */</span></span><br><span class="line"><span class="attribute">display</span> <span class="comment">/* 必備屬性 */</span></span><br><span class="line"><span class="comment">/* flex-flow */</span></span><br><span class="line">　<span class="attribute">flex-direction</span> <span class="comment">/* 決定 flex 軸線方向 */</span></span><br><span class="line">　<span class="attribute">flex-wrap</span> <span class="comment">/* 決定換行屬性 */</span></span><br><span class="line"><span class="attribute">justify-content</span> <span class="comment">/* 主軸的對齊 */</span></span><br><span class="line"><span class="attribute">align-items</span> <span class="comment">/* 交錯軸的對齊 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 內層屬性 */</span></span><br><span class="line"><span class="comment">/* flex */</span></span><br><span class="line">　<span class="attribute">flex-grow</span> <span class="comment">/* 伸展比 */</span></span><br><span class="line">　<span class="attribute">flex-shrink</span> <span class="comment">/* 收縮比 */</span></span><br><span class="line">　<span class="attribute">flex-basis</span> <span class="comment">/* 絕對值 */</span></span><br><span class="line"><span class="attribute">order</span> <span class="comment">/* 排序 */</span></span><br><span class="line"><span class="attribute">align-self</span> <span class="comment">/* 單一物件的交錯軸對齊 */</span></span><br></pre></td></tr></table></figure>

<h2 id="間距（Spacing）"><a href="#間距（Spacing）" class="headerlink" title="間距（Spacing）"></a>間距（Spacing）</h2><p>間距的使用格式為 <code>&#123; property &#125;&#123; sides &#125;-&#123; size &#125;</code>，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;p-5&quot;</span>&gt;</span>我是標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 上下左右皆增加 5 個單位的內距 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;px-5&quot;</span>&gt;</span>我是標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 水平方向（兩側）增加 5 個單位的內距 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;ps-5&quot;</span>&gt;</span>我是標題<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 單一方向（左側）增加 5 個單位的內距 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="內、外距"><a href="#內、外距" class="headerlink" title="內、外距"></a>內、外距</h3><p>間距的 <code>property</code> 分別可使用以下兩種設定：</p>
<ul>
<li>p = padding</li>
<li>m = margin </li>
</ul>
<h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><p>間距的 <code>sides</code> 可使用下列幾種設定：</p>
<ul>
<li>s = left</li>
<li>e = right</li>
<li>t = top</li>
<li>b = bottom</li>
<li>x = left &amp; right</li>
<li>y = top &amp; bottom</li>
</ul>
<h3 id="單位數值"><a href="#單位數值" class="headerlink" title="單位數值"></a>單位數值</h3><p>間距的 <code>size</code> 表示距離的單位，1 個單位預設的距離 <code>$spacer</code> 為 1rem，即 16px，可使用的單位數值如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">1 &gt; （預設）設定 <span class="attribute">margin</span> 或 <span class="attribute">padding</span> 為 <span class="variable">$spacer</span> * <span class="selector-class">.25</span></span><br><span class="line">2 &gt; （預設）設定 <span class="attribute">margin</span> 或 <span class="attribute">padding</span> 為 <span class="variable">$spacer</span> * <span class="selector-class">.5</span></span><br><span class="line">3 &gt; （預設）設定 <span class="attribute">margin</span> 或 <span class="attribute">padding</span> 為 <span class="variable">$spacer</span></span><br><span class="line">4 &gt; （預設）設定 <span class="attribute">margin</span> 或 <span class="attribute">padding</span> 為 <span class="variable">$spacer</span> * 1<span class="selector-class">.5</span></span><br><span class="line">5 &gt; （預設）設定 <span class="attribute">margin</span> 或 <span class="attribute">padding</span> 為 <span class="variable">$spacer</span> * 3</span><br><span class="line"><span class="attribute">auto</span> &gt; 設定 <span class="attribute">margin</span> 為 <span class="attribute">auto</span></span><br></pre></td></tr></table></figure>

<h3 id="清除元素預設距離"><a href="#清除元素預設距離" class="headerlink" title="清除元素預設距離"></a>清除元素預設距離</h3><p>Bootstrap 中部分元素預設會有自己的 padding、margin，因此若要清除該元素預設的距離，可將單位數值設定為 0 即可，以 <code>&lt;p&gt;</code> 標籤為例，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mb-0&quot;</span>&gt;</span>我是文字內容<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- p標籤預設存在 margin-bottom: 1rem --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="負值運用"><a href="#負值運用" class="headerlink" title="負值運用"></a>負值運用</h3><p>如果要將元素預設的 padding 清除，可在單位數值前面加入 <code>n</code>（負值的 margin），範例如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;box mx-n2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>該功能較少使用，因此預設是關閉的，需要透過手動調整 Bootstrap Sass 才可開啟功能。</p>
</blockquote>
<h3 id="Auto-margins"><a href="#Auto-margins" class="headerlink" title="Auto margins"></a>Auto margins</h3><p>如果要將一個區塊推移至任意一側，可使用 <code>&#123; property &#125;&#123; sides &#125;-auto</code> 方式來設定，以下為範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box mb-auto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上範例的結果會使 box 推到最上方的位置。</p>
<h3 id="Wrap"><a href="#Wrap" class="headerlink" title="Wrap"></a>Wrap</h3><p>使區塊內的元素在超出寬度時自動換行，僅可用於 flex 容器中。</p>
<h3 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h3><p>如果要變更元素的排列順序，可在該元素標籤內加入 <code>order-順序</code>，僅可用於 flex 容器中。</p>
<h3 id="Align-content"><a href="#Align-content" class="headerlink" title="Align-content"></a>Align-content</h3><p>如果要調整 flex 容器中所有內容的對齊方式，可使用 <code>align-content-</code> 來設定，但對單行內容無效果。</p>
<hr>
<h2 id="顏色（Colors）"><a href="#顏色（Colors）" class="headerlink" title="顏色（Colors）"></a>顏色（Colors）</h2><h3 id="連結內容顏色"><a href="#連結內容顏色" class="headerlink" title="連結內容顏色"></a>連結內容顏色</h3><p><code>text-顏色變數名稱</code> 並不適合用於連結，因為連結預設的 hover 效果在內容設定 <code>text-顏色變數名稱</code> 後，會無法顯示效果，如果要設定連結文字的顏色，會使用工具的 <code>link-顏色變數名稱</code> 來設定。</p>
<h2 id="浮動（Float）"><a href="#浮動（Float）" class="headerlink" title="浮動（Float）"></a>浮動（Float）</h2><p>該功能目前較少使用。</p>
<h3 id="繞圖排文"><a href="#繞圖排文" class="headerlink" title="繞圖排文"></a>繞圖排文</h3><p>範例原始碼如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;float-end ms-3&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    Lorem...</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述設定會使圖片靠右對齊，文字內容會繞著圖片進行排列。</p>
<h3 id="清除浮動"><a href="#清除浮動" class="headerlink" title="清除浮動"></a>清除浮動</h3><p>元素在設定浮動後，可能會造成父元素崩塌（抓不到內容高度），因此需要在父元素加上 <code>clearflx</code> 來清除浮動，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float-start&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box float-end&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="互動（Interaction）"><a href="#互動（Interaction）" class="headerlink" title="互動（Interaction）"></a>互動（Interaction）</h2><h3 id="Text-selection"><a href="#Text-selection" class="headerlink" title="Text-selection"></a>Text-selection</h3><p>相關設定如下：</p>
<ul>
<li>user-select-all &gt; 文字內容被點選時，段落將會被全選。</li>
<li>user-select-auto &gt; 該文字段落具有預設的選取行為。</li>
<li>user-select-none &gt; 文字內容被點選時，該段落無法被選取。</li>
</ul>
<h3 id="Pointer-events"><a href="#Pointer-events" class="headerlink" title="Pointer events"></a>Pointer events</h3><p>相關設定如下：</p>
<ul>
<li>pe-none &gt; 該段落的所有連結無法被點選。</li>
<li>pe-auto &gt; 該段落的所有連結無法被點選，但可在部分片段加上此類別設定，使片段內的該連結可被點選。</li>
</ul>
<h2 id="位置（Position）"><a href="#位置（Position）" class="headerlink" title="位置（Position）"></a>位置（Position）</h2><p>Bootstrap 的基礎位置設定如下所示：</p>
<ul>
<li>position-static</li>
<li>position-relative</li>
<li>position-absolute</li>
<li>position-fixed</li>
<li>position-sticky</li>
</ul>
<p>以下為範例原始碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 範例一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;position-relative&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px; height: 200px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box position-absolute bottom-0 end-0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px; height: 50px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 範例二 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;position-relative&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px; height: 200px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2 position-absolute bottom-0 start-100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px; height: 50px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述設定中，因為設定了 <code>bottom-0</code>、<code>end-0</code>，因此 box 會移動到又下角並貼齊邊緣；而 box2 所設定的 <code>start-100</code> 會因為數值所推的距離是根據外層寬度決定（外容器寬度的100%），因此位置會被推到外層容器之外並貼齊邊緣，同理，如果將 box2 的數值修改為 <code>start-50</code>，box2 的位置會是外層容器寬度的 50%，因此並不會水平置中。</p>
<h3 id="元素置中"><a href="#元素置中" class="headerlink" title="元素置中"></a>元素置中</h3><p>如果要讓範例中的 box2 達到水平置中的效果，可以在 box2 加上 <code>translate-middle-x</code>。</p>
<blockquote>
<p>垂直置中的設定為 translate-middle-y；水平垂直皆置中則直接設定 translate-middle。</p>
</blockquote>
<h2 id="尺寸（Sizing）"><a href="#尺寸（Sizing）" class="headerlink" title="尺寸（Sizing）"></a>尺寸（Sizing）</h2><p>使用 <code>w-數值</code> 時，元素會依據外層容器來設定寬與高，以寬度設定為例，可設定數值如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p- w-25&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-5 w-50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-5 w-75&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-5 w-100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;p-5 w-auto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 將元素寬度變回預設狀態 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>高度設定同理寬度設定。</p>
</blockquote>
<h3 id="最大寬度、高度"><a href="#最大寬度、高度" class="headerlink" title="最大寬度、高度"></a>最大寬度、高度</h3><p>在元素上加入 <code>mw-100</code>，可使元素內容的寬度不會超過外層容器寬度，同理 <code>mh-100</code>。</p>
<h3 id="相對於視窗"><a href="#相對於視窗" class="headerlink" title="相對於視窗"></a>相對於視窗</h3><p>若希望容器的寬高和瀏覽器畫面相同時，可使用以下設定：</p>
<ul>
<li>wh-100 &gt; 元素寬度等於裝置寬度</li>
<li>vh-100 &gt; 元素高度等於裝置高度</li>
</ul>
<h2 id="可視性（Visibility）"><a href="#可視性（Visibility）" class="headerlink" title="可視性（Visibility）"></a>可視性（Visibility）</h2><p>設定元素的可視性，設定方式分別有下列兩種：</p>
<ul>
<li>visible &gt; 看的到元素（預設）。</li>
<li>invisible &gt; 讓元素呈現看不見的狀態，旦區塊佔用空間依然存在。</li>
</ul>
<blockquote>
<p>invisible 與 d-none 兩者特性不同。</p>
</blockquote>
<h2 id="比例（Ratio）"><a href="#比例（Ratio）" class="headerlink" title="比例（Ratio）"></a>比例（Ratio）</h2><p>若要設定元素的比例，可使用 <code>ratio</code> 相關設定，可使用的比例數值分別有以下幾種：</p>
<ul>
<li>16x9</li>
<li>4x3</li>
<li>1x1</li>
<li>21x9</li>
</ul>
<p>該設定適合用於內嵌影片，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ratio ratio-16x9&quot;</span>&gt;</span> <span class="comment">&lt;!-- 加上 ratio 後，才可使用 ratio-* 相關設定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://...&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Youtube video&quot;</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="連結延伸（Stretched-link）"><a href="#連結延伸（Stretched-link）" class="headerlink" title="連結延伸（Stretched link）"></a>連結延伸（Stretched link）</h2><p>若一個元素內存在一個連結，且希望鼠標點擊該元素上任意位置上，都可以觸發連結時，可以在該連結上使用工具類別 <code>stretched-link</code>，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下內容取自 Bootstrap 官方文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 18rem;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top img-fluid&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>帶有延伸連結的卡片<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>Some quick example text to build on the card title and make up the bulk of the card&#x27;s content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary stretched-link&quot;</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在使用 <code>stretched-link</code> 時，需要留意外層是否有設定 <code>position-relative</code>，因為該設定視透過絕對定位來延伸連結範圍至外層容器，因此無法單獨使用在外層沒有相對定位的群組中，而 Bootstrap 的 Card（卡片）預設已加上相對定位的設定，因此上述範例中不額外做添加。</p>
<blockquote>
<p>Bootstrap 大多數自定義的原件並不預設帶有 <code>position: relative</code>，因此必須添加 <code>potition: relative</code>，避免連結延伸到父容器以外的區域。</p>
</blockquote>
<h2 id="文字截斷（Text-truncation）"><a href="#文字截斷（Text-truncation）" class="headerlink" title="文字截斷（Text truncation）"></a>文字截斷（Text truncation）</h2><p>如果內容文字較長，可以使用工具類別 <code>text-truncate</code> 來將超出寬度的內容，透過刪節號截斷文字，並以單行文字內容呈現，但是外層容器需要限制寬度（容器型態必需是 <code>display: inline-block</code> 或 <code>display: block</code>）才可正常運作，範例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- block --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2 text-truncate&quot;</span>&gt;</span></span><br><span class="line">    	Lorem100</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- inline --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;d-inline-block text-truncate&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 150px;&quot;</span>&gt;</span></span><br><span class="line">	Lorem100</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
